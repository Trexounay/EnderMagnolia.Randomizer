#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SlotSelection_Entry

#include "Basic.hpp"

#include "Zion_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.CanConvertToNG+
// 0x000C (0x000C - 0x0000)
struct WBP_SlotSelection_Entry_C_CanConvertToNG_ final
{
public:
	bool                                          bCanConvertToNG__0;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameEndingType                               Temp_byte_Variable;                                // 0x0001(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNewGamePlusEnabled_ReturnValue;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_CanConvertToNG_) == 0x000004, "Wrong alignment on WBP_SlotSelection_Entry_C_CanConvertToNG_");
static_assert(sizeof(WBP_SlotSelection_Entry_C_CanConvertToNG_) == 0x00000C, "Wrong size on WBP_SlotSelection_Entry_C_CanConvertToNG_");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, bCanConvertToNG__0) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::bCanConvertToNG__0' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, Temp_byte_Variable) == 0x000001, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, CallFunc_IsNewGamePlusEnabled_ReturnValue) == 0x000003, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::CallFunc_IsNewGamePlusEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, CallFunc_Map_Find_Value) == 0x000004, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, CallFunc_Map_Find_ReturnValue) == 0x000008, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_CanConvertToNG_, CallFunc_Greater_IntInt_ReturnValue) == 0x00000A, "Member 'WBP_SlotSelection_Entry_C_CanConvertToNG_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.DoesSaveExists
// 0x0002 (0x0002 - 0x0000)
struct WBP_SlotSelection_Entry_C_DoesSaveExists final
{
public:
	bool                                          SaveExists;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_DoesSaveExists) == 0x000001, "Wrong alignment on WBP_SlotSelection_Entry_C_DoesSaveExists");
static_assert(sizeof(WBP_SlotSelection_Entry_C_DoesSaveExists) == 0x000002, "Wrong size on WBP_SlotSelection_Entry_C_DoesSaveExists");
static_assert(offsetof(WBP_SlotSelection_Entry_C_DoesSaveExists, SaveExists) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_DoesSaveExists::SaveExists' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_DoesSaveExists, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_SlotSelection_Entry_C_DoesSaveExists::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.ExecuteUbergraph_WBP_SlotSelection_Entry
// 0x0038 (0x0038 - 0x0000)
struct WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x0004(0x0008)(NoDestructor)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x000C(0x0008)(NoDestructor)
	ESaveExistsType                               K2Node_CustomEvent_SaveExistsType;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGameZion*                          K2Node_CustomEvent_LoadedData;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESaveExistsType                               Temp_byte_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry");
static_assert(sizeof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry) == 0x000038, "Wrong size on WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, EntryPoint) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, K2Node_Event_InFocusEvent_1) == 0x000004, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, K2Node_Event_InFocusEvent) == 0x00000C, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, K2Node_CustomEvent_SaveExistsType) == 0x000014, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::K2Node_CustomEvent_SaveExistsType' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, K2Node_CustomEvent_LoadedData) == 0x000018, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::K2Node_CustomEvent_LoadedData' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, K2Node_Event_IsDesignTime) == 0x000020, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000021, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, Temp_byte_Variable) == 0x000022, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry, K2Node_Select_Default) == 0x000030, "Member 'WBP_SlotSelection_Entry_C_ExecuteUbergraph_WBP_SlotSelection_Entry::K2Node_Select_Default' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.Initialize
// 0x0010 (0x0010 - 0x0000)
struct WBP_SlotSelection_Entry_C_Initialize final
{
public:
	ESaveExistsType                               SaveExistsType_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGameZion*                          LoadedData_0;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_Initialize) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_Initialize");
static_assert(sizeof(WBP_SlotSelection_Entry_C_Initialize) == 0x000010, "Wrong size on WBP_SlotSelection_Entry_C_Initialize");
static_assert(offsetof(WBP_SlotSelection_Entry_C_Initialize, SaveExistsType_0) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_Initialize::SaveExistsType_0' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_Initialize, LoadedData_0) == 0x000008, "Member 'WBP_SlotSelection_Entry_C_Initialize::LoadedData_0' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_SlotSelection_Entry_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on WBP_SlotSelection_Entry_C_OnAddedToFocusPath");
static_assert(sizeof(WBP_SlotSelection_Entry_C_OnAddedToFocusPath) == 0x000008, "Wrong size on WBP_SlotSelection_Entry_C_OnAddedToFocusPath");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.OnPressConfirm
// 0x01B0 (0x01B0 - 0x0000)
struct WBP_SlotSelection_Entry_C_OnPressConfirm final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WBP_SlotSelection_Entry_C_OnPressConfirm) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_OnPressConfirm");
static_assert(sizeof(WBP_SlotSelection_Entry_C_OnPressConfirm) == 0x0001B0, "Wrong size on WBP_SlotSelection_Entry_C_OnPressConfirm");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnPressConfirm, KeyEvent) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_OnPressConfirm::KeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnPressConfirm, ReturnValue) == 0x000040, "Member 'WBP_SlotSelection_Entry_C_OnPressConfirm::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnPressConfirm, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WBP_SlotSelection_Entry_C_OnPressConfirm::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.OnPressContext
// 0x0268 (0x0268 - 0x0000)
struct WBP_SlotSelection_Entry_C_OnPressContext final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_OnPressContext_ReturnValue;               // 0x00F8(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x01B0(0x00B8)()
};
static_assert(alignof(WBP_SlotSelection_Entry_C_OnPressContext) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_OnPressContext");
static_assert(sizeof(WBP_SlotSelection_Entry_C_OnPressContext) == 0x000268, "Wrong size on WBP_SlotSelection_Entry_C_OnPressContext");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnPressContext, KeyEvent) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_OnPressContext::KeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnPressContext, ReturnValue) == 0x000040, "Member 'WBP_SlotSelection_Entry_C_OnPressContext::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnPressContext, CallFunc_OnPressContext_ReturnValue) == 0x0000F8, "Member 'WBP_SlotSelection_Entry_C_OnPressContext::CallFunc_OnPressContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnPressContext, CallFunc_Handled_ReturnValue) == 0x0001B0, "Member 'WBP_SlotSelection_Entry_C_OnPressContext::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_SlotSelection_Entry_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on WBP_SlotSelection_Entry_C_OnRemovedFromFocusPath");
static_assert(sizeof(WBP_SlotSelection_Entry_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on WBP_SlotSelection_Entry_C_OnRemovedFromFocusPath");
static_assert(offsetof(WBP_SlotSelection_Entry_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_SlotSelection_Entry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_SlotSelection_Entry_C_PreConstruct");
static_assert(sizeof(WBP_SlotSelection_Entry_C_PreConstruct) == 0x000001, "Wrong size on WBP_SlotSelection_Entry_C_PreConstruct");
static_assert(offsetof(WBP_SlotSelection_Entry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.SetSlotIndex
// 0x0018 (0x0018 - 0x0000)
struct WBP_SlotSelection_Entry_C_SetSlotIndex final
{
public:
	int32                                         NewSlotIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0010)()
};
static_assert(alignof(WBP_SlotSelection_Entry_C_SetSlotIndex) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_SetSlotIndex");
static_assert(sizeof(WBP_SlotSelection_Entry_C_SetSlotIndex) == 0x000018, "Wrong size on WBP_SlotSelection_Entry_C_SetSlotIndex");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetSlotIndex, NewSlotIndex) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_SetSlotIndex::NewSlotIndex' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetSlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WBP_SlotSelection_Entry_C_SetSlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetSlotIndex, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_SlotSelection_Entry_C_SetSlotIndex::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.SetupFromSaveData
// 0x0070 (0x0070 - 0x0000)
struct WBP_SlotSelection_Entry_C_SetupFromSaveData final
{
public:
	class USaveGameZion*                          InputPin;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0010)()
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_TimeSecondsToString_ReturnValue;          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0010)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0048(0x0010)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0058(0x0010)()
	float                                         CallFunc_TimeSecondsToString_TimeInSeconds_ImplicitCast; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_SetupFromSaveData) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_SetupFromSaveData");
static_assert(sizeof(WBP_SlotSelection_Entry_C_SetupFromSaveData) == 0x000070, "Wrong size on WBP_SlotSelection_Entry_C_SetupFromSaveData");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, InputPin) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::InputPin' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_TimeSecondsToString_ReturnValue) == 0x000028, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_TimeSecondsToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000048, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000058, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupFromSaveData, CallFunc_TimeSecondsToString_TimeInSeconds_ImplicitCast) == 0x000068, "Member 'WBP_SlotSelection_Entry_C_SetupFromSaveData::CallFunc_TimeSecondsToString_TimeInSeconds_ImplicitCast' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.SetupNG+
// 0x0028 (0x0028 - 0x0000)
struct WBP_SlotSelection_Entry_C_SetupNG_ final
{
public:
	int32                                         NewGamePlusGeneration;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0010)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanConvertToNG__bCanConvertToNG_;         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_SetupNG_) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_SetupNG_");
static_assert(sizeof(WBP_SlotSelection_Entry_C_SetupNG_) == 0x000028, "Wrong size on WBP_SlotSelection_Entry_C_SetupNG_");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, NewGamePlusGeneration) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::NewGamePlusGeneration' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, Temp_byte_Variable) == 0x000004, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, CallFunc_Greater_IntInt_ReturnValue) == 0x000005, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, CallFunc_Min_ReturnValue) == 0x000008, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, Temp_bool_Variable) == 0x00000C, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, Temp_byte_Variable_1) == 0x000020, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, Temp_byte_Variable_2) == 0x000021, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, Temp_byte_Variable_3) == 0x000022, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, K2Node_Select_Default) == 0x000023, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, CallFunc_CanConvertToNG__bCanConvertToNG_) == 0x000024, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::CallFunc_CanConvertToNG__bCanConvertToNG_' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, Temp_bool_Variable_1) == 0x000025, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupNG_, K2Node_Select_Default_1) == 0x000026, "Member 'WBP_SlotSelection_Entry_C_SetupNG_::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.SetupRestPointData
// 0x0098 (0x0098 - 0x0000)
struct WBP_SlotSelection_Entry_C_SetupRestPointData final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRestPointData                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0008(0x0088)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_SetupRestPointData) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_SetupRestPointData");
static_assert(sizeof(WBP_SlotSelection_Entry_C_SetupRestPointData) == 0x000098, "Wrong size on WBP_SlotSelection_Entry_C_SetupRestPointData");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupRestPointData, RowName) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_SetupRestPointData::RowName' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupRestPointData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000008, "Member 'WBP_SlotSelection_Entry_C_SetupRestPointData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupRestPointData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000090, "Member 'WBP_SlotSelection_Entry_C_SetupRestPointData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.SetupSilhouette
// 0x0068 (0x0068 - 0x0000)
struct WBP_SlotSelection_Entry_C_SetupSilhouette final
{
public:
	TMap<EGameEndingType, int32>                  InputPin;                                          // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EGameEndingType                               Temp_byte_Variable;                                // 0x0050(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameEndingType                               Temp_byte_Variable_1;                              // 0x005A(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_1;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_SetupSilhouette) == 0x000008, "Wrong alignment on WBP_SlotSelection_Entry_C_SetupSilhouette");
static_assert(sizeof(WBP_SlotSelection_Entry_C_SetupSilhouette) == 0x000068, "Wrong size on WBP_SlotSelection_Entry_C_SetupSilhouette");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, InputPin) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::InputPin' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, Temp_byte_Variable) == 0x000050, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, CallFunc_Map_Find_Value) == 0x000054, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, CallFunc_Greater_IntInt_ReturnValue) == 0x000059, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, Temp_byte_Variable_1) == 0x00005A, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, CallFunc_Map_Find_Value_1) == 0x00005C, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, CallFunc_Map_Find_ReturnValue_1) == 0x000060, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_SlotSelection_Entry_C_SetupSilhouette, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000061, "Member 'WBP_SlotSelection_Entry_C_SetupSilhouette::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function WBP_SlotSelection_Entry.WBP_SlotSelection_Entry_C.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct WBP_SlotSelection_Entry_C_IsInitialized final
{
public:
	bool                                          bInitialized_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SlotSelection_Entry_C_IsInitialized) == 0x000001, "Wrong alignment on WBP_SlotSelection_Entry_C_IsInitialized");
static_assert(sizeof(WBP_SlotSelection_Entry_C_IsInitialized) == 0x000001, "Wrong size on WBP_SlotSelection_Entry_C_IsInitialized");
static_assert(offsetof(WBP_SlotSelection_Entry_C_IsInitialized, bInitialized_0) == 0x000000, "Member 'WBP_SlotSelection_Entry_C_IsInitialized::bInitialized_0' has a wrong offset!");

}

