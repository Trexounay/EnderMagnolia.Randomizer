#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpineMeshPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct SpineMeshPlugin.SpineMeshTangent
// 0x0020 (0x0020 - 0x0000)
struct FSpineMeshTangent final
{
public:
	struct FVector                                TangentX;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipTangentY;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpineMeshTangent) == 0x000008, "Wrong alignment on FSpineMeshTangent");
static_assert(sizeof(FSpineMeshTangent) == 0x000020, "Wrong size on FSpineMeshTangent");
static_assert(offsetof(FSpineMeshTangent, TangentX) == 0x000000, "Member 'FSpineMeshTangent::TangentX' has a wrong offset!");
static_assert(offsetof(FSpineMeshTangent, bFlipTangentY) == 0x000018, "Member 'FSpineMeshTangent::bFlipTangentY' has a wrong offset!");

// ScriptStruct SpineMeshPlugin.SpineMeshVertex
// 0x0098 (0x0098 - 0x0000)
struct FSpineMeshVertex final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpineMeshTangent                      Tangent;                                           // 0x0030(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UV0;                                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV2;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV3;                                               // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpineMeshVertex) == 0x000008, "Wrong alignment on FSpineMeshVertex");
static_assert(sizeof(FSpineMeshVertex) == 0x000098, "Wrong size on FSpineMeshVertex");
static_assert(offsetof(FSpineMeshVertex, Position) == 0x000000, "Member 'FSpineMeshVertex::Position' has a wrong offset!");
static_assert(offsetof(FSpineMeshVertex, Normal) == 0x000018, "Member 'FSpineMeshVertex::Normal' has a wrong offset!");
static_assert(offsetof(FSpineMeshVertex, Tangent) == 0x000030, "Member 'FSpineMeshVertex::Tangent' has a wrong offset!");
static_assert(offsetof(FSpineMeshVertex, Color) == 0x000050, "Member 'FSpineMeshVertex::Color' has a wrong offset!");
static_assert(offsetof(FSpineMeshVertex, UV0) == 0x000058, "Member 'FSpineMeshVertex::UV0' has a wrong offset!");
static_assert(offsetof(FSpineMeshVertex, UV1) == 0x000068, "Member 'FSpineMeshVertex::UV1' has a wrong offset!");
static_assert(offsetof(FSpineMeshVertex, UV2) == 0x000078, "Member 'FSpineMeshVertex::UV2' has a wrong offset!");
static_assert(offsetof(FSpineMeshVertex, UV3) == 0x000088, "Member 'FSpineMeshVertex::UV3' has a wrong offset!");

// ScriptStruct SpineMeshPlugin.SpineMeshUpdateSettings
// 0x0003 (0x0003 - 0x0000)
struct FSpineMeshUpdateSettings final
{
public:
	bool                                          bUpdatePositionData;                               // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateColorData;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateUVData;                                     // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpineMeshUpdateSettings) == 0x000001, "Wrong alignment on FSpineMeshUpdateSettings");
static_assert(sizeof(FSpineMeshUpdateSettings) == 0x000003, "Wrong size on FSpineMeshUpdateSettings");
static_assert(offsetof(FSpineMeshUpdateSettings, bUpdatePositionData) == 0x000000, "Member 'FSpineMeshUpdateSettings::bUpdatePositionData' has a wrong offset!");
static_assert(offsetof(FSpineMeshUpdateSettings, bUpdateColorData) == 0x000001, "Member 'FSpineMeshUpdateSettings::bUpdateColorData' has a wrong offset!");
static_assert(offsetof(FSpineMeshUpdateSettings, bUpdateUVData) == 0x000002, "Member 'FSpineMeshUpdateSettings::bUpdateUVData' has a wrong offset!");

}

