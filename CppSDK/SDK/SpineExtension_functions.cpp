#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpineExtension

#include "Basic.hpp"

#include "SpineExtension_classes.hpp"
#include "SpineExtension_parameters.hpp"


namespace SDK
{

// Function SpineExtension.SpineAnimNotify.Received_SpineNotify
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class USpineSkeletonAnimationComponent* SpineAnimationComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineAnimNotify::Received_SpineNotify(class USpineSkeletonAnimationComponent* SpineAnimationComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotify", "Received_SpineNotify");

	Params::SpineAnimNotify_Received_SpineNotify Parms{};

	Parms.SpineAnimationComponent = SpineAnimationComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineAnimNotifyState.GetExecutionRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineAnimNotifyState::GetExecutionRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotifyState", "GetExecutionRatio");

	Params::SpineAnimNotifyState_GetExecutionRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineAnimNotifyState.GetExecutionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineAnimNotifyState::GetExecutionTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotifyState", "GetExecutionTime");

	Params::SpineAnimNotifyState_GetExecutionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineAnimNotifyState.IsExecuting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineAnimNotifyState::IsExecuting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotifyState", "IsExecuting");

	Params::SpineAnimNotifyState_IsExecuting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineAnimNotifyState.Received_SpineNotifyBegin
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class USpineSkeletonAnimationComponent* SpineAnimationComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineAnimNotifyState::Received_SpineNotifyBegin(class USpineSkeletonAnimationComponent* SpineAnimationComponent, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotifyState", "Received_SpineNotifyBegin");

	Params::SpineAnimNotifyState_Received_SpineNotifyBegin Parms{};

	Parms.SpineAnimationComponent = SpineAnimationComponent;
	Parms.TotalDuration = TotalDuration;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineAnimNotifyState.Received_SpineNotifyEnd
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class USpineSkeletonAnimationComponent* SpineAnimationComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineAnimNotifyState::Received_SpineNotifyEnd(class USpineSkeletonAnimationComponent* SpineAnimationComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotifyState", "Received_SpineNotifyEnd");

	Params::SpineAnimNotifyState_Received_SpineNotifyEnd Parms{};

	Parms.SpineAnimationComponent = SpineAnimationComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineAnimNotifyState.Received_SpineNotifyTick
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class USpineSkeletonAnimationComponent* SpineAnimationComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineAnimNotifyState::Received_SpineNotifyTick(class USpineSkeletonAnimationComponent* SpineAnimationComponent, float DeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotifyState", "Received_SpineNotifyTick");

	Params::SpineAnimNotifyState_Received_SpineNotifyTick Parms{};

	Parms.SpineAnimationComponent = SpineAnimationComponent;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineAnimNotifyState_TimedFX.CustomizeFX
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UNiagaraComponent*                FX                                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineAnimNotifyState_TimedFX::CustomizeFX(class UNiagaraComponent* FX) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotifyState_TimedFX", "CustomizeFX");

	Params::SpineAnimNotifyState_TimedFX_CustomizeFX Parms{};

	Parms.FX = FX;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpineExtension.SpineAnimNotify_PlayFX.CustomizeFX
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UNiagaraComponent*                FX                                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineAnimNotify_PlayFX::CustomizeFX(class UNiagaraComponent* FX) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineAnimNotify_PlayFX", "CustomizeFX");

	Params::SpineAnimNotify_PlayFX_CustomizeFX Parms{};

	Parms.FX = FX;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpineExtension.SpineBPFLibrary.GenerateAnimationList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USpineSkeletonDataAsset*          SkeletonDataAsset                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USpineAtlasAsset*                 AtlasAsset                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USpineBPFLibrary::GenerateAnimationList(class USpineSkeletonDataAsset* SkeletonDataAsset, class USpineAtlasAsset* AtlasAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpineBPFLibrary", "GenerateAnimationList");

	Params::SpineBPFLibrary_GenerateAnimationList Parms{};

	Parms.SkeletonDataAsset = SkeletonDataAsset;
	Parms.AtlasAsset = AtlasAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineBPFLibrary.GenerateSkinList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USpineSkeletonDataAsset*          SkeletonDataAsset                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USpineAtlasAsset*                 AtlasAsset                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USpineBPFLibrary::GenerateSkinList(class USpineSkeletonDataAsset* SkeletonDataAsset, class USpineAtlasAsset* AtlasAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpineBPFLibrary", "GenerateSkinList");

	Params::SpineBPFLibrary_GenerateSkinList Parms{};

	Parms.SkeletonDataAsset = SkeletonDataAsset;
	Parms.AtlasAsset = AtlasAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineBPFLibrary.MarkFXAsGenerated
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                FXComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineBPFLibrary::MarkFXAsGenerated(class UNiagaraComponent* FXComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpineBPFLibrary", "MarkFXAsGenerated");

	Params::SpineBPFLibrary_MarkFXAsGenerated Parms{};

	Parms.FXComponent = FXComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineBPFLibrary.SpawnFXData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSpineFXData&              FXData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USpineBoneComponent*              BoneComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* USpineBPFLibrary::SpawnFXData(const struct FSpineFXData& FXData, const class AActor* Actor, class USpineBoneComponent* BoneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpineBPFLibrary", "SpawnFXData");

	Params::SpineBPFLibrary_SpawnFXData Parms{};

	Parms.FXData = std::move(FXData);
	Parms.Actor = Actor;
	Parms.BoneComponent = BoneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineFXComponent.OnFXSystemEnd
// (Native, Protected)
// Parameters:
// class UNiagaraComponent*                FX                                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineFXComponent::OnFXSystemEnd(class UNiagaraComponent* FX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineFXComponent", "OnFXSystemEnd");

	Params::SpineFXComponent_OnFXSystemEnd Parms{};

	Parms.FX = FX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineFXComponent.SpawnFX
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSpineFXData&              FXData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* USpineFXComponent::SpawnFX(const struct FSpineFXData& FXData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineFXComponent", "SpawnFX");

	Params::SpineFXComponent_SpawnFX Parms{};

	Parms.FXData = std::move(FXData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpineExtension.SpineFXComponent.SpawnFXs
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FSpineFXData>&      FXDataList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UNiagaraComponent*>*       out_FXInstances                                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USpineFXComponent::SpawnFXs(const TArray<struct FSpineFXData>& FXDataList, TArray<class UNiagaraComponent*>* out_FXInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineFXComponent", "SpawnFXs");

	Params::SpineFXComponent_SpawnFXs Parms{};

	Parms.FXDataList = std::move(FXDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (out_FXInstances != nullptr)
		*out_FXInstances = std::move(Parms.out_FXInstances);
}


// Function SpineExtension.SpineRootMotionComponent.OnAfterUpdateWorldTransform
// (Final, Native, Private)
// Parameters:
// class USpineSkeletonComponent*          Skeleton                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineRootMotionComponent::OnAfterUpdateWorldTransform(class USpineSkeletonComponent* Skeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineRootMotionComponent", "OnAfterUpdateWorldTransform");

	Params::SpineRootMotionComponent_OnAfterUpdateWorldTransform Parms{};

	Parms.Skeleton = Skeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationComplete
// (Final, Native, Private)
// Parameters:
// class UTrackEntry*                      TrackEntry                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineRootMotionComponent::OnAnyAnimationComplete(class UTrackEntry* TrackEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineRootMotionComponent", "OnAnyAnimationComplete");

	Params::SpineRootMotionComponent_OnAnyAnimationComplete Parms{};

	Parms.TrackEntry = TrackEntry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationDispose
// (Final, Native, Private)
// Parameters:
// class UTrackEntry*                      TrackEntry                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineRootMotionComponent::OnAnyAnimationDispose(class UTrackEntry* TrackEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineRootMotionComponent", "OnAnyAnimationDispose");

	Params::SpineRootMotionComponent_OnAnyAnimationDispose Parms{};

	Parms.TrackEntry = TrackEntry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationInterrupt
// (Final, Native, Private)
// Parameters:
// class UTrackEntry*                      TrackEntry                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineRootMotionComponent::OnAnyAnimationInterrupt(class UTrackEntry* TrackEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineRootMotionComponent", "OnAnyAnimationInterrupt");

	Params::SpineRootMotionComponent_OnAnyAnimationInterrupt Parms{};

	Parms.TrackEntry = TrackEntry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationStart
// (Final, Native, Private)
// Parameters:
// class UTrackEntry*                      TrackEntry                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineRootMotionComponent::OnAnyAnimationStart(class UTrackEntry* TrackEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineRootMotionComponent", "OnAnyAnimationStart");

	Params::SpineRootMotionComponent_OnAnyAnimationStart Parms{};

	Parms.TrackEntry = TrackEntry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineSkeletonAnimationExComponent.OnAnimationStart
// (Final, Native, Private)
// Parameters:
// class UTrackEntry*                      Entry                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonAnimationExComponent::OnAnimationStart(class UTrackEntry* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationExComponent", "OnAnimationStart");

	Params::SpineSkeletonAnimationExComponent_OnAnimationStart Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineSkeletonAnimationExComponent.ReplaceSpineData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USpineAtlasAsset*                 NewAtlas                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USpineSkeletonDataAsset*          NewSkeletonData                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USpineNotifyAsset*                NewNotifyAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonAnimationExComponent::ReplaceSpineData(class USpineAtlasAsset* NewAtlas, class USpineSkeletonDataAsset* NewSkeletonData, class USpineNotifyAsset* NewNotifyAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationExComponent", "ReplaceSpineData");

	Params::SpineSkeletonAnimationExComponent_ReplaceSpineData Parms{};

	Parms.NewAtlas = NewAtlas;
	Parms.NewSkeletonData = NewSkeletonData;
	Parms.NewNotifyAsset = NewNotifyAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpineExtension.SpineSkeletonAnimationExComponent.SetPlaybackTimeIgnoreTimescale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlaybackTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCallDelegates                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonAnimationExComponent::SetPlaybackTimeIgnoreTimescale(float InPlaybackTime, bool bCallDelegates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationExComponent", "SetPlaybackTimeIgnoreTimescale");

	Params::SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale Parms{};

	Parms.InPlaybackTime = InPlaybackTime;
	Parms.bCallDelegates = bCallDelegates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

