#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Item_Description

#include "Basic.hpp"

#include "WBP_Item_Description_classes.hpp"
#include "WBP_Item_Description_parameters.hpp"


namespace SDK
{

// Function WBP_Item_Description.WBP_Item_Description_C.Cleanup
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_Item_Description_C::Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "Cleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Item_Description.WBP_Item_Description_C.Clear
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       DataHandle                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWBP_Item_Description_C::Clear(const struct FDataTableRowHandle& DataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "Clear");

	Params::WBP_Item_Description_C_Clear Parms{};

	Parms.DataHandle = std::move(DataHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Item_Description_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Item_Description.WBP_Item_Description_C.ExecuteUbergraph_WBP_Item_Description
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Item_Description_C::ExecuteUbergraph_WBP_Item_Description(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "ExecuteUbergraph_WBP_Item_Description");

	Params::WBP_Item_Description_C_ExecuteUbergraph_WBP_Item_Description Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.Setup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       ItemHandle                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWBP_Item_Description_C::Setup(const struct FDataTableRowHandle& ItemHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "Setup");

	Params::WBP_Item_Description_C_Setup Parms{};

	Parms.ItemHandle = std::move(ItemHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupEquipmentData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UWBP_Item_Description_C::SetupEquipmentData(const struct FDataTableRowHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupEquipmentData");

	Params::WBP_Item_Description_C_SetupEquipmentData Parms{};

	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupPassiveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UWBP_Item_Description_C::SetupPassiveData(const struct FDataTableRowHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupPassiveData");

	Params::WBP_Item_Description_C_SetupPassiveData Parms{};

	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupPassiveUpgrade
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    bCanBeUpgraded                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Item_Description_C::SetupPassiveUpgrade(const struct FDataTableRowHandle& Handle, bool bCanBeUpgraded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupPassiveUpgrade");

	Params::WBP_Item_Description_C_SetupPassiveUpgrade Parms{};

	Parms.Handle = std::move(Handle);
	Parms.bCanBeUpgraded = bCanBeUpgraded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupReinforcementTag
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUnlocked                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCanReinforce                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Item_Description_C::SetupReinforcementTag(bool bUnlocked, bool bCanReinforce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupReinforcementTag");

	Params::WBP_Item_Description_C_SetupReinforcementTag Parms{};

	Parms.bUnlocked = bUnlocked;
	Parms.bCanReinforce = bCanReinforce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupSkill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpecialSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Item_Description_C::SetupSkill(const struct FDataTableRowHandle& Handle, int32 Level, bool bSpecialSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupSkill");

	Params::WBP_Item_Description_C_SetupSkill Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Level = Level;
	Parms.bSpecialSkill = bSpecialSkill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupSkillUnlock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpecialSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Item_Description_C::SetupSkillUnlock(const struct FDataTableRowHandle& Handle, int32 Level, bool bSpecialSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupSkillUnlock");

	Params::WBP_Item_Description_C_SetupSkillUnlock Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Level = Level;
	Parms.bSpecialSkill = bSpecialSkill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupSkillUpgrade
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextLevel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpecialSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Item_Description_C::SetupSkillUpgrade(const struct FDataTableRowHandle& Handle, int32 Level, int32 NextLevel, bool bSpecialSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupSkillUpgrade");

	Params::WBP_Item_Description_C_SetupSkillUpgrade Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Level = Level;
	Parms.NextLevel = NextLevel;
	Parms.bSpecialSkill = bSpecialSkill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupTip
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UWBP_Item_Description_C::SetupTip(const struct FDataTableRowHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupTip");

	Params::WBP_Item_Description_C_SetupTip Parms{};

	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupTutorial
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UWBP_Item_Description_C::SetupTutorial(const struct FDataTableRowHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupTutorial");

	Params::WBP_Item_Description_C_SetupTutorial Parms{};

	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Item_Description.WBP_Item_Description_C.SetupTexts
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FInventoryItemData&        InventoryItemData                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_Item_Description_C::SetupTexts(const struct FInventoryItemData& InventoryItemData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Item_Description_C", "SetupTexts");

	Params::WBP_Item_Description_C_SetupTexts Parms{};

	Parms.InventoryItemData = std::move(InventoryItemData);

	UObject::ProcessEvent(Func, &Parms);
}

}

