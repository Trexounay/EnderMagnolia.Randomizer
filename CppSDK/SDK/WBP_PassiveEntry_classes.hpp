#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PassiveEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Zion_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_PassiveEntry.WBP_PassiveEntry_C
// 0x00B8 (0x0518 - 0x0460)
class UWBP_PassiveEntry_C final : public UUserWidgetZion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOverlay*                               Overlay_Cost;                                      // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Equipped;                                  // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_1;                                        // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SlotBG;                                            // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SlotText;                                          // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Button_Item_C*                     WBP_Button_Item;                                   // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DataHandle;                                        // 0x0498(0x0010)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	TMulticastInlineDelegate<void(class UWBP_PassiveEntry_C* PassiveEntry)> OnPressed;               // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsEquipped;                                        // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UWBP_PassiveEntry_C* PassiveEntry)> OnFocused;               // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Scale;                                             // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UWBP_PassiveEntry_C* PassiveEntry)> OnPressedContext;        // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           UnlockAvailableColor;                              // 0x04E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnlockNotAvailableColor;                           // 0x04F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnlockMaxLevelColor;                               // 0x0508(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__WBP_PassiveEntry_WBP_Button_Item_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature(const struct FKeyEvent& KeyEvent, class UWBP_Button_Item_C* Item);
	void BndEvt__WBP_PassiveEntry_WBP_Button_Item_K2Node_ComponentBoundEvent_3_OnFocused__DelegateSignature(class UWBP_Button_Item_C* Item);
	void Construct();
	void DisplayeUnlockAlreadyMaxContainer();
	void DisplayUnlockAvailableContainer();
	void DisplayUnlockNotAvailableContainer();
	void ExecuteUbergraph_WBP_PassiveEntry(int32 EntryPoint);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnPressContext(const struct FKeyEvent& KeyEvent);
	void PreConstruct(bool IsDesignTime);
	void RefreshNewVisibility();
	void SetColor(const struct FLinearColor& Color);
	void SetEquippedVisiblity(bool IsEquipped_0);
	void Setup(const struct FDataTableRowHandle& DataHandle_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_PassiveEntry_C">();
	}
	static class UWBP_PassiveEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_PassiveEntry_C>();
	}
};
static_assert(alignof(UWBP_PassiveEntry_C) == 0x000008, "Wrong alignment on UWBP_PassiveEntry_C");
static_assert(sizeof(UWBP_PassiveEntry_C) == 0x000518, "Wrong size on UWBP_PassiveEntry_C");
static_assert(offsetof(UWBP_PassiveEntry_C, UberGraphFrame) == 0x000460, "Member 'UWBP_PassiveEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, Overlay_Cost) == 0x000468, "Member 'UWBP_PassiveEntry_C::Overlay_Cost' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, Overlay_Equipped) == 0x000470, "Member 'UWBP_PassiveEntry_C::Overlay_Equipped' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, ScaleBox_1) == 0x000478, "Member 'UWBP_PassiveEntry_C::ScaleBox_1' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, SlotBG) == 0x000480, "Member 'UWBP_PassiveEntry_C::SlotBG' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, SlotText) == 0x000488, "Member 'UWBP_PassiveEntry_C::SlotText' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, WBP_Button_Item) == 0x000490, "Member 'UWBP_PassiveEntry_C::WBP_Button_Item' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, DataHandle) == 0x000498, "Member 'UWBP_PassiveEntry_C::DataHandle' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, OnPressed) == 0x0004A8, "Member 'UWBP_PassiveEntry_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, IsEquipped) == 0x0004B8, "Member 'UWBP_PassiveEntry_C::IsEquipped' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, OnFocused) == 0x0004C0, "Member 'UWBP_PassiveEntry_C::OnFocused' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, Scale) == 0x0004D0, "Member 'UWBP_PassiveEntry_C::Scale' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, OnPressedContext) == 0x0004D8, "Member 'UWBP_PassiveEntry_C::OnPressedContext' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, UnlockAvailableColor) == 0x0004E8, "Member 'UWBP_PassiveEntry_C::UnlockAvailableColor' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, UnlockNotAvailableColor) == 0x0004F8, "Member 'UWBP_PassiveEntry_C::UnlockNotAvailableColor' has a wrong offset!");
static_assert(offsetof(UWBP_PassiveEntry_C, UnlockMaxLevelColor) == 0x000508, "Member 'UWBP_PassiveEntry_C::UnlockMaxLevelColor' has a wrong offset!");

}

