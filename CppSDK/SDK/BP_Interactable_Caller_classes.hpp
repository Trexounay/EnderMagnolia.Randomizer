#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Interactable_Caller

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Interactable_Event_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Interactable_Caller.BP_Interactable_Caller_C
// 0x0060 (0x0630 - 0x05D0)
class ABP_Interactable_Caller_C : public ABP_Interactable_Event_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       SphereCollider_WakeTriggerTarget;                  // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USleepTargetComponent*                  SleepTarget;                                       // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPaperSpriteComponent*                  PaperSprite;                                       // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpineSkeletonAnimationExComponent*     SpineSkeletonAnimationEx;                          // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpineSkeletonRendererComponent*        SpineSkeletonRenderer;                             // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CallToDestination;                                 // 0x0600(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimIdle;                                          // 0x0608(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AnimInteract;                                      // 0x0618(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bWasMoving;                                        // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void BindEvents();
	void ExecuteUbergraph_BP_Interactable_Caller(int32 EntryPoint);
	void OnElevatorMoveFinish(bool bInstant, bool bWasMoving_0);
	void OnElevatorMoveStart(bool bInstant, bool bWasMoving_0);
	void OnInteract(class APlayerController* Controller);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RefreshAnimations();
	void UnbindEvents();

	bool CanBeInteracted() const;
	bool CanPlayAnimation() const;
	void GetElevatorMovementComponent(class UElevatorMovementComponent** ElevatorMovementComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Interactable_Caller_C">();
	}
	static class ABP_Interactable_Caller_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Interactable_Caller_C>();
	}
};
static_assert(alignof(ABP_Interactable_Caller_C) == 0x000008, "Wrong alignment on ABP_Interactable_Caller_C");
static_assert(sizeof(ABP_Interactable_Caller_C) == 0x000630, "Wrong size on ABP_Interactable_Caller_C");
static_assert(offsetof(ABP_Interactable_Caller_C, UberGraphFrame) == 0x0005D0, "Member 'ABP_Interactable_Caller_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, SphereCollider_WakeTriggerTarget) == 0x0005D8, "Member 'ABP_Interactable_Caller_C::SphereCollider_WakeTriggerTarget' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, SleepTarget) == 0x0005E0, "Member 'ABP_Interactable_Caller_C::SleepTarget' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, PaperSprite) == 0x0005E8, "Member 'ABP_Interactable_Caller_C::PaperSprite' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, SpineSkeletonAnimationEx) == 0x0005F0, "Member 'ABP_Interactable_Caller_C::SpineSkeletonAnimationEx' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, SpineSkeletonRenderer) == 0x0005F8, "Member 'ABP_Interactable_Caller_C::SpineSkeletonRenderer' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, CallToDestination) == 0x000600, "Member 'ABP_Interactable_Caller_C::CallToDestination' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, AnimIdle) == 0x000608, "Member 'ABP_Interactable_Caller_C::AnimIdle' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, AnimInteract) == 0x000618, "Member 'ABP_Interactable_Caller_C::AnimInteract' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_Caller_C, bWasMoving) == 0x000628, "Member 'ABP_Interactable_Caller_C::bWasMoving' has a wrong offset!");

}

