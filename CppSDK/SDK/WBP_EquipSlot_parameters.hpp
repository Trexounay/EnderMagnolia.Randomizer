#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_EquipSlot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_EquipSlot.WBP_EquipSlot_C.ExecuteUbergraph_WBP_EquipSlot
// 0x0010 (0x0010 - 0x0000)
struct WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFocused;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot) == 0x000004, "Wrong alignment on WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot");
static_assert(sizeof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot) == 0x000010, "Wrong size on WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, EntryPoint) == 0x000000, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, Temp_byte_Variable) == 0x000004, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, Temp_bool_Variable) == 0x000007, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, Temp_byte_Variable_2) == 0x000008, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, Temp_byte_Variable_3) == 0x000009, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, K2Node_Select_Default) == 0x00000A, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, K2Node_Event_bFocused) == 0x00000B, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::K2Node_Event_bFocused' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, K2Node_Event_IsDesignTime) == 0x00000C, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, Temp_bool_Variable_1) == 0x00000D, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, CallFunc_IsValid_ReturnValue_1) == 0x00000E, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot, K2Node_Select_Default_1) == 0x00000F, "Member 'WBP_EquipSlot_C_ExecuteUbergraph_WBP_EquipSlot::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_EquipSlot.WBP_EquipSlot_C.OnFocusStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_EquipSlot_C_OnFocusStateChanged final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipSlot_C_OnFocusStateChanged) == 0x000001, "Wrong alignment on WBP_EquipSlot_C_OnFocusStateChanged");
static_assert(sizeof(WBP_EquipSlot_C_OnFocusStateChanged) == 0x000001, "Wrong size on WBP_EquipSlot_C_OnFocusStateChanged");
static_assert(offsetof(WBP_EquipSlot_C_OnFocusStateChanged, bFocused) == 0x000000, "Member 'WBP_EquipSlot_C_OnFocusStateChanged::bFocused' has a wrong offset!");

// Function WBP_EquipSlot.WBP_EquipSlot_C.OnPressConfirm
// 0x01B0 (0x01B0 - 0x0000)
struct WBP_EquipSlot_C_OnPressConfirm final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WBP_EquipSlot_C_OnPressConfirm) == 0x000008, "Wrong alignment on WBP_EquipSlot_C_OnPressConfirm");
static_assert(sizeof(WBP_EquipSlot_C_OnPressConfirm) == 0x0001B0, "Wrong size on WBP_EquipSlot_C_OnPressConfirm");
static_assert(offsetof(WBP_EquipSlot_C_OnPressConfirm, KeyEvent) == 0x000000, "Member 'WBP_EquipSlot_C_OnPressConfirm::KeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_OnPressConfirm, ReturnValue) == 0x000040, "Member 'WBP_EquipSlot_C_OnPressConfirm::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_OnPressConfirm, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WBP_EquipSlot_C_OnPressConfirm::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_EquipSlot.WBP_EquipSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_EquipSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipSlot_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_EquipSlot_C_PreConstruct");
static_assert(sizeof(WBP_EquipSlot_C_PreConstruct) == 0x000001, "Wrong size on WBP_EquipSlot_C_PreConstruct");
static_assert(offsetof(WBP_EquipSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_EquipSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_EquipSlot.WBP_EquipSlot_C.SetFocusedState
// 0x0010 (0x0010 - 0x0000)
struct WBP_EquipSlot_C_SetFocusedState final
{
public:
	bool                                          Focus;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipSlot_C_SetFocusedState) == 0x000008, "Wrong alignment on WBP_EquipSlot_C_SetFocusedState");
static_assert(sizeof(WBP_EquipSlot_C_SetFocusedState) == 0x000010, "Wrong size on WBP_EquipSlot_C_SetFocusedState");
static_assert(offsetof(WBP_EquipSlot_C_SetFocusedState, Focus) == 0x000000, "Member 'WBP_EquipSlot_C_SetFocusedState::Focus' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetFocusedState, Temp_byte_Variable) == 0x000001, "Member 'WBP_EquipSlot_C_SetFocusedState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetFocusedState, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_EquipSlot_C_SetFocusedState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetFocusedState, Temp_bool_Variable) == 0x000003, "Member 'WBP_EquipSlot_C_SetFocusedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetFocusedState, K2Node_Select_Default) == 0x000004, "Member 'WBP_EquipSlot_C_SetFocusedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetFocusedState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_EquipSlot_C_SetFocusedState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_EquipSlot.WBP_EquipSlot_C.SetSelected
// 0x0005 (0x0005 - 0x0000)
struct WBP_EquipSlot_C_SetSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipSlot_C_SetSelected) == 0x000001, "Wrong alignment on WBP_EquipSlot_C_SetSelected");
static_assert(sizeof(WBP_EquipSlot_C_SetSelected) == 0x000005, "Wrong size on WBP_EquipSlot_C_SetSelected");
static_assert(offsetof(WBP_EquipSlot_C_SetSelected, bSelected) == 0x000000, "Member 'WBP_EquipSlot_C_SetSelected::bSelected' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetSelected, Temp_bool_Variable) == 0x000001, "Member 'WBP_EquipSlot_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetSelected, Temp_byte_Variable) == 0x000002, "Member 'WBP_EquipSlot_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetSelected, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_EquipSlot_C_SetSelected::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_SetSelected, K2Node_Select_Default) == 0x000004, "Member 'WBP_EquipSlot_C_SetSelected::K2Node_Select_Default' has a wrong offset!");

// Function WBP_EquipSlot.WBP_EquipSlot_C.Setup
// 0x0018 (0x0018 - 0x0000)
struct WBP_EquipSlot_C_Setup final
{
public:
	struct FDataTableRowHandle                    EquipmentHandle;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipSlot_C_Setup) == 0x000008, "Wrong alignment on WBP_EquipSlot_C_Setup");
static_assert(sizeof(WBP_EquipSlot_C_Setup) == 0x000018, "Wrong size on WBP_EquipSlot_C_Setup");
static_assert(offsetof(WBP_EquipSlot_C_Setup, EquipmentHandle) == 0x000000, "Member 'WBP_EquipSlot_C_Setup::EquipmentHandle' has a wrong offset!");
static_assert(offsetof(WBP_EquipSlot_C_Setup, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_EquipSlot_C_Setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

