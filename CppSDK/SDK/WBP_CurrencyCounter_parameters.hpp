#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CurrencyCounter

#include "Basic.hpp"

#include "Zion_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_CurrencyCounter.WBP_CurrencyCounter_C.ExecuteUbergraph_WBP_CurrencyCounter
// 0x00E8 (0x00E8 - 0x0000)
struct WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECurrencyType                                 CallFunc_GetCurrencyType_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECurrencyType                                 Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Currency_1;                           // 0x0028(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Currency;                             // 0x002C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0030(0x0010)()
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A8(0x0010)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x00C0(0x0010)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_2;       // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_3;       // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter) == 0x000008, "Wrong alignment on WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter");
static_assert(sizeof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter) == 0x0000E8, "Wrong size on WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, EntryPoint) == 0x000000, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_GetCurrencyType_ReturnValue) == 0x000004, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_GetCurrencyType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, Temp_byte_Variable) == 0x000005, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, Temp_object_Variable) == 0x000008, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, Temp_object_Variable_1) == 0x000010, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, Temp_object_Variable_2) == 0x000018, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, K2Node_Select_Default) == 0x000020, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, K2Node_Event_Currency_1) == 0x000028, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::K2Node_Event_Currency_1' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, K2Node_Event_Currency) == 0x00002C, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::K2Node_Event_Currency' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_Conv_IntToText_ReturnValue) == 0x000030, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000040, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, K2Node_MakeArray_Array) == 0x000090, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000A0, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x0000B8, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_GetText_ReturnValue) == 0x0000C0, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_PlayAnimationForward_ReturnValue_2) == 0x0000D0, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_PlayAnimationForward_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, CallFunc_PlayAnimationForward_ReturnValue_3) == 0x0000D8, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::CallFunc_PlayAnimationForward_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter, K2Node_Event_IsDesignTime) == 0x0000E0, "Member 'WBP_CurrencyCounter_C_ExecuteUbergraph_WBP_CurrencyCounter::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_CurrencyCounter.WBP_CurrencyCounter_C.OnSetAccumulatedCurrencyText
// 0x0004 (0x0004 - 0x0000)
struct WBP_CurrencyCounter_C_OnSetAccumulatedCurrencyText final
{
public:
	int32                                         Currency;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CurrencyCounter_C_OnSetAccumulatedCurrencyText) == 0x000004, "Wrong alignment on WBP_CurrencyCounter_C_OnSetAccumulatedCurrencyText");
static_assert(sizeof(WBP_CurrencyCounter_C_OnSetAccumulatedCurrencyText) == 0x000004, "Wrong size on WBP_CurrencyCounter_C_OnSetAccumulatedCurrencyText");
static_assert(offsetof(WBP_CurrencyCounter_C_OnSetAccumulatedCurrencyText, Currency) == 0x000000, "Member 'WBP_CurrencyCounter_C_OnSetAccumulatedCurrencyText::Currency' has a wrong offset!");

// Function WBP_CurrencyCounter.WBP_CurrencyCounter_C.OnSetCurrencyText
// 0x0004 (0x0004 - 0x0000)
struct WBP_CurrencyCounter_C_OnSetCurrencyText final
{
public:
	int32                                         Currency;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CurrencyCounter_C_OnSetCurrencyText) == 0x000004, "Wrong alignment on WBP_CurrencyCounter_C_OnSetCurrencyText");
static_assert(sizeof(WBP_CurrencyCounter_C_OnSetCurrencyText) == 0x000004, "Wrong size on WBP_CurrencyCounter_C_OnSetCurrencyText");
static_assert(offsetof(WBP_CurrencyCounter_C_OnSetCurrencyText, Currency) == 0x000000, "Member 'WBP_CurrencyCounter_C_OnSetCurrencyText::Currency' has a wrong offset!");

// Function WBP_CurrencyCounter.WBP_CurrencyCounter_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_CurrencyCounter_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CurrencyCounter_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_CurrencyCounter_C_PreConstruct");
static_assert(sizeof(WBP_CurrencyCounter_C_PreConstruct) == 0x000001, "Wrong size on WBP_CurrencyCounter_C_PreConstruct");
static_assert(offsetof(WBP_CurrencyCounter_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_CurrencyCounter_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

