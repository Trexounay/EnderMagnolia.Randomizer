#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Difficulty

#include "Basic.hpp"

#include "Zion_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature final
{
public:
	bool                                          ToggleValue;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature) == 0x000001, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature) == 0x000001, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature, ToggleValue) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature::ToggleValue' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature final
{
public:
	bool                                          ToggleValue;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature) == 0x000001, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature) == 0x000001, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature, ToggleValue) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature::ToggleValue' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature final
{
public:
	bool                                          ToggleValue;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature) == 0x000001, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature) == 0x000001, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature, ToggleValue) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature::ToggleValue' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature, Value) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature::Value' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature, Value) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature::Value' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature, Value) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature::Value' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature, Value) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature::Value' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature");
static_assert(sizeof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature) == 0x000008, "Wrong size on WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature");
static_assert(offsetof(WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature, Value) == 0x000000, "Member 'WBP_Difficulty_C_BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature::Value' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.ExecuteUbergraph_WBP_Difficulty
// 0x0130 (0x0130 - 0x0000)
struct WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_4;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_5;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_6;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_7;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_8;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_9;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_10;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_11;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSubsystem*                          CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultySettings                    Temp_struct_Variable;                              // 0x001C(0x0018)(NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyMode                               Temp_byte_Variable_12;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayUMGAnimationAsyncAction*           CallFunc_PlayUMGAnimation_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDifficultySystemComponent*             CallFunc_Get_ReturnValue;                          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDifficultySettings                    CallFunc_GetDifficultySettings_ReturnValue;        // 0x0048(0x0018)(ConstParm, NoDestructor)
	EDifficultyPreset                             CallFunc_GetDifficultyPreset_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             K2Node_Select_Default;                             // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             K2Node_Select_Default_1;                           // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDifficultySystemComponent*             CallFunc_Get_ReturnValue_1;                        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultySettings                    CallFunc_GetDifficultySettingsForPreset_ReturnValue; // 0x0074(0x0018)(ConstParm, NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_ComponentBoundEvent_Value_4;                // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_ComponentBoundEvent_Value_3;                // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_ComponentBoundEvent_Value_2;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_ToggleValue_2;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetGamePaused_ReturnValue;                // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetGamePaused_ReturnValue_1;              // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_ComponentBoundEvent_Value_1;                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_ComponentBoundEvent_Value;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_ToggleValue_1;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultySettings                    K2Node_Select_Default_2;                           // 0x00C4(0x0018)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultySettings                    K2Node_Select_Default_3;                           // 0x00E0(0x0018)(NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00F8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_ToggleValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerZion*                  CallFunc_Get_ReturnValue_2;                        // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDifficultySystemComponent*             CallFunc_Get_ReturnValue_3;                        // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EDifficultyMode                               CallFunc_GetDifficultyMode_ReturnValue;            // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_4;                           // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty) == 0x000008, "Wrong alignment on WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty");
static_assert(sizeof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty) == 0x000130, "Wrong size on WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, EntryPoint) == 0x000000, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable) == 0x000004, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_2) == 0x000006, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_3) == 0x000007, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_4) == 0x000008, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_5) == 0x000009, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_6) == 0x00000A, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_7) == 0x00000B, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_8) == 0x00000C, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_9) == 0x00000D, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_10) == 0x00000E, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_11) == 0x00000F, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000010, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_bool_Variable) == 0x000018, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_struct_Variable) == 0x00001C, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_bool_Variable_1) == 0x000034, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, Temp_byte_Variable_12) == 0x000035, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_PlayUMGAnimation_ReturnValue) == 0x000038, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_PlayUMGAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_Get_ReturnValue) == 0x000040, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_GetDifficultySettings_ReturnValue) == 0x000048, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_GetDifficultySettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_GetDifficultyPreset_ReturnValue) == 0x000060, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_GetDifficultyPreset_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_Select_Default) == 0x000062, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_Select_Default_1) == 0x000063, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_Get_ReturnValue_1) == 0x000068, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000070, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_GetDifficultySettingsForPreset_ReturnValue) == 0x000074, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_GetDifficultySettingsForPreset_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_Value_4) == 0x000090, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_Value_4' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_Value_3) == 0x000098, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_Value_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_Value_2) == 0x0000A0, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_Value_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_ToggleValue_2) == 0x0000A8, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_ToggleValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_Event_IsDesignTime) == 0x0000A9, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_SetGamePaused_ReturnValue) == 0x0000AA, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_SetGamePaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_SetGamePaused_ReturnValue_1) == 0x0000AB, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_SetGamePaused_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_Value_1) == 0x0000B0, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_Value_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_Value) == 0x0000B8, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_ToggleValue_1) == 0x0000C0, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_ToggleValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_Select_Default_2) == 0x0000C4, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000DC, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_Select_Default_3) == 0x0000E0, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_CreateDelegate_OutputDelegate) == 0x0000F8, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_ComponentBoundEvent_ToggleValue) == 0x000108, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_ComponentBoundEvent_ToggleValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_Get_ReturnValue_2) == 0x000110, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_Get_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_Get_ReturnValue_3) == 0x000118, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_Get_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, CallFunc_GetDifficultyMode_ReturnValue) == 0x000120, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::CallFunc_GetDifficultyMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, K2Node_Select_Default_4) == 0x000128, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::K2Node_Select_Default_4' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.GenerateDifficultySettings
// 0x0044 (0x0044 - 0x0000)
struct WBP_Difficulty_C_GenerateDifficultySettings final
{
public:
	struct FDifficultySettings                    DifficultySettings_0;                              // 0x0000(0x0018)(Parm, OutParm, NoDestructor)
	float                                         CallFunc_GetSliderValue_SliderValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_SliderValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_SliderValue_2;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_SliderValue_3;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_SliderValue_4;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDifficultySettings                    K2Node_MakeStruct_DifficultySettings;              // 0x002C(0x0018)(NoDestructor)
};
static_assert(alignof(WBP_Difficulty_C_GenerateDifficultySettings) == 0x000004, "Wrong alignment on WBP_Difficulty_C_GenerateDifficultySettings");
static_assert(sizeof(WBP_Difficulty_C_GenerateDifficultySettings) == 0x000044, "Wrong size on WBP_Difficulty_C_GenerateDifficultySettings");
static_assert(offsetof(WBP_Difficulty_C_GenerateDifficultySettings, DifficultySettings_0) == 0x000000, "Member 'WBP_Difficulty_C_GenerateDifficultySettings::DifficultySettings_0' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_GenerateDifficultySettings, CallFunc_GetSliderValue_SliderValue) == 0x000018, "Member 'WBP_Difficulty_C_GenerateDifficultySettings::CallFunc_GetSliderValue_SliderValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_GenerateDifficultySettings, CallFunc_GetSliderValue_SliderValue_1) == 0x00001C, "Member 'WBP_Difficulty_C_GenerateDifficultySettings::CallFunc_GetSliderValue_SliderValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_GenerateDifficultySettings, CallFunc_GetSliderValue_SliderValue_2) == 0x000020, "Member 'WBP_Difficulty_C_GenerateDifficultySettings::CallFunc_GetSliderValue_SliderValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_GenerateDifficultySettings, CallFunc_GetSliderValue_SliderValue_3) == 0x000024, "Member 'WBP_Difficulty_C_GenerateDifficultySettings::CallFunc_GetSliderValue_SliderValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_GenerateDifficultySettings, CallFunc_GetSliderValue_SliderValue_4) == 0x000028, "Member 'WBP_Difficulty_C_GenerateDifficultySettings::CallFunc_GetSliderValue_SliderValue_4' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_GenerateDifficultySettings, K2Node_MakeStruct_DifficultySettings) == 0x00002C, "Member 'WBP_Difficulty_C_GenerateDifficultySettings::K2Node_MakeStruct_DifficultySettings' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct WBP_Difficulty_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WBP_Difficulty_C_OnFocusReceived) == 0x000008, "Wrong alignment on WBP_Difficulty_C_OnFocusReceived");
static_assert(sizeof(WBP_Difficulty_C_OnFocusReceived) == 0x0001B0, "Wrong size on WBP_Difficulty_C_OnFocusReceived");
static_assert(offsetof(WBP_Difficulty_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'WBP_Difficulty_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'WBP_Difficulty_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'WBP_Difficulty_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WBP_Difficulty_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.OnPressCancel
// 0x01B0 (0x01B0 - 0x0000)
struct WBP_Difficulty_C_OnPressCancel final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WBP_Difficulty_C_OnPressCancel) == 0x000008, "Wrong alignment on WBP_Difficulty_C_OnPressCancel");
static_assert(sizeof(WBP_Difficulty_C_OnPressCancel) == 0x0001B0, "Wrong size on WBP_Difficulty_C_OnPressCancel");
static_assert(offsetof(WBP_Difficulty_C_OnPressCancel, KeyEvent) == 0x000000, "Member 'WBP_Difficulty_C_OnPressCancel::KeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_OnPressCancel, ReturnValue) == 0x000040, "Member 'WBP_Difficulty_C_OnPressCancel::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_OnPressCancel, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WBP_Difficulty_C_OnPressCancel::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Difficulty_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Difficulty_C_PreConstruct");
static_assert(sizeof(WBP_Difficulty_C_PreConstruct) == 0x000001, "Wrong size on WBP_Difficulty_C_PreConstruct");
static_assert(offsetof(WBP_Difficulty_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Difficulty_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.RefreshPreset
// 0x0028 (0x0028 - 0x0000)
struct WBP_Difficulty_C_RefreshPreset final
{
public:
	struct FDifficultySettings                    DifficultySettings_0;                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UDifficultySystemComponent*             CallFunc_Get_ReturnValue;                          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             CallFunc_GetDifficultyPresetFromSettings_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_RefreshPreset) == 0x000008, "Wrong alignment on WBP_Difficulty_C_RefreshPreset");
static_assert(sizeof(WBP_Difficulty_C_RefreshPreset) == 0x000028, "Wrong size on WBP_Difficulty_C_RefreshPreset");
static_assert(offsetof(WBP_Difficulty_C_RefreshPreset, DifficultySettings_0) == 0x000000, "Member 'WBP_Difficulty_C_RefreshPreset::DifficultySettings_0' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPreset, CallFunc_Get_ReturnValue) == 0x000018, "Member 'WBP_Difficulty_C_RefreshPreset::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPreset, CallFunc_GetDifficultyPresetFromSettings_ReturnValue) == 0x000020, "Member 'WBP_Difficulty_C_RefreshPreset::CallFunc_GetDifficultyPresetFromSettings_ReturnValue' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.RefreshPresetDisplay
// 0x0088 (0x0088 - 0x0000)
struct WBP_Difficulty_C_RefreshPresetDisplay final
{
public:
	EDifficultyPreset                             Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficultyPreset                             Temp_byte_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0010)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0010)()
	class FText                                   Temp_text_Variable_2;                              // 0x0040(0x0010)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0010)()
	class FText                                   Temp_text_Variable_4;                              // 0x0060(0x0010)()
	int32                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x0078(0x0010)()
};
static_assert(alignof(WBP_Difficulty_C_RefreshPresetDisplay) == 0x000008, "Wrong alignment on WBP_Difficulty_C_RefreshPresetDisplay");
static_assert(sizeof(WBP_Difficulty_C_RefreshPresetDisplay) == 0x000088, "Wrong size on WBP_Difficulty_C_RefreshPresetDisplay");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_byte_Variable) == 0x000000, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_int_Variable) == 0x000004, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_int_Variable_1) == 0x000008, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_int_Variable_2) == 0x00000C, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_int_Variable_3) == 0x000010, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_int_Variable_4) == 0x000014, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_byte_Variable_1) == 0x000018, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_text_Variable) == 0x000020, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_text_Variable_1) == 0x000030, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_text_Variable_2) == 0x000040, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_text_Variable_3) == 0x000050, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, Temp_text_Variable_4) == 0x000060, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, K2Node_Select_Default) == 0x000070, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshPresetDisplay, K2Node_Select_Default_1) == 0x000078, "Member 'WBP_Difficulty_C_RefreshPresetDisplay::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.RefreshSettingsDisplay
// 0x0028 (0x0028 - 0x0000)
struct WBP_Difficulty_C_RefreshSettingsDisplay final
{
public:
	double                                        CallFunc_SetSliderValue_InValue_ImplicitCast;      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetSliderValue_InValue_ImplicitCast_1;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetSliderValue_InValue_ImplicitCast_2;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetSliderValue_InValue_ImplicitCast_3;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetSliderValue_InValue_ImplicitCast_4;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_RefreshSettingsDisplay) == 0x000008, "Wrong alignment on WBP_Difficulty_C_RefreshSettingsDisplay");
static_assert(sizeof(WBP_Difficulty_C_RefreshSettingsDisplay) == 0x000028, "Wrong size on WBP_Difficulty_C_RefreshSettingsDisplay");
static_assert(offsetof(WBP_Difficulty_C_RefreshSettingsDisplay, CallFunc_SetSliderValue_InValue_ImplicitCast) == 0x000000, "Member 'WBP_Difficulty_C_RefreshSettingsDisplay::CallFunc_SetSliderValue_InValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshSettingsDisplay, CallFunc_SetSliderValue_InValue_ImplicitCast_1) == 0x000008, "Member 'WBP_Difficulty_C_RefreshSettingsDisplay::CallFunc_SetSliderValue_InValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshSettingsDisplay, CallFunc_SetSliderValue_InValue_ImplicitCast_2) == 0x000010, "Member 'WBP_Difficulty_C_RefreshSettingsDisplay::CallFunc_SetSliderValue_InValue_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshSettingsDisplay, CallFunc_SetSliderValue_InValue_ImplicitCast_3) == 0x000018, "Member 'WBP_Difficulty_C_RefreshSettingsDisplay::CallFunc_SetSliderValue_InValue_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_RefreshSettingsDisplay, CallFunc_SetSliderValue_InValue_ImplicitCast_4) == 0x000020, "Member 'WBP_Difficulty_C_RefreshSettingsDisplay::CallFunc_SetSliderValue_InValue_ImplicitCast_4' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.UpdateDifficultySettings
// 0x0028 (0x0028 - 0x0000)
struct WBP_Difficulty_C_UpdateDifficultySettings final
{
public:
	bool                                          RefreshPreset_0;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultySettings                    CallFunc_GenerateDifficultySettings_DifficultySettings; // 0x0004(0x0018)(NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDifficultySystemComponent*             CallFunc_Get_ReturnValue;                          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_UpdateDifficultySettings) == 0x000008, "Wrong alignment on WBP_Difficulty_C_UpdateDifficultySettings");
static_assert(sizeof(WBP_Difficulty_C_UpdateDifficultySettings) == 0x000028, "Wrong size on WBP_Difficulty_C_UpdateDifficultySettings");
static_assert(offsetof(WBP_Difficulty_C_UpdateDifficultySettings, RefreshPreset_0) == 0x000000, "Member 'WBP_Difficulty_C_UpdateDifficultySettings::RefreshPreset_0' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_UpdateDifficultySettings, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_Difficulty_C_UpdateDifficultySettings::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_UpdateDifficultySettings, CallFunc_GenerateDifficultySettings_DifficultySettings) == 0x000004, "Member 'WBP_Difficulty_C_UpdateDifficultySettings::CallFunc_GenerateDifficultySettings_DifficultySettings' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_UpdateDifficultySettings, CallFunc_Get_ReturnValue) == 0x000020, "Member 'WBP_Difficulty_C_UpdateDifficultySettings::CallFunc_Get_ReturnValue' has a wrong offset!");

}

