#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Interactable_Caller

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.BindEvents
// 0x0030 (0x0030 - 0x0000)
struct BP_Interactable_Caller_C_BindEvents final
{
public:
	class UElevatorMovementComponent*             CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bInstant, bool bWasMoving)> K2Node_CreateDelegate_OutputDelegate;            // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bInstant, bool bWasMoving)> K2Node_CreateDelegate_OutputDelegate_1;          // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_BindEvents) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_BindEvents");
static_assert(sizeof(BP_Interactable_Caller_C_BindEvents) == 0x000030, "Wrong size on BP_Interactable_Caller_C_BindEvents");
static_assert(offsetof(BP_Interactable_Caller_C_BindEvents, CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent) == 0x000000, "Member 'BP_Interactable_Caller_C_BindEvents::CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_BindEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_Interactable_Caller_C_BindEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_BindEvents, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Interactable_Caller_C_BindEvents::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_BindEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'BP_Interactable_Caller_C_BindEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.ExecuteUbergraph_BP_Interactable_Caller
// 0x0028 (0x0028 - 0x0000)
struct BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UElevatorMovementComponent*             CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_Controller;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bInstant_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bWasMoving_1;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bInstant;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bWasMoving;                     // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller");
static_assert(sizeof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller) == 0x000028, "Wrong size on BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, EntryPoint) == 0x000000, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent) == 0x000008, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, K2Node_Event_Controller) == 0x000018, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::K2Node_Event_Controller' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, K2Node_CustomEvent_bInstant_1) == 0x000020, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::K2Node_CustomEvent_bInstant_1' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, K2Node_CustomEvent_bWasMoving_1) == 0x000021, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::K2Node_CustomEvent_bWasMoving_1' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, K2Node_CustomEvent_bInstant) == 0x000022, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::K2Node_CustomEvent_bInstant' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, K2Node_CustomEvent_bWasMoving) == 0x000023, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::K2Node_CustomEvent_bWasMoving' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller, K2Node_Event_EndPlayReason) == 0x000024, "Member 'BP_Interactable_Caller_C_ExecuteUbergraph_BP_Interactable_Caller::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.OnElevatorMoveFinish
// 0x0002 (0x0002 - 0x0000)
struct BP_Interactable_Caller_C_OnElevatorMoveFinish final
{
public:
	bool                                          bInstant;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasMoving_0;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_OnElevatorMoveFinish) == 0x000001, "Wrong alignment on BP_Interactable_Caller_C_OnElevatorMoveFinish");
static_assert(sizeof(BP_Interactable_Caller_C_OnElevatorMoveFinish) == 0x000002, "Wrong size on BP_Interactable_Caller_C_OnElevatorMoveFinish");
static_assert(offsetof(BP_Interactable_Caller_C_OnElevatorMoveFinish, bInstant) == 0x000000, "Member 'BP_Interactable_Caller_C_OnElevatorMoveFinish::bInstant' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_OnElevatorMoveFinish, bWasMoving_0) == 0x000001, "Member 'BP_Interactable_Caller_C_OnElevatorMoveFinish::bWasMoving_0' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.OnElevatorMoveStart
// 0x0002 (0x0002 - 0x0000)
struct BP_Interactable_Caller_C_OnElevatorMoveStart final
{
public:
	bool                                          bInstant;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasMoving_0;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_OnElevatorMoveStart) == 0x000001, "Wrong alignment on BP_Interactable_Caller_C_OnElevatorMoveStart");
static_assert(sizeof(BP_Interactable_Caller_C_OnElevatorMoveStart) == 0x000002, "Wrong size on BP_Interactable_Caller_C_OnElevatorMoveStart");
static_assert(offsetof(BP_Interactable_Caller_C_OnElevatorMoveStart, bInstant) == 0x000000, "Member 'BP_Interactable_Caller_C_OnElevatorMoveStart::bInstant' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_OnElevatorMoveStart, bWasMoving_0) == 0x000001, "Member 'BP_Interactable_Caller_C_OnElevatorMoveStart::bWasMoving_0' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_Interactable_Caller_C_OnInteract final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_OnInteract) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_OnInteract");
static_assert(sizeof(BP_Interactable_Caller_C_OnInteract) == 0x000008, "Wrong size on BP_Interactable_Caller_C_OnInteract");
static_assert(offsetof(BP_Interactable_Caller_C_OnInteract, Controller) == 0x000000, "Member 'BP_Interactable_Caller_C_OnInteract::Controller' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Interactable_Caller_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Interactable_Caller_C_ReceiveEndPlay");
static_assert(sizeof(BP_Interactable_Caller_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Interactable_Caller_C_ReceiveEndPlay");
static_assert(offsetof(BP_Interactable_Caller_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Interactable_Caller_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.RefreshAnimations
// 0x0050 (0x0050 - 0x0000)
struct BP_Interactable_Caller_C_RefreshAnimations final
{
public:
	class UTrackEntry*                            CallFunc_AddAnimation_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTrackEntry*                            CallFunc_SetAnimation_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            CallFunc_AddAnimation_ReturnValue_1;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTrackEntry*                            CallFunc_SetAnimation_ReturnValue_1;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UElevatorMovementComponent*             CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDirectionSetToDestination_ReturnValue;  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMoving_ReturnValue;                     // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            CallFunc_SetAnimation_ReturnValue_2;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTrackEntry*                            CallFunc_AddAnimation_ReturnValue_2;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTrackEntry*                            CallFunc_SetAnimation_ReturnValue_3;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_RefreshAnimations) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_RefreshAnimations");
static_assert(sizeof(BP_Interactable_Caller_C_RefreshAnimations) == 0x000050, "Wrong size on BP_Interactable_Caller_C_RefreshAnimations");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_AddAnimation_ReturnValue) == 0x000000, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_AddAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_SetAnimation_ReturnValue) == 0x000008, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_SetAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_AddAnimation_ReturnValue_1) == 0x000018, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_AddAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_SetAnimation_ReturnValue_1) == 0x000020, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_SetAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent) == 0x000028, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_IsDirectionSetToDestination_ReturnValue) == 0x000031, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_IsDirectionSetToDestination_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000032, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_IsMoving_ReturnValue) == 0x000033, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_IsMoving_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_SetAnimation_ReturnValue_2) == 0x000038, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_SetAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_AddAnimation_ReturnValue_2) == 0x000040, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_AddAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_RefreshAnimations, CallFunc_SetAnimation_ReturnValue_3) == 0x000048, "Member 'BP_Interactable_Caller_C_RefreshAnimations::CallFunc_SetAnimation_ReturnValue_3' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.UnbindEvents
// 0x0030 (0x0030 - 0x0000)
struct BP_Interactable_Caller_C_UnbindEvents final
{
public:
	class UElevatorMovementComponent*             CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bInstant, bool bWasMoving)> K2Node_CreateDelegate_OutputDelegate;            // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bInstant, bool bWasMoving)> K2Node_CreateDelegate_OutputDelegate_1;          // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_UnbindEvents) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_UnbindEvents");
static_assert(sizeof(BP_Interactable_Caller_C_UnbindEvents) == 0x000030, "Wrong size on BP_Interactable_Caller_C_UnbindEvents");
static_assert(offsetof(BP_Interactable_Caller_C_UnbindEvents, CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent) == 0x000000, "Member 'BP_Interactable_Caller_C_UnbindEvents::CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_UnbindEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_Interactable_Caller_C_UnbindEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_UnbindEvents, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Interactable_Caller_C_UnbindEvents::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_UnbindEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'BP_Interactable_Caller_C_UnbindEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.CanBeInteracted
// 0x0018 (0x0018 - 0x0000)
struct BP_Interactable_Caller_C_CanBeInteracted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UElevatorMovementComponent*             CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDirectionSetToDestination_ReturnValue;  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanBeInteracted_ReturnValue;              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_CanBeInteracted) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_CanBeInteracted");
static_assert(sizeof(BP_Interactable_Caller_C_CanBeInteracted) == 0x000018, "Wrong size on BP_Interactable_Caller_C_CanBeInteracted");
static_assert(offsetof(BP_Interactable_Caller_C_CanBeInteracted, ReturnValue) == 0x000000, "Member 'BP_Interactable_Caller_C_CanBeInteracted::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanBeInteracted, CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent) == 0x000008, "Member 'BP_Interactable_Caller_C_CanBeInteracted::CallFunc_GetElevatorMovementComponent_ElevatorMovementComponent' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanBeInteracted, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Interactable_Caller_C_CanBeInteracted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanBeInteracted, CallFunc_IsDirectionSetToDestination_ReturnValue) == 0x000011, "Member 'BP_Interactable_Caller_C_CanBeInteracted::CallFunc_IsDirectionSetToDestination_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanBeInteracted, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000012, "Member 'BP_Interactable_Caller_C_CanBeInteracted::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanBeInteracted, CallFunc_CanBeInteracted_ReturnValue) == 0x000013, "Member 'BP_Interactable_Caller_C_CanBeInteracted::CallFunc_CanBeInteracted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanBeInteracted, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'BP_Interactable_Caller_C_CanBeInteracted::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.CanPlayAnimation
// 0x0028 (0x0028 - 0x0000)
struct BP_Interactable_Caller_C_CanPlayAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            CallFunc_GetCurrent_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_getAnimationName_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_CanPlayAnimation) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_CanPlayAnimation");
static_assert(sizeof(BP_Interactable_Caller_C_CanPlayAnimation) == 0x000028, "Wrong size on BP_Interactable_Caller_C_CanPlayAnimation");
static_assert(offsetof(BP_Interactable_Caller_C_CanPlayAnimation, ReturnValue) == 0x000000, "Member 'BP_Interactable_Caller_C_CanPlayAnimation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanPlayAnimation, CallFunc_GetCurrent_ReturnValue) == 0x000008, "Member 'BP_Interactable_Caller_C_CanPlayAnimation::CallFunc_GetCurrent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanPlayAnimation, CallFunc_getAnimationName_ReturnValue) == 0x000010, "Member 'BP_Interactable_Caller_C_CanPlayAnimation::CallFunc_getAnimationName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanPlayAnimation, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_Interactable_Caller_C_CanPlayAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Interactable_Caller_C_CanPlayAnimation, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000021, "Member 'BP_Interactable_Caller_C_CanPlayAnimation::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");

// Function BP_Interactable_Caller.BP_Interactable_Caller_C.GetElevatorMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Interactable_Caller_C_GetElevatorMovementComponent final
{
public:
	class UElevatorMovementComponent*             ElevatorMovementComponent;                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Interactable_Caller_C_GetElevatorMovementComponent) == 0x000008, "Wrong alignment on BP_Interactable_Caller_C_GetElevatorMovementComponent");
static_assert(sizeof(BP_Interactable_Caller_C_GetElevatorMovementComponent) == 0x000008, "Wrong size on BP_Interactable_Caller_C_GetElevatorMovementComponent");
static_assert(offsetof(BP_Interactable_Caller_C_GetElevatorMovementComponent, ElevatorMovementComponent) == 0x000000, "Member 'BP_Interactable_Caller_C_GetElevatorMovementComponent::ElevatorMovementComponent' has a wrong offset!");

}

