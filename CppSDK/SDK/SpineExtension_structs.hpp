#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpineExtension

#include "Basic.hpp"

#include "Niagara_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RenderLayer_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum SpineExtension.ESpineBone
// NumValues: 0x000D
enum class ESpineBone : uint8
{
	None                                     = 0,
	ActorOrigin                              = 1,
	Default                                  = 5,
	Feet                                     = 10,
	Root                                     = 50,
	Hip                                      = 60,
	Head                                     = 70,
	FootRight                                = 100,
	FootLeft                                 = 110,
	HandRight                                = 120,
	HandLeft                                 = 130,
	Custom                                   = 255,
	ESpineBone_MAX                           = 256,
};

// Enum SpineExtension.ESpineBoneRotationMode
// NumValues: 0x0004
enum class ESpineBoneRotationMode : uint8
{
	Actor                                    = 0,
	Bone                                     = 1,
	Identity                                 = 2,
	ESpineBoneRotationMode_MAX               = 3,
};

// ScriptStruct SpineExtension.SpineFXData
// 0x0100 (0x0100 - 0x0000)
struct FSpineFXData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         System;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpineBone                                    SpawnBone;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpawnBoneCustomName;                               // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpineBoneRotationMode                        RotationMode;                                      // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreScale;                                      // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToBone;                                     // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x9];                                       // 0x0027(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalSpaceOffset;                                  // 0x0030(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WorldSpaceOffset;                                  // 0x0090(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorWhenFacingLeft;                             // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderLayerOverride;                              // 0x00F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERenderLayerTypes                             RenderLayer;                                       // 0x00F2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslucencyOffsetOverride;                       // 0x00F3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranslucencyOffset;                                // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachLocationType;                                // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateOnCommandAbort;                         // 0x00F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayerEffect;                                    // 0x00FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 PoolMethod;                                        // 0x00FB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpineFXData) == 0x000010, "Wrong alignment on FSpineFXData");
static_assert(sizeof(FSpineFXData) == 0x000100, "Wrong size on FSpineFXData");
static_assert(offsetof(FSpineFXData, System) == 0x000010, "Member 'FSpineFXData::System' has a wrong offset!");
static_assert(offsetof(FSpineFXData, SpawnBone) == 0x000018, "Member 'FSpineFXData::SpawnBone' has a wrong offset!");
static_assert(offsetof(FSpineFXData, SpawnBoneCustomName) == 0x00001C, "Member 'FSpineFXData::SpawnBoneCustomName' has a wrong offset!");
static_assert(offsetof(FSpineFXData, RotationMode) == 0x000024, "Member 'FSpineFXData::RotationMode' has a wrong offset!");
static_assert(offsetof(FSpineFXData, bIgnoreScale) == 0x000025, "Member 'FSpineFXData::bIgnoreScale' has a wrong offset!");
static_assert(offsetof(FSpineFXData, bAttachToBone) == 0x000026, "Member 'FSpineFXData::bAttachToBone' has a wrong offset!");
static_assert(offsetof(FSpineFXData, LocalSpaceOffset) == 0x000030, "Member 'FSpineFXData::LocalSpaceOffset' has a wrong offset!");
static_assert(offsetof(FSpineFXData, WorldSpaceOffset) == 0x000090, "Member 'FSpineFXData::WorldSpaceOffset' has a wrong offset!");
static_assert(offsetof(FSpineFXData, bMirrorWhenFacingLeft) == 0x0000F0, "Member 'FSpineFXData::bMirrorWhenFacingLeft' has a wrong offset!");
static_assert(offsetof(FSpineFXData, bRenderLayerOverride) == 0x0000F1, "Member 'FSpineFXData::bRenderLayerOverride' has a wrong offset!");
static_assert(offsetof(FSpineFXData, RenderLayer) == 0x0000F2, "Member 'FSpineFXData::RenderLayer' has a wrong offset!");
static_assert(offsetof(FSpineFXData, bTranslucencyOffsetOverride) == 0x0000F3, "Member 'FSpineFXData::bTranslucencyOffsetOverride' has a wrong offset!");
static_assert(offsetof(FSpineFXData, TranslucencyOffset) == 0x0000F4, "Member 'FSpineFXData::TranslucencyOffset' has a wrong offset!");
static_assert(offsetof(FSpineFXData, AttachLocationType) == 0x0000F8, "Member 'FSpineFXData::AttachLocationType' has a wrong offset!");
static_assert(offsetof(FSpineFXData, bDeactivateOnCommandAbort) == 0x0000F9, "Member 'FSpineFXData::bDeactivateOnCommandAbort' has a wrong offset!");
static_assert(offsetof(FSpineFXData, IsPlayerEffect) == 0x0000FA, "Member 'FSpineFXData::IsPlayerEffect' has a wrong offset!");
static_assert(offsetof(FSpineFXData, PoolMethod) == 0x0000FB, "Member 'FSpineFXData::PoolMethod' has a wrong offset!");

// ScriptStruct SpineExtension.RootMotionFinishVelocitySettingsBP
// 0x0028 (0x0028 - 0x0000)
struct FRootMotionFinishVelocitySettingsBP final
{
public:
	ERootMotionFinishVelocityMode                 Mode;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocity;                                       // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ClampVelocity;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionFinishVelocitySettingsBP) == 0x000008, "Wrong alignment on FRootMotionFinishVelocitySettingsBP");
static_assert(sizeof(FRootMotionFinishVelocitySettingsBP) == 0x000028, "Wrong size on FRootMotionFinishVelocitySettingsBP");
static_assert(offsetof(FRootMotionFinishVelocitySettingsBP, Mode) == 0x000000, "Member 'FRootMotionFinishVelocitySettingsBP::Mode' has a wrong offset!");
static_assert(offsetof(FRootMotionFinishVelocitySettingsBP, SetVelocity) == 0x000008, "Member 'FRootMotionFinishVelocitySettingsBP::SetVelocity' has a wrong offset!");
static_assert(offsetof(FRootMotionFinishVelocitySettingsBP, ClampVelocity) == 0x000020, "Member 'FRootMotionFinishVelocitySettingsBP::ClampVelocity' has a wrong offset!");

// ScriptStruct SpineExtension.RootMotionSettings
// 0x0028 (0x0028 - 0x0000)
struct FRootMotionSettings final
{
public:
	struct FRootMotionFinishVelocitySettingsBP    FinishSettings;                                    // 0x0000(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionSettings) == 0x000008, "Wrong alignment on FRootMotionSettings");
static_assert(sizeof(FRootMotionSettings) == 0x000028, "Wrong size on FRootMotionSettings");
static_assert(offsetof(FRootMotionSettings, FinishSettings) == 0x000000, "Member 'FRootMotionSettings::FinishSettings' has a wrong offset!");

}

