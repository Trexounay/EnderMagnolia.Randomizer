#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PlayerHPGauge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Zion_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_PlayerHPGauge.WBP_PlayerHPGauge_C
// 0x0090 (0x04F0 - 0x0460)
class UWBP_PlayerHPGauge_C final : public UUserWidgetZion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OnMaxHPChangedAnimation;                           // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OnHealFullHPAnimation;                             // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OnHPChangedAnimation;                              // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 AnimFrame;                                         // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame;                                             // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           HPBar;                                             // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           HPBarDelayed;                                      // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               HPGaugeSizeBox;                                    // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             HPText;                                            // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider;                                            // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        TimeBeforeDelayedGaugeUpdate;                      // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DelayedHPTimer;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        DelayBeforeUpdate;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UStatHPComponent*                       HPComponent;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        GaugePixelPerHP;                                   // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinWidth;                                          // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxWidth;                                          // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TriggerHealFullHPAnimation();
	void SetDelayedGaugeVisible(bool Visible);
	void RefreshHPTextVisibility();
	void RefreshHPText();
	void RefreshHPGaugeWidth();
	void RefreshHPGauge(bool RefreshDelayedGauge);
	void RefreshDelayedHP();
	void OnReceiveDamage(class AActor* Source, int32 Value);
	void OnMaxHPChanged();
	void OnHPChanged();
	void Initialize(class APawn* Pawn);
	void GetHPRatio(double* HPRatio);
	void ExecuteUbergraph_WBP_PlayerHPGauge(int32 EntryPoint);
	void Destruct();
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_PlayerHPGauge_C">();
	}
	static class UWBP_PlayerHPGauge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_PlayerHPGauge_C>();
	}
};
static_assert(alignof(UWBP_PlayerHPGauge_C) == 0x000008, "Wrong alignment on UWBP_PlayerHPGauge_C");
static_assert(sizeof(UWBP_PlayerHPGauge_C) == 0x0004F0, "Wrong size on UWBP_PlayerHPGauge_C");
static_assert(offsetof(UWBP_PlayerHPGauge_C, UberGraphFrame) == 0x000460, "Member 'UWBP_PlayerHPGauge_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, OnMaxHPChangedAnimation) == 0x000468, "Member 'UWBP_PlayerHPGauge_C::OnMaxHPChangedAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, OnHealFullHPAnimation) == 0x000470, "Member 'UWBP_PlayerHPGauge_C::OnHealFullHPAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, OnHPChangedAnimation) == 0x000478, "Member 'UWBP_PlayerHPGauge_C::OnHPChangedAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, AnimFrame) == 0x000480, "Member 'UWBP_PlayerHPGauge_C::AnimFrame' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, Frame) == 0x000488, "Member 'UWBP_PlayerHPGauge_C::Frame' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, HPBar) == 0x000490, "Member 'UWBP_PlayerHPGauge_C::HPBar' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, HPBarDelayed) == 0x000498, "Member 'UWBP_PlayerHPGauge_C::HPBarDelayed' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, HPGaugeSizeBox) == 0x0004A0, "Member 'UWBP_PlayerHPGauge_C::HPGaugeSizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, HPText) == 0x0004A8, "Member 'UWBP_PlayerHPGauge_C::HPText' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, Slider) == 0x0004B0, "Member 'UWBP_PlayerHPGauge_C::Slider' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, TimeBeforeDelayedGaugeUpdate) == 0x0004B8, "Member 'UWBP_PlayerHPGauge_C::TimeBeforeDelayedGaugeUpdate' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, DelayedHPTimer) == 0x0004C0, "Member 'UWBP_PlayerHPGauge_C::DelayedHPTimer' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, DelayBeforeUpdate) == 0x0004C8, "Member 'UWBP_PlayerHPGauge_C::DelayBeforeUpdate' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, HPComponent) == 0x0004D0, "Member 'UWBP_PlayerHPGauge_C::HPComponent' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, GaugePixelPerHP) == 0x0004D8, "Member 'UWBP_PlayerHPGauge_C::GaugePixelPerHP' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, MinWidth) == 0x0004E0, "Member 'UWBP_PlayerHPGauge_C::MinWidth' has a wrong offset!");
static_assert(offsetof(UWBP_PlayerHPGauge_C, MaxWidth) == 0x0004E8, "Member 'UWBP_PlayerHPGauge_C::MaxWidth' has a wrong offset!");

}

