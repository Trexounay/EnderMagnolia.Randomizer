#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SpiritSkillEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Zion_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.ExecuteUbergraph_WBP_SpiritSkillEntry
// 0x0018 (0x0018 - 0x0000)
struct WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerZion*                  CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFocused;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry");
static_assert(sizeof(WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry) == 0x000018, "Wrong size on WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry");
static_assert(offsetof(WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry, EntryPoint) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry, CallFunc_Get_ReturnValue) == 0x000008, "Member 'WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry, K2Node_Event_bFocused) == 0x000011, "Member 'WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry::K2Node_Event_bFocused' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry, K2Node_Event_IsDesignTime) == 0x000012, "Member 'WBP_SpiritSkillEntry_C_ExecuteUbergraph_WBP_SpiritSkillEntry::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.Initialize
// 0x0018 (0x0018 - 0x0000)
struct WBP_SpiritSkillEntry_C_Initialize final
{
public:
	struct FDataTableRowHandle                    SkillData;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          bDisplayUnlockStatus_0;                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_Initialize) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_Initialize");
static_assert(sizeof(WBP_SpiritSkillEntry_C_Initialize) == 0x000018, "Wrong size on WBP_SpiritSkillEntry_C_Initialize");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Initialize, SkillData) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_Initialize::SkillData' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Initialize, bDisplayUnlockStatus_0) == 0x000010, "Member 'WBP_SpiritSkillEntry_C_Initialize::bDisplayUnlockStatus_0' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.IsValidEntry
// 0x0001 (0x0001 - 0x0000)
struct WBP_SpiritSkillEntry_C_IsValidEntry final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_IsValidEntry) == 0x000001, "Wrong alignment on WBP_SpiritSkillEntry_C_IsValidEntry");
static_assert(sizeof(WBP_SpiritSkillEntry_C_IsValidEntry) == 0x000001, "Wrong size on WBP_SpiritSkillEntry_C_IsValidEntry");
static_assert(offsetof(WBP_SpiritSkillEntry_C_IsValidEntry, IsValid) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_IsValidEntry::IsValid' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct WBP_SpiritSkillEntry_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WBP_SpiritSkillEntry_C_OnFocusReceived) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_OnFocusReceived");
static_assert(sizeof(WBP_SpiritSkillEntry_C_OnFocusReceived) == 0x0001B0, "Wrong size on WBP_SpiritSkillEntry_C_OnFocusReceived");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'WBP_SpiritSkillEntry_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'WBP_SpiritSkillEntry_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WBP_SpiritSkillEntry_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.OnFocusStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_SpiritSkillEntry_C_OnFocusStateChanged final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_OnFocusStateChanged) == 0x000001, "Wrong alignment on WBP_SpiritSkillEntry_C_OnFocusStateChanged");
static_assert(sizeof(WBP_SpiritSkillEntry_C_OnFocusStateChanged) == 0x000001, "Wrong size on WBP_SpiritSkillEntry_C_OnFocusStateChanged");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnFocusStateChanged, bFocused) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_OnFocusStateChanged::bFocused' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.OnPressConfirm
// 0x01B0 (0x01B0 - 0x0000)
struct WBP_SpiritSkillEntry_C_OnPressConfirm final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WBP_SpiritSkillEntry_C_OnPressConfirm) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_OnPressConfirm");
static_assert(sizeof(WBP_SpiritSkillEntry_C_OnPressConfirm) == 0x0001B0, "Wrong size on WBP_SpiritSkillEntry_C_OnPressConfirm");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnPressConfirm, KeyEvent) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_OnPressConfirm::KeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnPressConfirm, ReturnValue) == 0x000040, "Member 'WBP_SpiritSkillEntry_C_OnPressConfirm::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_OnPressConfirm, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WBP_SpiritSkillEntry_C_OnPressConfirm::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_SpiritSkillEntry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_SpiritSkillEntry_C_PreConstruct");
static_assert(sizeof(WBP_SpiritSkillEntry_C_PreConstruct) == 0x000001, "Wrong size on WBP_SpiritSkillEntry_C_PreConstruct");
static_assert(offsetof(WBP_SpiritSkillEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.Refresh
// 0x0558 (0x0558 - 0x0000)
struct WBP_SpiritSkillEntry_C_Refresh final
{
public:
	struct FInventoryItemSkillData                ItemSkillData;                                     // 0x0000(0x0288)(Edit, BlueprintVisible)
	ESkillSlot                                    SkillSlot;                                         // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemSkillDataValid_ReturnValue;         // 0x028A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillSlot                                    Temp_byte_Variable_1;                              // 0x028B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionInputType                              Temp_byte_Variable_2;                              // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionInputType                              Temp_byte_Variable_3;                              // 0x028D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionInputType                              Temp_byte_Variable_4;                              // 0x028E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionInputType                              Temp_byte_Variable_5;                              // 0x028F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionInputType                              Temp_byte_Variable_6;                              // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0293(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0296(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0297(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerZion*                  CallFunc_Get_ReturnValue;                          // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNextLevelForSkill_ReturnValue;         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillUnlockResultType                        CallFunc_CanUnlockSkillLevel_ReturnValue;          // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x02A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x02A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionInputType                              K2Node_Select_Default_2;                           // 0x02A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillUnlockResultType                        Temp_byte_Variable_10;                             // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_3;                           // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FInventoryItemSkillData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x02B8(0x0288)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillSlot                                    CallFunc_GetEquippedSkillSlotFromID_ReturnValue;   // 0x0541(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0542(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_543[0x5];                                      // 0x0543(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventorySkill*                        CallFunc_GetSkillInventory_ReturnValue;            // 0x0548(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasItem_ReturnValue;                      // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_Refresh) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_Refresh");
static_assert(sizeof(WBP_SpiritSkillEntry_C_Refresh) == 0x000558, "Wrong size on WBP_SpiritSkillEntry_C_Refresh");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, ItemSkillData) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_Refresh::ItemSkillData' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, SkillSlot) == 0x000288, "Member 'WBP_SpiritSkillEntry_C_Refresh::SkillSlot' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable) == 0x000289, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_IsItemSkillDataValid_ReturnValue) == 0x00028A, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_IsItemSkillDataValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_1) == 0x00028B, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_2) == 0x00028C, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_3) == 0x00028D, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_4) == 0x00028E, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_5) == 0x00028F, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_6) == 0x000290, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000291, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_bool_Variable) == 0x000292, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_7) == 0x000293, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_8) == 0x000294, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, K2Node_Select_Default) == 0x000295, "Member 'WBP_SpiritSkillEntry_C_Refresh::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_9) == 0x000296, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_BooleanOR_ReturnValue) == 0x000297, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_Get_ReturnValue) == 0x000298, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_GetNextLevelForSkill_ReturnValue) == 0x0002A0, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_GetNextLevelForSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_CanUnlockSkillLevel_ReturnValue) == 0x0002A4, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_CanUnlockSkillLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_bool_Variable_1) == 0x0002A5, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, K2Node_Select_Default_1) == 0x0002A6, "Member 'WBP_SpiritSkillEntry_C_Refresh::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, K2Node_Select_Default_2) == 0x0002A7, "Member 'WBP_SpiritSkillEntry_C_Refresh::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, Temp_byte_Variable_10) == 0x0002A8, "Member 'WBP_SpiritSkillEntry_C_Refresh::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, K2Node_Select_Default_3) == 0x0002B0, "Member 'WBP_SpiritSkillEntry_C_Refresh::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_GetDataTableRowFromName_OutRow) == 0x0002B8, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000540, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_GetEquippedSkillSlotFromID_ReturnValue) == 0x000541, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_GetEquippedSkillSlotFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_IsValid_ReturnValue) == 0x000542, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_GetSkillInventory_ReturnValue) == 0x000548, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_GetSkillInventory_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_Refresh, CallFunc_HasItem_ReturnValue) == 0x000550, "Member 'WBP_SpiritSkillEntry_C_Refresh::CallFunc_HasItem_ReturnValue' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.RefreshColors
// 0x002C (0x002C - 0x0000)
struct WBP_SpiritSkillEntry_C_RefreshColors final
{
public:
	bool                                          Unlocked;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0004(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0018(0x0014)()
};
static_assert(alignof(WBP_SpiritSkillEntry_C_RefreshColors) == 0x000004, "Wrong alignment on WBP_SpiritSkillEntry_C_RefreshColors");
static_assert(sizeof(WBP_SpiritSkillEntry_C_RefreshColors) == 0x00002C, "Wrong size on WBP_SpiritSkillEntry_C_RefreshColors");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshColors, Unlocked) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_RefreshColors::Unlocked' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshColors, Temp_bool_Variable) == 0x000001, "Member 'WBP_SpiritSkillEntry_C_RefreshColors::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshColors, Temp_bool_Variable_1) == 0x000002, "Member 'WBP_SpiritSkillEntry_C_RefreshColors::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshColors, K2Node_Select_Default) == 0x000004, "Member 'WBP_SpiritSkillEntry_C_RefreshColors::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshColors, K2Node_Select_Default_1) == 0x000018, "Member 'WBP_SpiritSkillEntry_C_RefreshColors::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.RefreshNewVisibility
// 0x0007 (0x0007 - 0x0000)
struct WBP_SpiritSkillEntry_C_RefreshNewVisibility final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemChecked_ReturnValue;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_RefreshNewVisibility) == 0x000001, "Wrong alignment on WBP_SpiritSkillEntry_C_RefreshNewVisibility");
static_assert(sizeof(WBP_SpiritSkillEntry_C_RefreshNewVisibility) == 0x000007, "Wrong size on WBP_SpiritSkillEntry_C_RefreshNewVisibility");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshNewVisibility, Temp_byte_Variable) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_RefreshNewVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshNewVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_SpiritSkillEntry_C_RefreshNewVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshNewVisibility, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'WBP_SpiritSkillEntry_C_RefreshNewVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshNewVisibility, CallFunc_IsItemChecked_ReturnValue) == 0x000003, "Member 'WBP_SpiritSkillEntry_C_RefreshNewVisibility::CallFunc_IsItemChecked_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshNewVisibility, Temp_bool_Variable) == 0x000004, "Member 'WBP_SpiritSkillEntry_C_RefreshNewVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshNewVisibility, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'WBP_SpiritSkillEntry_C_RefreshNewVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_RefreshNewVisibility, K2Node_Select_Default) == 0x000006, "Member 'WBP_SpiritSkillEntry_C_RefreshNewVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.SetFocusedState
// 0x0010 (0x0010 - 0x0000)
struct WBP_SpiritSkillEntry_C_SetFocusedState final
{
public:
	bool                                          Focus;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_SetFocusedState) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_SetFocusedState");
static_assert(sizeof(WBP_SpiritSkillEntry_C_SetFocusedState) == 0x000010, "Wrong size on WBP_SpiritSkillEntry_C_SetFocusedState");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetFocusedState, Focus) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_SetFocusedState::Focus' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetFocusedState, Temp_byte_Variable) == 0x000001, "Member 'WBP_SpiritSkillEntry_C_SetFocusedState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetFocusedState, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_SpiritSkillEntry_C_SetFocusedState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetFocusedState, Temp_bool_Variable) == 0x000003, "Member 'WBP_SpiritSkillEntry_C_SetFocusedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetFocusedState, K2Node_Select_Default) == 0x000004, "Member 'WBP_SpiritSkillEntry_C_SetFocusedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetFocusedState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_SpiritSkillEntry_C_SetFocusedState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.SetSelected
// 0x0005 (0x0005 - 0x0000)
struct WBP_SpiritSkillEntry_C_SetSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_SetSelected) == 0x000001, "Wrong alignment on WBP_SpiritSkillEntry_C_SetSelected");
static_assert(sizeof(WBP_SpiritSkillEntry_C_SetSelected) == 0x000005, "Wrong size on WBP_SpiritSkillEntry_C_SetSelected");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSelected, bSelected) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_SetSelected::bSelected' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSelected, Temp_bool_Variable) == 0x000001, "Member 'WBP_SpiritSkillEntry_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSelected, Temp_byte_Variable) == 0x000002, "Member 'WBP_SpiritSkillEntry_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSelected, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_SpiritSkillEntry_C_SetSelected::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSelected, K2Node_Select_Default) == 0x000004, "Member 'WBP_SpiritSkillEntry_C_SetSelected::K2Node_Select_Default' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.SetSpecialVisible
// 0x0005 (0x0005 - 0x0000)
struct WBP_SpiritSkillEntry_C_SetSpecialVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_SetSpecialVisible) == 0x000001, "Wrong alignment on WBP_SpiritSkillEntry_C_SetSpecialVisible");
static_assert(sizeof(WBP_SpiritSkillEntry_C_SetSpecialVisible) == 0x000005, "Wrong size on WBP_SpiritSkillEntry_C_SetSpecialVisible");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSpecialVisible, bVisible) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_SetSpecialVisible::bVisible' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSpecialVisible, Temp_bool_Variable) == 0x000001, "Member 'WBP_SpiritSkillEntry_C_SetSpecialVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSpecialVisible, Temp_byte_Variable) == 0x000002, "Member 'WBP_SpiritSkillEntry_C_SetSpecialVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSpecialVisible, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_SpiritSkillEntry_C_SetSpecialVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetSpecialVisible, K2Node_Select_Default) == 0x000004, "Member 'WBP_SpiritSkillEntry_C_SetSpecialVisible::K2Node_Select_Default' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.SetupButtonText
// 0x00F8 (0x00F8 - 0x0000)
struct WBP_SpiritSkillEntry_C_SetupButtonText final
{
public:
	EActionInputType                              InputType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRichTextInputElement>          FormatElements;                                    // 0x0008(0x0010)(Edit, BlueprintVisible)
	struct FInputDescription                      K2Node_MakeStruct_InputDescription;                // 0x0018(0x0010)(NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRichTextInputElement>          CallFunc_GetFormatElements_ReturnValue;            // 0x0030(0x0010)(ConstParm, ReferenceParm)
	struct FRichTextInputElement                  CallFunc_Array_Get_Item;                           // 0x0040(0x0048)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichTextInputElement                  K2Node_SetFieldsInStruct_StructOut;                // 0x0090(0x0048)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Temp_string_Variable;                              // 0x00E8(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_SetupButtonText) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_SetupButtonText");
static_assert(sizeof(WBP_SpiritSkillEntry_C_SetupButtonText) == 0x0000F8, "Wrong size on WBP_SpiritSkillEntry_C_SetupButtonText");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, InputType) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::InputType' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, FormatElements) == 0x000008, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::FormatElements' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, K2Node_MakeStruct_InputDescription) == 0x000018, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::K2Node_MakeStruct_InputDescription' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, Temp_int_Array_Index_Variable) == 0x000028, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, CallFunc_GetFormatElements_ReturnValue) == 0x000030, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::CallFunc_GetFormatElements_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, CallFunc_Array_Get_Item) == 0x000040, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, K2Node_SetFieldsInStruct_StructOut) == 0x000090, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, Temp_int_Loop_Counter_Variable) == 0x0000D8, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, CallFunc_Array_Add_ReturnValue) == 0x0000DC, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupButtonText, Temp_string_Variable) == 0x0000E8, "Member 'WBP_SpiritSkillEntry_C_SetupButtonText::Temp_string_Variable' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.SetupSkillRank
// 0x0398 (0x0398 - 0x0000)
struct WBP_SpiritSkillEntry_C_SetupSkillRank final
{
public:
	struct FInventoryItemSkillData                ItemSkillData;                                     // 0x0000(0x0288)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FName                                   SkillID;                                           // 0x0288(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerZion*                  CallFunc_Get_ReturnValue;                          // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UInventorySkill*                        CallFunc_GetSkillInventory_ReturnValue;            // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSkillLevel_ReturnValue;                // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasItem_ReturnValue;                      // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillLevelData                        CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData; // 0x02A8(0x00E8)()
	bool                                          CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue; // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_SetupSkillRank) == 0x000008, "Wrong alignment on WBP_SpiritSkillEntry_C_SetupSkillRank");
static_assert(sizeof(WBP_SpiritSkillEntry_C_SetupSkillRank) == 0x000398, "Wrong size on WBP_SpiritSkillEntry_C_SetupSkillRank");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, ItemSkillData) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::ItemSkillData' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, SkillID) == 0x000288, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::SkillID' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, CallFunc_Get_ReturnValue) == 0x000290, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, CallFunc_GetSkillInventory_ReturnValue) == 0x000298, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::CallFunc_GetSkillInventory_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, CallFunc_GetSkillLevel_ReturnValue) == 0x0002A0, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::CallFunc_GetSkillLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, CallFunc_HasItem_ReturnValue) == 0x0002A4, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::CallFunc_HasItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData) == 0x0002A8, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData' has a wrong offset!");
static_assert(offsetof(WBP_SpiritSkillEntry_C_SetupSkillRank, CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue) == 0x000390, "Member 'WBP_SpiritSkillEntry_C_SetupSkillRank::CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue' has a wrong offset!");

// Function WBP_SpiritSkillEntry.WBP_SpiritSkillEntry_C.TryMarkItemAsChecked
// 0x0001 (0x0001 - 0x0000)
struct WBP_SpiritSkillEntry_C_TryMarkItemAsChecked final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SpiritSkillEntry_C_TryMarkItemAsChecked) == 0x000001, "Wrong alignment on WBP_SpiritSkillEntry_C_TryMarkItemAsChecked");
static_assert(sizeof(WBP_SpiritSkillEntry_C_TryMarkItemAsChecked) == 0x000001, "Wrong size on WBP_SpiritSkillEntry_C_TryMarkItemAsChecked");
static_assert(offsetof(WBP_SpiritSkillEntry_C_TryMarkItemAsChecked, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_SpiritSkillEntry_C_TryMarkItemAsChecked::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

