#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpineExtension

#include "Basic.hpp"

#include "SpinePlugin_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "SpineExtension_structs.hpp"


namespace SDK
{

// Class SpineExtension.SpineAnimInstance
// 0x00A0 (0x00C8 - 0x0028)
class USpineAnimInstance final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USpineSkeletonAnimationComponent*       SpineAnimationComponent;                           // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineAnimSequence*                     SourceSequence;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x80];                                      // 0x0048(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAnimInstance">();
	}
	static class USpineAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAnimInstance>();
	}
};
static_assert(alignof(USpineAnimInstance) == 0x000008, "Wrong alignment on USpineAnimInstance");
static_assert(sizeof(USpineAnimInstance) == 0x0000C8, "Wrong size on USpineAnimInstance");
static_assert(offsetof(USpineAnimInstance, SpineAnimationComponent) == 0x000038, "Member 'USpineAnimInstance::SpineAnimationComponent' has a wrong offset!");
static_assert(offsetof(USpineAnimInstance, SourceSequence) == 0x000040, "Member 'USpineAnimInstance::SourceSequence' has a wrong offset!");

// Class SpineExtension.SpineAnimNotify
// 0x0008 (0x0040 - 0x0038)
class USpineAnimNotify : public UAnimNotify
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Received_SpineNotify(class USpineSkeletonAnimationComponent* SpineAnimationComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAnimNotify">();
	}
	static class USpineAnimNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAnimNotify>();
	}
};
static_assert(alignof(USpineAnimNotify) == 0x000008, "Wrong alignment on USpineAnimNotify");
static_assert(sizeof(USpineAnimNotify) == 0x000040, "Wrong size on USpineAnimNotify");

// Class SpineExtension.SpineAnimNotifyState
// 0x0010 (0x0040 - 0x0030)
class USpineAnimNotifyState : public UAnimNotifyState
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetExecutionRatio() const;
	float GetExecutionTime() const;
	bool IsExecuting() const;
	bool Received_SpineNotifyBegin(class USpineSkeletonAnimationComponent* SpineAnimationComponent, float TotalDuration) const;
	bool Received_SpineNotifyEnd(class USpineSkeletonAnimationComponent* SpineAnimationComponent) const;
	bool Received_SpineNotifyTick(class USpineSkeletonAnimationComponent* SpineAnimationComponent, float DeltaTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAnimNotifyState">();
	}
	static class USpineAnimNotifyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAnimNotifyState>();
	}
};
static_assert(alignof(USpineAnimNotifyState) == 0x000008, "Wrong alignment on USpineAnimNotifyState");
static_assert(sizeof(USpineAnimNotifyState) == 0x000040, "Wrong size on USpineAnimNotifyState");

// Class SpineExtension.SpineAnimNotifyState_TimedFX
// 0x0110 (0x0150 - 0x0040)
class USpineAnimNotifyState_TimedFX final : public USpineAnimNotifyState
{
public:
	struct FSpineFXData                           FXData;                                            // 0x0040(0x0100)(Edit, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CustomizeFX(class UNiagaraComponent* FX) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAnimNotifyState_TimedFX">();
	}
	static class USpineAnimNotifyState_TimedFX* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAnimNotifyState_TimedFX>();
	}
};
static_assert(alignof(USpineAnimNotifyState_TimedFX) == 0x000010, "Wrong alignment on USpineAnimNotifyState_TimedFX");
static_assert(sizeof(USpineAnimNotifyState_TimedFX) == 0x000150, "Wrong size on USpineAnimNotifyState_TimedFX");
static_assert(offsetof(USpineAnimNotifyState_TimedFX, FXData) == 0x000040, "Member 'USpineAnimNotifyState_TimedFX::FXData' has a wrong offset!");

// Class SpineExtension.SpineAnimNotify_PlayFX
// 0x0100 (0x0140 - 0x0040)
class USpineAnimNotify_PlayFX final : public USpineAnimNotify
{
public:
	struct FSpineFXData                           FXData;                                            // 0x0040(0x0100)(Edit, BlueprintReadOnly, NativeAccessSpecifierPrivate)

public:
	void CustomizeFX(class UNiagaraComponent* FX) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAnimNotify_PlayFX">();
	}
	static class USpineAnimNotify_PlayFX* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAnimNotify_PlayFX>();
	}
};
static_assert(alignof(USpineAnimNotify_PlayFX) == 0x000010, "Wrong alignment on USpineAnimNotify_PlayFX");
static_assert(sizeof(USpineAnimNotify_PlayFX) == 0x000140, "Wrong size on USpineAnimNotify_PlayFX");
static_assert(offsetof(USpineAnimNotify_PlayFX, FXData) == 0x000040, "Member 'USpineAnimNotify_PlayFX::FXData' has a wrong offset!");

// Class SpineExtension.SpineAnimSequence
// 0x0008 (0x00B8 - 0x00B0)
class USpineAnimSequence final : public UAnimSequenceBase
{
public:
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAnimSequence">();
	}
	static class USpineAnimSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAnimSequence>();
	}
};
static_assert(alignof(USpineAnimSequence) == 0x000008, "Wrong alignment on USpineAnimSequence");
static_assert(sizeof(USpineAnimSequence) == 0x0000B8, "Wrong size on USpineAnimSequence");

// Class SpineExtension.SpineBoneComponent
// 0x0108 (0x01A8 - 0x00A0)
class USpineBoneComponent final : public UActorComponent
{
public:
	ESpineBone                                    DefaultBone;                                       // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultCustomBoneName;                             // 0x00A4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESpineBone, class FName>                 OverrideBoneNames;                                 // 0x00B0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class USceneComponent*>     BoneFollowers;                                     // 0x0108(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, class USceneComponent*>     BoneFollowers_NoRotation;                          // 0x0158(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneComponent">();
	}
	static class USpineBoneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneComponent>();
	}
};
static_assert(alignof(USpineBoneComponent) == 0x000008, "Wrong alignment on USpineBoneComponent");
static_assert(sizeof(USpineBoneComponent) == 0x0001A8, "Wrong size on USpineBoneComponent");
static_assert(offsetof(USpineBoneComponent, DefaultBone) == 0x0000A0, "Member 'USpineBoneComponent::DefaultBone' has a wrong offset!");
static_assert(offsetof(USpineBoneComponent, DefaultCustomBoneName) == 0x0000A4, "Member 'USpineBoneComponent::DefaultCustomBoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneComponent, OverrideBoneNames) == 0x0000B0, "Member 'USpineBoneComponent::OverrideBoneNames' has a wrong offset!");
static_assert(offsetof(USpineBoneComponent, BoneFollowers) == 0x000108, "Member 'USpineBoneComponent::BoneFollowers' has a wrong offset!");
static_assert(offsetof(USpineBoneComponent, BoneFollowers_NoRotation) == 0x000158, "Member 'USpineBoneComponent::BoneFollowers_NoRotation' has a wrong offset!");

// Class SpineExtension.SpineBPFLibrary
// 0x0000 (0x0028 - 0x0028)
class USpineBPFLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class FString> GenerateAnimationList(class USpineSkeletonDataAsset* SkeletonDataAsset, class USpineAtlasAsset* AtlasAsset);
	static TArray<class FString> GenerateSkinList(class USpineSkeletonDataAsset* SkeletonDataAsset, class USpineAtlasAsset* AtlasAsset);
	static void MarkFXAsGenerated(class UNiagaraComponent* FXComponent);
	static class UNiagaraComponent* SpawnFXData(const struct FSpineFXData& FXData, const class AActor* Actor, class USpineBoneComponent* BoneComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBPFLibrary">();
	}
	static class USpineBPFLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBPFLibrary>();
	}
};
static_assert(alignof(USpineBPFLibrary) == 0x000008, "Wrong alignment on USpineBPFLibrary");
static_assert(sizeof(USpineBPFLibrary) == 0x000028, "Wrong size on USpineBPFLibrary");

// Class SpineExtension.SpineFXComponent
// 0x0028 (0x00C8 - 0x00A0)
class USpineFXComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFXSystemEnd(class UNiagaraComponent* FX);
	class UNiagaraComponent* SpawnFX(const struct FSpineFXData& FXData);
	void SpawnFXs(const TArray<struct FSpineFXData>& FXDataList, TArray<class UNiagaraComponent*>* out_FXInstances);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineFXComponent">();
	}
	static class USpineFXComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineFXComponent>();
	}
};
static_assert(alignof(USpineFXComponent) == 0x000008, "Wrong alignment on USpineFXComponent");
static_assert(sizeof(USpineFXComponent) == 0x0000C8, "Wrong size on USpineFXComponent");

// Class SpineExtension.SpineNotifyAsset
// 0x0050 (0x0078 - 0x0028)
class USpineNotifyAsset final : public UObject
{
public:
	TMap<class FString, class USpineAnimSequence*> AnimSequencePerAnims;                             // 0x0028(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineNotifyAsset">();
	}
	static class USpineNotifyAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineNotifyAsset>();
	}
};
static_assert(alignof(USpineNotifyAsset) == 0x000008, "Wrong alignment on USpineNotifyAsset");
static_assert(sizeof(USpineNotifyAsset) == 0x000078, "Wrong size on USpineNotifyAsset");
static_assert(offsetof(USpineNotifyAsset, AnimSequencePerAnims) == 0x000028, "Member 'USpineNotifyAsset::AnimSequencePerAnims' has a wrong offset!");

// Class SpineExtension.SpineRootMotionComponent
// 0x0120 (0x01C0 - 0x00A0)
class USpineRootMotionComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x120];                                     // 0x00A0(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAfterUpdateWorldTransform(class USpineSkeletonComponent* Skeleton);
	void OnAnyAnimationComplete(class UTrackEntry* TrackEntry);
	void OnAnyAnimationDispose(class UTrackEntry* TrackEntry);
	void OnAnyAnimationInterrupt(class UTrackEntry* TrackEntry);
	void OnAnyAnimationStart(class UTrackEntry* TrackEntry);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineRootMotionComponent">();
	}
	static class USpineRootMotionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineRootMotionComponent>();
	}
};
static_assert(alignof(USpineRootMotionComponent) == 0x000008, "Wrong alignment on USpineRootMotionComponent");
static_assert(sizeof(USpineRootMotionComponent) == 0x0001C0, "Wrong size on USpineRootMotionComponent");

// Class SpineExtension.SpineSkeletonAnimationExComponent
// 0x0068 (0x0380 - 0x0318)
class USpineSkeletonAnimationExComponent final : public USpineSkeletonAnimationComponent
{
public:
	class USpineNotifyAsset*                      NotifyData;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USpineAnimInstance*>             LastAnimInstances;                                 // 0x0320(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<uint32, class USpineAnimInstance*>       AnimInstanceForAnimations;                         // 0x0330(0x0050)(Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void OnAnimationStart(class UTrackEntry* Entry);
	void ReplaceSpineData(class USpineAtlasAsset* NewAtlas, class USpineSkeletonDataAsset* NewSkeletonData, class USpineNotifyAsset* NewNotifyAsset);
	void SetPlaybackTimeIgnoreTimescale(float InPlaybackTime, bool bCallDelegates);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonAnimationExComponent">();
	}
	static class USpineSkeletonAnimationExComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonAnimationExComponent>();
	}
};
static_assert(alignof(USpineSkeletonAnimationExComponent) == 0x000008, "Wrong alignment on USpineSkeletonAnimationExComponent");
static_assert(sizeof(USpineSkeletonAnimationExComponent) == 0x000380, "Wrong size on USpineSkeletonAnimationExComponent");
static_assert(offsetof(USpineSkeletonAnimationExComponent, NotifyData) == 0x000318, "Member 'USpineSkeletonAnimationExComponent::NotifyData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationExComponent, LastAnimInstances) == 0x000320, "Member 'USpineSkeletonAnimationExComponent::LastAnimInstances' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationExComponent, AnimInstanceForAnimations) == 0x000330, "Member 'USpineSkeletonAnimationExComponent::AnimInstanceForAnimations' has a wrong offset!");

}

