#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DM_Fly

#include "Basic.hpp"

#include "Zion_structs.hpp"


namespace SDK::Params
{

// Function DM_Fly.DM_Fly_C.PlayerInitialize
// 0x0020 (0x0020 - 0x0000)
struct DM_Fly_C_PlayerInitialize final
{
public:
	class ABP_CharacterZion_C*                    Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FMovementModeData                      K2Node_MakeStruct_MovementModeData;                // 0x0008(0x0002)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterZion_Player_C*             K2Node_DynamicCast_AsBP_Character_Zion_Player;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DM_Fly_C_PlayerInitialize) == 0x000008, "Wrong alignment on DM_Fly_C_PlayerInitialize");
static_assert(sizeof(DM_Fly_C_PlayerInitialize) == 0x000020, "Wrong size on DM_Fly_C_PlayerInitialize");
static_assert(offsetof(DM_Fly_C_PlayerInitialize, Player) == 0x000000, "Member 'DM_Fly_C_PlayerInitialize::Player' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_PlayerInitialize, K2Node_MakeStruct_MovementModeData) == 0x000008, "Member 'DM_Fly_C_PlayerInitialize::K2Node_MakeStruct_MovementModeData' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_PlayerInitialize, K2Node_DynamicCast_AsBP_Character_Zion_Player) == 0x000010, "Member 'DM_Fly_C_PlayerInitialize::K2Node_DynamicCast_AsBP_Character_Zion_Player' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_PlayerInitialize, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'DM_Fly_C_PlayerInitialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_PlayerInitialize, CallFunc_Array_Add_ReturnValue) == 0x00001C, "Member 'DM_Fly_C_PlayerInitialize::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function DM_Fly.DM_Fly_C.ServiceTick
// 0x0018 (0x0018 - 0x0000)
struct DM_Fly_C_ServiceTick final
{
public:
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacterZion*                         K2Node_DynamicCast_AsCharacter_Zion;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DM_Fly_C_ServiceTick) == 0x000008, "Wrong alignment on DM_Fly_C_ServiceTick");
static_assert(sizeof(DM_Fly_C_ServiceTick) == 0x000018, "Wrong size on DM_Fly_C_ServiceTick");
static_assert(offsetof(DM_Fly_C_ServiceTick, CallFunc_GetPlayerPawn_ReturnValue) == 0x000000, "Member 'DM_Fly_C_ServiceTick::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_ServiceTick, K2Node_DynamicCast_AsCharacter_Zion) == 0x000008, "Member 'DM_Fly_C_ServiceTick::K2Node_DynamicCast_AsCharacter_Zion' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_ServiceTick, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'DM_Fly_C_ServiceTick::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function DM_Fly.DM_Fly_C.SetCollision
// 0x0010 (0x0010 - 0x0000)
struct DM_Fly_C_SetCollision final
{
public:
	class ACharacterZion*                         Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      NewLocalVar;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(DM_Fly_C_SetCollision) == 0x000008, "Wrong alignment on DM_Fly_C_SetCollision");
static_assert(sizeof(DM_Fly_C_SetCollision) == 0x000010, "Wrong size on DM_Fly_C_SetCollision");
static_assert(offsetof(DM_Fly_C_SetCollision, Player) == 0x000000, "Member 'DM_Fly_C_SetCollision::Player' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_SetCollision, NewLocalVar) == 0x000008, "Member 'DM_Fly_C_SetCollision::NewLocalVar' has a wrong offset!");

// Function DM_Fly.DM_Fly_C.ToggleModule
// 0x0018 (0x0018 - 0x0000)
struct DM_Fly_C_ToggleModule final
{
public:
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacterZion*                         K2Node_DynamicCast_AsCharacter_Zion;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DM_Fly_C_ToggleModule) == 0x000008, "Wrong alignment on DM_Fly_C_ToggleModule");
static_assert(sizeof(DM_Fly_C_ToggleModule) == 0x000018, "Wrong size on DM_Fly_C_ToggleModule");
static_assert(offsetof(DM_Fly_C_ToggleModule, CallFunc_GetPlayerPawn_ReturnValue) == 0x000000, "Member 'DM_Fly_C_ToggleModule::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_ToggleModule, K2Node_DynamicCast_AsCharacter_Zion) == 0x000008, "Member 'DM_Fly_C_ToggleModule::K2Node_DynamicCast_AsCharacter_Zion' has a wrong offset!");
static_assert(offsetof(DM_Fly_C_ToggleModule, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'DM_Fly_C_ToggleModule::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

