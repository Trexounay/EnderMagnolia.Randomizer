#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EventSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class EventSystem.EventAction
// 0x0028 (0x0050 - 0x0028)
class UEventAction : public UObject
{
public:
	bool                                          bWaitForCompletion;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPostSkipAction;                                   // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventContext*                          EventContext;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishAction();
	void OnAbortAction();
	void OnFinishAction();
	void OnSkipAction();
	void OnStartAction();
	void OnUpdateAction(float DeltaTime);

	class UEventContext* GetContext() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction">();
	}
	static class UEventAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction>();
	}
};
static_assert(alignof(UEventAction) == 0x000008, "Wrong alignment on UEventAction");
static_assert(sizeof(UEventAction) == 0x000050, "Wrong size on UEventAction");
static_assert(offsetof(UEventAction, bWaitForCompletion) == 0x000028, "Member 'UEventAction::bWaitForCompletion' has a wrong offset!");
static_assert(offsetof(UEventAction, bPostSkipAction) == 0x000029, "Member 'UEventAction::bPostSkipAction' has a wrong offset!");
static_assert(offsetof(UEventAction, EventContext) == 0x000030, "Member 'UEventAction::EventContext' has a wrong offset!");

// Class EventSystem.EventAction_SubjectBinding
// 0x0008 (0x0058 - 0x0050)
class UEventAction_SubjectBinding : public UEventAction
{
public:
	struct FActorBindingKey                       SubjectBinding;                                    // 0x0050(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class AActor* GetSubject() const;
	const class FText GetSubjectName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_SubjectBinding">();
	}
	static class UEventAction_SubjectBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_SubjectBinding>();
	}
};
static_assert(alignof(UEventAction_SubjectBinding) == 0x000008, "Wrong alignment on UEventAction_SubjectBinding");
static_assert(sizeof(UEventAction_SubjectBinding) == 0x000058, "Wrong size on UEventAction_SubjectBinding");
static_assert(offsetof(UEventAction_SubjectBinding, SubjectBinding) == 0x000050, "Member 'UEventAction_SubjectBinding::SubjectBinding' has a wrong offset!");

// Class EventSystem.EventAction_Camera_AttachToSubject
// 0x0000 (0x0058 - 0x0058)
class UEventAction_Camera_AttachToSubject final : public UEventAction_SubjectBinding
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_Camera_AttachToSubject">();
	}
	static class UEventAction_Camera_AttachToSubject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_Camera_AttachToSubject>();
	}
};
static_assert(alignof(UEventAction_Camera_AttachToSubject) == 0x000008, "Wrong alignment on UEventAction_Camera_AttachToSubject");
static_assert(sizeof(UEventAction_Camera_AttachToSubject) == 0x000058, "Wrong size on UEventAction_Camera_AttachToSubject");

// Class EventSystem.EventAction_Camera_BlendEventToGame
// 0x0010 (0x0060 - 0x0050)
class UEventAction_Camera_BlendEventToGame final : public UEventAction
{
public:
	struct FViewTargetBlendSettings               BlendSettings;                                     // 0x0050(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_Camera_BlendEventToGame">();
	}
	static class UEventAction_Camera_BlendEventToGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_Camera_BlendEventToGame>();
	}
};
static_assert(alignof(UEventAction_Camera_BlendEventToGame) == 0x000008, "Wrong alignment on UEventAction_Camera_BlendEventToGame");
static_assert(sizeof(UEventAction_Camera_BlendEventToGame) == 0x000060, "Wrong size on UEventAction_Camera_BlendEventToGame");
static_assert(offsetof(UEventAction_Camera_BlendEventToGame, BlendSettings) == 0x000050, "Member 'UEventAction_Camera_BlendEventToGame::BlendSettings' has a wrong offset!");

// Class EventSystem.EventAction_Camera_BlendGameToEvent
// 0x0010 (0x0060 - 0x0050)
class UEventAction_Camera_BlendGameToEvent final : public UEventAction
{
public:
	struct FViewTargetBlendSettings               BlendSettings;                                     // 0x0050(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_Camera_BlendGameToEvent">();
	}
	static class UEventAction_Camera_BlendGameToEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_Camera_BlendGameToEvent>();
	}
};
static_assert(alignof(UEventAction_Camera_BlendGameToEvent) == 0x000008, "Wrong alignment on UEventAction_Camera_BlendGameToEvent");
static_assert(sizeof(UEventAction_Camera_BlendGameToEvent) == 0x000060, "Wrong size on UEventAction_Camera_BlendGameToEvent");
static_assert(offsetof(UEventAction_Camera_BlendGameToEvent, BlendSettings) == 0x000050, "Member 'UEventAction_Camera_BlendGameToEvent::BlendSettings' has a wrong offset!");

// Class EventSystem.EventAction_Camera_Detach
// 0x0000 (0x0050 - 0x0050)
class UEventAction_Camera_Detach final : public UEventAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_Camera_Detach">();
	}
	static class UEventAction_Camera_Detach* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_Camera_Detach>();
	}
};
static_assert(alignof(UEventAction_Camera_Detach) == 0x000008, "Wrong alignment on UEventAction_Camera_Detach");
static_assert(sizeof(UEventAction_Camera_Detach) == 0x000050, "Wrong size on UEventAction_Camera_Detach");

// Class EventSystem.EventAction_Camera_SetToSubject
// 0x0198 (0x01F0 - 0x0058)
class UEventAction_Camera_SetToSubject final : public UEventAction_SubjectBinding
{
public:
	EActorAnchor                                  Anchor;                                            // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalOffset;                                       // 0x0060(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             WorldOffset;                                       // 0x00C0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendTime;                                         // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEasingFunc                                   EasingFunction;                                    // 0x0124(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12C[0xC4];                                     // 0x012C(0x00C4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_Camera_SetToSubject">();
	}
	static class UEventAction_Camera_SetToSubject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_Camera_SetToSubject>();
	}
};
static_assert(alignof(UEventAction_Camera_SetToSubject) == 0x000010, "Wrong alignment on UEventAction_Camera_SetToSubject");
static_assert(sizeof(UEventAction_Camera_SetToSubject) == 0x0001F0, "Wrong size on UEventAction_Camera_SetToSubject");
static_assert(offsetof(UEventAction_Camera_SetToSubject, Anchor) == 0x000058, "Member 'UEventAction_Camera_SetToSubject::Anchor' has a wrong offset!");
static_assert(offsetof(UEventAction_Camera_SetToSubject, LocalOffset) == 0x000060, "Member 'UEventAction_Camera_SetToSubject::LocalOffset' has a wrong offset!");
static_assert(offsetof(UEventAction_Camera_SetToSubject, WorldOffset) == 0x0000C0, "Member 'UEventAction_Camera_SetToSubject::WorldOffset' has a wrong offset!");
static_assert(offsetof(UEventAction_Camera_SetToSubject, BlendTime) == 0x000120, "Member 'UEventAction_Camera_SetToSubject::BlendTime' has a wrong offset!");
static_assert(offsetof(UEventAction_Camera_SetToSubject, EasingFunction) == 0x000124, "Member 'UEventAction_Camera_SetToSubject::EasingFunction' has a wrong offset!");
static_assert(offsetof(UEventAction_Camera_SetToSubject, BlendExp) == 0x000128, "Member 'UEventAction_Camera_SetToSubject::BlendExp' has a wrong offset!");

// Class EventSystem.EventAction_Camera_WaitBlend
// 0x0000 (0x0050 - 0x0050)
class UEventAction_Camera_WaitBlend final : public UEventAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_Camera_WaitBlend">();
	}
	static class UEventAction_Camera_WaitBlend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_Camera_WaitBlend>();
	}
};
static_assert(alignof(UEventAction_Camera_WaitBlend) == 0x000008, "Wrong alignment on UEventAction_Camera_WaitBlend");
static_assert(sizeof(UEventAction_Camera_WaitBlend) == 0x000050, "Wrong size on UEventAction_Camera_WaitBlend");

// Class EventSystem.EventAction_DestroyActor
// 0x0000 (0x0058 - 0x0058)
class UEventAction_DestroyActor final : public UEventAction_SubjectBinding
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_DestroyActor">();
	}
	static class UEventAction_DestroyActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_DestroyActor>();
	}
};
static_assert(alignof(UEventAction_DestroyActor) == 0x000008, "Wrong alignment on UEventAction_DestroyActor");
static_assert(sizeof(UEventAction_DestroyActor) == 0x000058, "Wrong size on UEventAction_DestroyActor");

// Class EventSystem.EventAction_SetActorTransform
// 0x0078 (0x00D0 - 0x0058)
class UEventAction_SetActorTransform final : public UEventAction_SubjectBinding
{
public:
	EActorPivotTarget                             PivotTarget;                                       // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EActorBindingTransformType                    TransformType;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FActorBindingKey                       ActorBinding;                                      // 0x0060(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EActorPivotTarget                             PivotSource;                                       // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0070(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_SetActorTransform">();
	}
	static class UEventAction_SetActorTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_SetActorTransform>();
	}
};
static_assert(alignof(UEventAction_SetActorTransform) == 0x000010, "Wrong alignment on UEventAction_SetActorTransform");
static_assert(sizeof(UEventAction_SetActorTransform) == 0x0000D0, "Wrong size on UEventAction_SetActorTransform");
static_assert(offsetof(UEventAction_SetActorTransform, PivotTarget) == 0x000058, "Member 'UEventAction_SetActorTransform::PivotTarget' has a wrong offset!");
static_assert(offsetof(UEventAction_SetActorTransform, TransformType) == 0x00005C, "Member 'UEventAction_SetActorTransform::TransformType' has a wrong offset!");
static_assert(offsetof(UEventAction_SetActorTransform, ActorBinding) == 0x000060, "Member 'UEventAction_SetActorTransform::ActorBinding' has a wrong offset!");
static_assert(offsetof(UEventAction_SetActorTransform, PivotSource) == 0x000068, "Member 'UEventAction_SetActorTransform::PivotSource' has a wrong offset!");
static_assert(offsetof(UEventAction_SetActorTransform, SpawnTransform) == 0x000070, "Member 'UEventAction_SetActorTransform::SpawnTransform' has a wrong offset!");

// Class EventSystem.EventAction_SetActorVisibility
// 0x0008 (0x0060 - 0x0058)
class UEventAction_SetActorVisibility final : public UEventAction_SubjectBinding
{
public:
	bool                                          bVisible;                                          // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_SetActorVisibility">();
	}
	static class UEventAction_SetActorVisibility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_SetActorVisibility>();
	}
};
static_assert(alignof(UEventAction_SetActorVisibility) == 0x000008, "Wrong alignment on UEventAction_SetActorVisibility");
static_assert(sizeof(UEventAction_SetActorVisibility) == 0x000060, "Wrong size on UEventAction_SetActorVisibility");
static_assert(offsetof(UEventAction_SetActorVisibility, bVisible) == 0x000058, "Member 'UEventAction_SetActorVisibility::bVisible' has a wrong offset!");

// Class EventSystem.EventAction_SetAllowSkip
// 0x0008 (0x0058 - 0x0050)
class UEventAction_SetAllowSkip final : public UEventAction
{
public:
	bool                                          bAllowSkip;                                        // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_SetAllowSkip">();
	}
	static class UEventAction_SetAllowSkip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_SetAllowSkip>();
	}
};
static_assert(alignof(UEventAction_SetAllowSkip) == 0x000008, "Wrong alignment on UEventAction_SetAllowSkip");
static_assert(sizeof(UEventAction_SetAllowSkip) == 0x000058, "Wrong size on UEventAction_SetAllowSkip");
static_assert(offsetof(UEventAction_SetAllowSkip, bAllowSkip) == 0x000050, "Member 'UEventAction_SetAllowSkip::bAllowSkip' has a wrong offset!");

// Class EventSystem.EventAction_SetValueName
// 0x0010 (0x0060 - 0x0050)
class UEventAction_SetValueName final : public UEventAction
{
public:
	class FName                                   KeyToSet;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Value;                                             // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_SetValueName">();
	}
	static class UEventAction_SetValueName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_SetValueName>();
	}
};
static_assert(alignof(UEventAction_SetValueName) == 0x000008, "Wrong alignment on UEventAction_SetValueName");
static_assert(sizeof(UEventAction_SetValueName) == 0x000060, "Wrong size on UEventAction_SetValueName");
static_assert(offsetof(UEventAction_SetValueName, KeyToSet) == 0x000050, "Member 'UEventAction_SetValueName::KeyToSet' has a wrong offset!");
static_assert(offsetof(UEventAction_SetValueName, Value) == 0x000058, "Member 'UEventAction_SetValueName::Value' has a wrong offset!");

// Class EventSystem.EventAction_SnapToGround
// 0x0008 (0x0060 - 0x0058)
class UEventAction_SnapToGround final : public UEventAction_SubjectBinding
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_SnapToGround">();
	}
	static class UEventAction_SnapToGround* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_SnapToGround>();
	}
};
static_assert(alignof(UEventAction_SnapToGround) == 0x000008, "Wrong alignment on UEventAction_SnapToGround");
static_assert(sizeof(UEventAction_SnapToGround) == 0x000060, "Wrong size on UEventAction_SnapToGround");
static_assert(offsetof(UEventAction_SnapToGround, CollisionChannel) == 0x000058, "Member 'UEventAction_SnapToGround::CollisionChannel' has a wrong offset!");

// Class EventSystem.EventAction_Wait
// 0x0010 (0x0060 - 0x0050)
class UEventAction_Wait final : public UEventAction
{
public:
	EWaitType                                     WaitType;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaitTime;                                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         WaitFrame;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAction_Wait">();
	}
	static class UEventAction_Wait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAction_Wait>();
	}
};
static_assert(alignof(UEventAction_Wait) == 0x000008, "Wrong alignment on UEventAction_Wait");
static_assert(sizeof(UEventAction_Wait) == 0x000060, "Wrong size on UEventAction_Wait");
static_assert(offsetof(UEventAction_Wait, WaitType) == 0x000050, "Member 'UEventAction_Wait::WaitType' has a wrong offset!");
static_assert(offsetof(UEventAction_Wait, WaitTime) == 0x000054, "Member 'UEventAction_Wait::WaitTime' has a wrong offset!");
static_assert(offsetof(UEventAction_Wait, WaitFrame) == 0x000058, "Member 'UEventAction_Wait::WaitFrame' has a wrong offset!");

// Class EventSystem.EventActorInterface
// 0x0000 (0x0000 - 0x0000)
class IEventActorInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventActorInterface">();
	}
	static class IEventActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEventActorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IEventActorInterface) == 0x000001, "Wrong alignment on IEventActorInterface");
static_assert(sizeof(IEventActorInterface) == 0x000001, "Wrong size on IEventActorInterface");

// Class EventSystem.EventActorTalkInterface
// 0x0000 (0x0000 - 0x0000)
class IEventActorTalkInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventActorTalkInterface">();
	}
	static class IEventActorTalkInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEventActorTalkInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IEventActorTalkInterface) == 0x000001, "Wrong alignment on IEventActorTalkInterface");
static_assert(sizeof(IEventActorTalkInterface) == 0x000001, "Wrong size on IEventActorTalkInterface");

// Class EventSystem.EventAsset
// 0x0120 (0x0148 - 0x0028)
class UEventAsset final : public UObject
{
public:
	int32                                         Version;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  Guid;                                              // 0x002C(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  StartNodeGuid;                                     // 0x003C(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, class UEventNode*>         Nodes;                                             // 0x0050(0x0050)(Edit, ExportObject, EditConst, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FActorBinding>                  ActorBindings;                                     // 0x00A0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct FActorBindingKey, class FText>    ActorNames;                                        // 0x00B0(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	class FString                                 LocalizationKey;                                   // 0x0100(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                EventUIClass;                                      // 0x0110(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovementMode                                 ValidMovementMode;                                 // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHidePlayerUI;                                     // 0x0119(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLockFastTravel;                                   // 0x011A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoDismissSpirits;                               // 0x011B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoReSummonAutoSpirits;                          // 0x011C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowAutoSkip;                                    // 0x011D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDefaultAllowSkip;                                 // 0x011E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEventSkipAction>           SkipActionClass;                                   // 0x0120(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsePreSkipFadeOut;                                // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsePostSkipFadeIn;                                // 0x0129(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AEventCamera>               EventCameraClass;                                  // 0x0130(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FViewTargetBlendSettings               FallbackBlendToGameView;                           // 0x0138(0x000C)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetDialogueVersion() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventAsset">();
	}
	static class UEventAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventAsset>();
	}
};
static_assert(alignof(UEventAsset) == 0x000008, "Wrong alignment on UEventAsset");
static_assert(sizeof(UEventAsset) == 0x000148, "Wrong size on UEventAsset");
static_assert(offsetof(UEventAsset, Version) == 0x000028, "Member 'UEventAsset::Version' has a wrong offset!");
static_assert(offsetof(UEventAsset, Guid) == 0x00002C, "Member 'UEventAsset::Guid' has a wrong offset!");
static_assert(offsetof(UEventAsset, StartNodeGuid) == 0x00003C, "Member 'UEventAsset::StartNodeGuid' has a wrong offset!");
static_assert(offsetof(UEventAsset, Nodes) == 0x000050, "Member 'UEventAsset::Nodes' has a wrong offset!");
static_assert(offsetof(UEventAsset, ActorBindings) == 0x0000A0, "Member 'UEventAsset::ActorBindings' has a wrong offset!");
static_assert(offsetof(UEventAsset, ActorNames) == 0x0000B0, "Member 'UEventAsset::ActorNames' has a wrong offset!");
static_assert(offsetof(UEventAsset, LocalizationKey) == 0x000100, "Member 'UEventAsset::LocalizationKey' has a wrong offset!");
static_assert(offsetof(UEventAsset, EventUIClass) == 0x000110, "Member 'UEventAsset::EventUIClass' has a wrong offset!");
static_assert(offsetof(UEventAsset, ValidMovementMode) == 0x000118, "Member 'UEventAsset::ValidMovementMode' has a wrong offset!");
static_assert(offsetof(UEventAsset, bHidePlayerUI) == 0x000119, "Member 'UEventAsset::bHidePlayerUI' has a wrong offset!");
static_assert(offsetof(UEventAsset, bLockFastTravel) == 0x00011A, "Member 'UEventAsset::bLockFastTravel' has a wrong offset!");
static_assert(offsetof(UEventAsset, bAutoDismissSpirits) == 0x00011B, "Member 'UEventAsset::bAutoDismissSpirits' has a wrong offset!");
static_assert(offsetof(UEventAsset, bAutoReSummonAutoSpirits) == 0x00011C, "Member 'UEventAsset::bAutoReSummonAutoSpirits' has a wrong offset!");
static_assert(offsetof(UEventAsset, bAllowAutoSkip) == 0x00011D, "Member 'UEventAsset::bAllowAutoSkip' has a wrong offset!");
static_assert(offsetof(UEventAsset, bDefaultAllowSkip) == 0x00011E, "Member 'UEventAsset::bDefaultAllowSkip' has a wrong offset!");
static_assert(offsetof(UEventAsset, SkipActionClass) == 0x000120, "Member 'UEventAsset::SkipActionClass' has a wrong offset!");
static_assert(offsetof(UEventAsset, bUsePreSkipFadeOut) == 0x000128, "Member 'UEventAsset::bUsePreSkipFadeOut' has a wrong offset!");
static_assert(offsetof(UEventAsset, bUsePostSkipFadeIn) == 0x000129, "Member 'UEventAsset::bUsePostSkipFadeIn' has a wrong offset!");
static_assert(offsetof(UEventAsset, EventCameraClass) == 0x000130, "Member 'UEventAsset::EventCameraClass' has a wrong offset!");
static_assert(offsetof(UEventAsset, FallbackBlendToGameView) == 0x000138, "Member 'UEventAsset::FallbackBlendToGameView' has a wrong offset!");

// Class EventSystem.EventBindingProxyInterface
// 0x0000 (0x0000 - 0x0000)
class IEventBindingProxyInterface final
{
public:
	class AActor* GetBindingActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventBindingProxyInterface">();
	}
	static class IEventBindingProxyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEventBindingProxyInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IEventBindingProxyInterface) == 0x000001, "Wrong alignment on IEventBindingProxyInterface");
static_assert(sizeof(IEventBindingProxyInterface) == 0x000001, "Wrong size on IEventBindingProxyInterface");

// Class EventSystem.EventCamera
// 0x0000 (0x09B0 - 0x09B0)
class AEventCamera : public ACameraActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventCamera">();
	}
	static class AEventCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEventCamera>();
	}
};
static_assert(alignof(AEventCamera) == 0x000010, "Wrong alignment on AEventCamera");
static_assert(sizeof(AEventCamera) == 0x0009B0, "Wrong size on AEventCamera");

// Class EventSystem.EventCondition
// 0x0008 (0x0030 - 0x0028)
class UEventCondition : public UObject
{
public:
	bool                                          bInvert;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Evaluate(class UEventContext* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventCondition">();
	}
	static class UEventCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventCondition>();
	}
};
static_assert(alignof(UEventCondition) == 0x000008, "Wrong alignment on UEventCondition");
static_assert(sizeof(UEventCondition) == 0x000030, "Wrong size on UEventCondition");
static_assert(offsetof(UEventCondition, bInvert) == 0x000028, "Member 'UEventCondition::bInvert' has a wrong offset!");

// Class EventSystem.EventCondition_CheckValueName
// 0x0010 (0x0040 - 0x0030)
class UEventCondition_CheckValueName final : public UEventCondition
{
public:
	class FName                                   KeyToCheck;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ValueForSuccess;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventCondition_CheckValueName">();
	}
	static class UEventCondition_CheckValueName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventCondition_CheckValueName>();
	}
};
static_assert(alignof(UEventCondition_CheckValueName) == 0x000008, "Wrong alignment on UEventCondition_CheckValueName");
static_assert(sizeof(UEventCondition_CheckValueName) == 0x000040, "Wrong size on UEventCondition_CheckValueName");
static_assert(offsetof(UEventCondition_CheckValueName, KeyToCheck) == 0x000030, "Member 'UEventCondition_CheckValueName::KeyToCheck' has a wrong offset!");
static_assert(offsetof(UEventCondition_CheckValueName, ValueForSuccess) == 0x000038, "Member 'UEventCondition_CheckValueName::ValueForSuccess' has a wrong offset!");

// Class EventSystem.EventCondition_IsValueBooleanSet
// 0x0008 (0x0038 - 0x0030)
class UEventCondition_IsValueBooleanSet final : public UEventCondition
{
public:
	class FName                                   KeyToCheck;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventCondition_IsValueBooleanSet">();
	}
	static class UEventCondition_IsValueBooleanSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventCondition_IsValueBooleanSet>();
	}
};
static_assert(alignof(UEventCondition_IsValueBooleanSet) == 0x000008, "Wrong alignment on UEventCondition_IsValueBooleanSet");
static_assert(sizeof(UEventCondition_IsValueBooleanSet) == 0x000038, "Wrong size on UEventCondition_IsValueBooleanSet");
static_assert(offsetof(UEventCondition_IsValueBooleanSet, KeyToCheck) == 0x000030, "Member 'UEventCondition_IsValueBooleanSet::KeyToCheck' has a wrong offset!");

// Class EventSystem.EventCondition_IsValueIntegerSet
// 0x0008 (0x0038 - 0x0030)
class UEventCondition_IsValueIntegerSet final : public UEventCondition
{
public:
	class FName                                   KeyToCheck;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventCondition_IsValueIntegerSet">();
	}
	static class UEventCondition_IsValueIntegerSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventCondition_IsValueIntegerSet>();
	}
};
static_assert(alignof(UEventCondition_IsValueIntegerSet) == 0x000008, "Wrong alignment on UEventCondition_IsValueIntegerSet");
static_assert(sizeof(UEventCondition_IsValueIntegerSet) == 0x000038, "Wrong size on UEventCondition_IsValueIntegerSet");
static_assert(offsetof(UEventCondition_IsValueIntegerSet, KeyToCheck) == 0x000030, "Member 'UEventCondition_IsValueIntegerSet::KeyToCheck' has a wrong offset!");

// Class EventSystem.EventCondition_IsValueNameSet
// 0x0008 (0x0038 - 0x0030)
class UEventCondition_IsValueNameSet final : public UEventCondition
{
public:
	class FName                                   KeyToCheck;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventCondition_IsValueNameSet">();
	}
	static class UEventCondition_IsValueNameSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventCondition_IsValueNameSet>();
	}
};
static_assert(alignof(UEventCondition_IsValueNameSet) == 0x000008, "Wrong alignment on UEventCondition_IsValueNameSet");
static_assert(sizeof(UEventCondition_IsValueNameSet) == 0x000038, "Wrong size on UEventCondition_IsValueNameSet");
static_assert(offsetof(UEventCondition_IsValueNameSet, KeyToCheck) == 0x000030, "Member 'UEventCondition_IsValueNameSet::KeyToCheck' has a wrong offset!");

// Class EventSystem.EventCondition_IsValueRowHandleSet
// 0x0008 (0x0038 - 0x0030)
class UEventCondition_IsValueRowHandleSet final : public UEventCondition
{
public:
	class FName                                   KeyToCheck;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventCondition_IsValueRowHandleSet">();
	}
	static class UEventCondition_IsValueRowHandleSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventCondition_IsValueRowHandleSet>();
	}
};
static_assert(alignof(UEventCondition_IsValueRowHandleSet) == 0x000008, "Wrong alignment on UEventCondition_IsValueRowHandleSet");
static_assert(sizeof(UEventCondition_IsValueRowHandleSet) == 0x000038, "Wrong size on UEventCondition_IsValueRowHandleSet");
static_assert(offsetof(UEventCondition_IsValueRowHandleSet, KeyToCheck) == 0x000030, "Member 'UEventCondition_IsValueRowHandleSet::KeyToCheck' has a wrong offset!");

// Class EventSystem.EventContext
// 0x0278 (0x02A0 - 0x0028)
class UEventContext final : public UObject
{
public:
	uint8                                         Pad_28[0x268];                                     // 0x0028(0x0268)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UEventAction*>                   PostSkipActions;                                   // 0x0290(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void SetValueBoolean(const class FName& Key, const bool& Value);
	void SetValueInteger(const class FName& Key, const int32& Value);
	void SetValueName(const class FName& Key, const class FName& Value);
	void SetValueObject(const class FName& Key, class UObject* Value);
	void SetValueRowHandle(const class FName& Key, const struct FDataTableRowHandle& Value);

	class AActor* GetActorForBinding(class FName ActorBinding) const;
	class UEventAsset* GetEventAsset() const;
	class AEventCamera* GetEventCamera() const;
	class UUserWidget* GetEventUI() const;
	class AActor* GetGameViewTarget() const;
	class APlayerController* GetPlayerController() const;
	class APawn* GetPlayerPawn() const;
	bool GetValueBoolean(const class FName& Key, bool DefaultValue) const;
	int32 GetValueInteger(const class FName& Key, int32 DefaultValue) const;
	class FName GetValueName(const class FName& Key, class FName DefaultValue) const;
	class UObject* GetValueObject(const class FName& Key, class UObject* DefaultValue) const;
	struct FDataTableRowHandle GetValueRowHandle(const class FName& Key, const struct FDataTableRowHandle& DefaultValue) const;
	bool IsValueBooleanSet(const class FName& Key) const;
	bool IsValueIntegerSet(const class FName& Key) const;
	bool IsValueObjectSet(const class FName& Key) const;
	bool IsValueRowHandleSet(const class FName& Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventContext">();
	}
	static class UEventContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventContext>();
	}
};
static_assert(alignof(UEventContext) == 0x000008, "Wrong alignment on UEventContext");
static_assert(sizeof(UEventContext) == 0x0002A0, "Wrong size on UEventContext");
static_assert(offsetof(UEventContext, PostSkipActions) == 0x000290, "Member 'UEventContext::PostSkipActions' has a wrong offset!");

// Class EventSystem.EventContextAccessorInterface
// 0x0000 (0x0000 - 0x0000)
class IEventContextAccessorInterface final
{
public:
	void SetEventContext(class UEventContext* InEventContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventContextAccessorInterface">();
	}
	static class IEventContextAccessorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEventContextAccessorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IEventContextAccessorInterface) == 0x000001, "Wrong alignment on IEventContextAccessorInterface");
static_assert(sizeof(IEventContextAccessorInterface) == 0x000001, "Wrong size on IEventContextAccessorInterface");

// Class EventSystem.EventNode
// 0x0090 (0x00B8 - 0x0028)
class UEventNode : public UObject
{
public:
	class FString                                 NodeTypeName;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Label;                                             // 0x0038(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  NodeGuid;                                          // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ExecutionIndex;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGuid>                            Children;                                          // 0x0060(0x0050)(Edit, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventNode">();
	}
	static class UEventNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventNode>();
	}
};
static_assert(alignof(UEventNode) == 0x000008, "Wrong alignment on UEventNode");
static_assert(sizeof(UEventNode) == 0x0000B8, "Wrong size on UEventNode");
static_assert(offsetof(UEventNode, NodeTypeName) == 0x000028, "Member 'UEventNode::NodeTypeName' has a wrong offset!");
static_assert(offsetof(UEventNode, Label) == 0x000038, "Member 'UEventNode::Label' has a wrong offset!");
static_assert(offsetof(UEventNode, NodeGuid) == 0x000048, "Member 'UEventNode::NodeGuid' has a wrong offset!");
static_assert(offsetof(UEventNode, ExecutionIndex) == 0x000058, "Member 'UEventNode::ExecutionIndex' has a wrong offset!");
static_assert(offsetof(UEventNode, Children) == 0x000060, "Member 'UEventNode::Children' has a wrong offset!");

// Class EventSystem.EventNodeAction
// 0x0020 (0x00D8 - 0x00B8)
class UEventNodeAction : public UEventNode
{
public:
	TArray<class UEventCondition*>                EnterConditions;                                   // 0x00B8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UEventAction*>                   Actions;                                           // 0x00C8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventNodeAction">();
	}
	static class UEventNodeAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventNodeAction>();
	}
};
static_assert(alignof(UEventNodeAction) == 0x000008, "Wrong alignment on UEventNodeAction");
static_assert(sizeof(UEventNodeAction) == 0x0000D8, "Wrong size on UEventNodeAction");
static_assert(offsetof(UEventNodeAction, EnterConditions) == 0x0000B8, "Member 'UEventNodeAction::EnterConditions' has a wrong offset!");
static_assert(offsetof(UEventNodeAction, Actions) == 0x0000C8, "Member 'UEventNodeAction::Actions' has a wrong offset!");

// Class EventSystem.EventNodeAction_Parallel
// 0x0028 (0x0100 - 0x00D8)
class UEventNodeAction_Parallel final : public UEventNodeAction
{
public:
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UEventAction*>                   RunningActions;                                    // 0x00E8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventNodeAction_Parallel">();
	}
	static class UEventNodeAction_Parallel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventNodeAction_Parallel>();
	}
};
static_assert(alignof(UEventNodeAction_Parallel) == 0x000008, "Wrong alignment on UEventNodeAction_Parallel");
static_assert(sizeof(UEventNodeAction_Parallel) == 0x000100, "Wrong size on UEventNodeAction_Parallel");
static_assert(offsetof(UEventNodeAction_Parallel, RunningActions) == 0x0000E8, "Member 'UEventNodeAction_Parallel::RunningActions' has a wrong offset!");

// Class EventSystem.EventNodeAction_Sequence
// 0x0030 (0x0108 - 0x00D8)
class UEventNodeAction_Sequence final : public UEventNodeAction
{
public:
	uint8                                         Pad_D8[0x20];                                      // 0x00D8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UEventAction*>                   RunningActions;                                    // 0x00F8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventNodeAction_Sequence">();
	}
	static class UEventNodeAction_Sequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventNodeAction_Sequence>();
	}
};
static_assert(alignof(UEventNodeAction_Sequence) == 0x000008, "Wrong alignment on UEventNodeAction_Sequence");
static_assert(sizeof(UEventNodeAction_Sequence) == 0x000108, "Wrong size on UEventNodeAction_Sequence");
static_assert(offsetof(UEventNodeAction_Sequence, RunningActions) == 0x0000F8, "Member 'UEventNodeAction_Sequence::RunningActions' has a wrong offset!");

// Class EventSystem.EventNode_Proxy
// 0x0060 (0x0118 - 0x00B8)
class UEventNode_Proxy final : public UEventNode
{
public:
	struct FGuid                                  TargetNodeGuid;                                    // 0x00B8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x50];                                      // 0x00C8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventNode_Proxy">();
	}
	static class UEventNode_Proxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventNode_Proxy>();
	}
};
static_assert(alignof(UEventNode_Proxy) == 0x000008, "Wrong alignment on UEventNode_Proxy");
static_assert(sizeof(UEventNode_Proxy) == 0x000118, "Wrong size on UEventNode_Proxy");
static_assert(offsetof(UEventNode_Proxy, TargetNodeGuid) == 0x0000B8, "Member 'UEventNode_Proxy::TargetNodeGuid' has a wrong offset!");

// Class EventSystem.EventNode_Start
// 0x0000 (0x00B8 - 0x00B8)
class UEventNode_Start final : public UEventNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventNode_Start">();
	}
	static class UEventNode_Start* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventNode_Start>();
	}
};
static_assert(alignof(UEventNode_Start) == 0x000008, "Wrong alignment on UEventNode_Start");
static_assert(sizeof(UEventNode_Start) == 0x0000B8, "Wrong size on UEventNode_Start");

// Class EventSystem.EventPlayer
// 0x00D0 (0x00F8 - 0x0028)
class UEventPlayer final : public UObject
{
public:
	TMulticastInlineDelegate<void(class UEventPlayer* EventPlayer)> OnEventStart;                    // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UEventPlayer* EventPlayer, bool bCompletedEvent, EEventPlayerResult EventResult)> OnEventFinish; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventAsset*                            EventAsset;                                        // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEventContext*                          EventContext;                                      // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            EventUI;                                           // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AEventCamera*                           EventCamera;                                       // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class UEventNode*>                       VisitedNodes;                                      // 0x0070(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         ActorsToDestroyOnFinish;                           // 0x00C0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x28];                                      // 0x00D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEventPlayer* CreateEventPlayer(class AActor* Owner);

	void OnOwnerEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void PlayEvent(class APlayerController* PlayerController, class UEventAsset* InEventAsset, const TMap<class FName, class AActor*>& InActorBindings, const struct FEventBlackboardInit& InDefaultValues);
	void SkipEvent();

	class UEventContext* GetEventContext() const;
	EEventPlayerState GetState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventPlayer">();
	}
	static class UEventPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventPlayer>();
	}
};
static_assert(alignof(UEventPlayer) == 0x000008, "Wrong alignment on UEventPlayer");
static_assert(sizeof(UEventPlayer) == 0x0000F8, "Wrong size on UEventPlayer");
static_assert(offsetof(UEventPlayer, OnEventStart) == 0x000028, "Member 'UEventPlayer::OnEventStart' has a wrong offset!");
static_assert(offsetof(UEventPlayer, OnEventFinish) == 0x000038, "Member 'UEventPlayer::OnEventFinish' has a wrong offset!");
static_assert(offsetof(UEventPlayer, EventAsset) == 0x000050, "Member 'UEventPlayer::EventAsset' has a wrong offset!");
static_assert(offsetof(UEventPlayer, EventContext) == 0x000058, "Member 'UEventPlayer::EventContext' has a wrong offset!");
static_assert(offsetof(UEventPlayer, EventUI) == 0x000060, "Member 'UEventPlayer::EventUI' has a wrong offset!");
static_assert(offsetof(UEventPlayer, EventCamera) == 0x000068, "Member 'UEventPlayer::EventCamera' has a wrong offset!");
static_assert(offsetof(UEventPlayer, VisitedNodes) == 0x000070, "Member 'UEventPlayer::VisitedNodes' has a wrong offset!");
static_assert(offsetof(UEventPlayer, ActorsToDestroyOnFinish) == 0x0000C0, "Member 'UEventPlayer::ActorsToDestroyOnFinish' has a wrong offset!");

// Class EventSystem.EventSkipAction
// 0x0008 (0x0030 - 0x0028)
class UEventSkipAction : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExecute();
	void TeleportActorBindingToBinding(class FName Binding, class FName TargetBinding, bool bOffsetByHalfHeight);
	void TeleportActorBindingToTransform(class FName Binding, const struct FTransform& Transform, bool bOffsetByHalfHeight);
	void TeleportActorToTransform(class AActor* Actor, const struct FTransform& Transform, bool bOffsetByHalfHeight);
	void TeleportPlayerPawnToBinding(class FName TargetBinding, bool bOffsetByHalfHeight);

	class UEventContext* GetContext() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventSkipAction">();
	}
	static class UEventSkipAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventSkipAction>();
	}
};
static_assert(alignof(UEventSkipAction) == 0x000008, "Wrong alignment on UEventSkipAction");
static_assert(sizeof(UEventSkipAction) == 0x000030, "Wrong size on UEventSkipAction");

// Class EventSystem.EventUserWidgetInterface
// 0x0000 (0x0000 - 0x0000)
class IEventUserWidgetInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventUserWidgetInterface">();
	}
	static class IEventUserWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEventUserWidgetInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IEventUserWidgetInterface) == 0x000001, "Wrong alignment on IEventUserWidgetInterface");
static_assert(sizeof(IEventUserWidgetInterface) == 0x000001, "Wrong size on IEventUserWidgetInterface");

}

