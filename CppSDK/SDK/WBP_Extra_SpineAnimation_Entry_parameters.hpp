#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Extra_SpineAnimation_Entry

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Extra_SpineAnimation_Entry.WBP_Extra_SpineAnimation_Entry_C.ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry
// 0x0014 (0x0014 - 0x0000)
struct WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x0004(0x0008)(NoDestructor)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x000C(0x0008)(NoDestructor)
};
static_assert(alignof(WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry) == 0x000004, "Wrong alignment on WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry");
static_assert(sizeof(WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry) == 0x000014, "Wrong size on WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry, EntryPoint) == 0x000000, "Member 'WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry, K2Node_Event_InFocusEvent_1) == 0x000004, "Member 'WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry, K2Node_Event_InFocusEvent) == 0x00000C, "Member 'WBP_Extra_SpineAnimation_Entry_C_ExecuteUbergraph_WBP_Extra_SpineAnimation_Entry::K2Node_Event_InFocusEvent' has a wrong offset!");

// Function WBP_Extra_SpineAnimation_Entry.WBP_Extra_SpineAnimation_Entry_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_Extra_SpineAnimation_Entry_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_Extra_SpineAnimation_Entry_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on WBP_Extra_SpineAnimation_Entry_C_OnAddedToFocusPath");
static_assert(sizeof(WBP_Extra_SpineAnimation_Entry_C_OnAddedToFocusPath) == 0x000008, "Wrong size on WBP_Extra_SpineAnimation_Entry_C_OnAddedToFocusPath");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_Extra_SpineAnimation_Entry_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_Extra_SpineAnimation_Entry.WBP_Extra_SpineAnimation_Entry_C.OnPressConfirm
// 0x01B0 (0x01B0 - 0x0000)
struct WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm) == 0x000008, "Wrong alignment on WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm");
static_assert(sizeof(WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm) == 0x0001B0, "Wrong size on WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm, KeyEvent) == 0x000000, "Member 'WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm::KeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm, ReturnValue) == 0x000040, "Member 'WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'WBP_Extra_SpineAnimation_Entry_C_OnPressConfirm::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_Extra_SpineAnimation_Entry.WBP_Extra_SpineAnimation_Entry_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_Extra_SpineAnimation_Entry_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_Extra_SpineAnimation_Entry_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on WBP_Extra_SpineAnimation_Entry_C_OnRemovedFromFocusPath");
static_assert(sizeof(WBP_Extra_SpineAnimation_Entry_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on WBP_Extra_SpineAnimation_Entry_C_OnRemovedFromFocusPath");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_Extra_SpineAnimation_Entry_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_Extra_SpineAnimation_Entry.WBP_Extra_SpineAnimation_Entry_C.Set Is Active
// 0x0005 (0x0005 - 0x0000)
struct WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active) == 0x000001, "Wrong alignment on WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active");
static_assert(sizeof(WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active) == 0x000005, "Wrong size on WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active, Active) == 0x000000, "Member 'WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active::Active' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active, Temp_bool_Variable) == 0x000001, "Member 'WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active, Temp_byte_Variable) == 0x000002, "Member 'WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active, K2Node_Select_Default) == 0x000004, "Member 'WBP_Extra_SpineAnimation_Entry_C_Set_Is_Active::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Extra_SpineAnimation_Entry.WBP_Extra_SpineAnimation_Entry_C.SetAnimationName
// 0x0010 (0x0010 - 0x0000)
struct WBP_Extra_SpineAnimation_Entry_C_SetAnimationName final
{
public:
	class FText                                   AnimationName_0;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Extra_SpineAnimation_Entry_C_SetAnimationName) == 0x000008, "Wrong alignment on WBP_Extra_SpineAnimation_Entry_C_SetAnimationName");
static_assert(sizeof(WBP_Extra_SpineAnimation_Entry_C_SetAnimationName) == 0x000010, "Wrong size on WBP_Extra_SpineAnimation_Entry_C_SetAnimationName");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_SetAnimationName, AnimationName_0) == 0x000000, "Member 'WBP_Extra_SpineAnimation_Entry_C_SetAnimationName::AnimationName_0' has a wrong offset!");

// Function WBP_Extra_SpineAnimation_Entry.WBP_Extra_SpineAnimation_Entry_C.SetFocusedState
// 0x0010 (0x0010 - 0x0000)
struct WBP_Extra_SpineAnimation_Entry_C_SetFocusedState final
{
public:
	bool                                          Focused_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState) == 0x000008, "Wrong alignment on WBP_Extra_SpineAnimation_Entry_C_SetFocusedState");
static_assert(sizeof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState) == 0x000010, "Wrong size on WBP_Extra_SpineAnimation_Entry_C_SetFocusedState");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState, Focused_0) == 0x000000, "Member 'WBP_Extra_SpineAnimation_Entry_C_SetFocusedState::Focused_0' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState, Temp_byte_Variable) == 0x000001, "Member 'WBP_Extra_SpineAnimation_Entry_C_SetFocusedState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Extra_SpineAnimation_Entry_C_SetFocusedState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState, Temp_bool_Variable) == 0x000003, "Member 'WBP_Extra_SpineAnimation_Entry_C_SetFocusedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState, K2Node_Select_Default) == 0x000004, "Member 'WBP_Extra_SpineAnimation_Entry_C_SetFocusedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Extra_SpineAnimation_Entry_C_SetFocusedState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_Extra_SpineAnimation_Entry_C_SetFocusedState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

