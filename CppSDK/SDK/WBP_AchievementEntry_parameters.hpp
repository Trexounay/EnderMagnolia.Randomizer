#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AchievementEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_AchievementEntry.WBP_AchievementEntry_C.ExecuteUbergraph_WBP_AchievementEntry
// 0x0014 (0x0014 - 0x0000)
struct WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x0004(0x0008)(NoDestructor)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x000C(0x0008)(NoDestructor)
};
static_assert(alignof(WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry) == 0x000004, "Wrong alignment on WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry");
static_assert(sizeof(WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry) == 0x000014, "Wrong size on WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry");
static_assert(offsetof(WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry, EntryPoint) == 0x000000, "Member 'WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry, K2Node_Event_InFocusEvent_1) == 0x000004, "Member 'WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry, K2Node_Event_InFocusEvent) == 0x00000C, "Member 'WBP_AchievementEntry_C_ExecuteUbergraph_WBP_AchievementEntry::K2Node_Event_InFocusEvent' has a wrong offset!");

// Function WBP_AchievementEntry.WBP_AchievementEntry_C.Initialize
// 0x0010 (0x0010 - 0x0000)
struct WBP_AchievementEntry_C_Initialize final
{
public:
	class UAchievementsSubsystem*                 CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAchievementUnlocked_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AchievementEntry_C_Initialize) == 0x000008, "Wrong alignment on WBP_AchievementEntry_C_Initialize");
static_assert(sizeof(WBP_AchievementEntry_C_Initialize) == 0x000010, "Wrong size on WBP_AchievementEntry_C_Initialize");
static_assert(offsetof(WBP_AchievementEntry_C_Initialize, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000000, "Member 'WBP_AchievementEntry_C_Initialize::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_Initialize, CallFunc_IsAchievementUnlocked_ReturnValue) == 0x000008, "Member 'WBP_AchievementEntry_C_Initialize::CallFunc_IsAchievementUnlocked_ReturnValue' has a wrong offset!");

// Function WBP_AchievementEntry.WBP_AchievementEntry_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_AchievementEntry_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_AchievementEntry_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on WBP_AchievementEntry_C_OnAddedToFocusPath");
static_assert(sizeof(WBP_AchievementEntry_C_OnAddedToFocusPath) == 0x000008, "Wrong size on WBP_AchievementEntry_C_OnAddedToFocusPath");
static_assert(offsetof(WBP_AchievementEntry_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_AchievementEntry_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_AchievementEntry.WBP_AchievementEntry_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_AchievementEntry_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_AchievementEntry_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on WBP_AchievementEntry_C_OnRemovedFromFocusPath");
static_assert(sizeof(WBP_AchievementEntry_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on WBP_AchievementEntry_C_OnRemovedFromFocusPath");
static_assert(offsetof(WBP_AchievementEntry_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_AchievementEntry_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_AchievementEntry.WBP_AchievementEntry_C.SetFocusedState
// 0x0010 (0x0010 - 0x0000)
struct WBP_AchievementEntry_C_SetFocusedState final
{
public:
	bool                                          Focus;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AchievementEntry_C_SetFocusedState) == 0x000008, "Wrong alignment on WBP_AchievementEntry_C_SetFocusedState");
static_assert(sizeof(WBP_AchievementEntry_C_SetFocusedState) == 0x000010, "Wrong size on WBP_AchievementEntry_C_SetFocusedState");
static_assert(offsetof(WBP_AchievementEntry_C_SetFocusedState, Focus) == 0x000000, "Member 'WBP_AchievementEntry_C_SetFocusedState::Focus' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_SetFocusedState, Temp_byte_Variable) == 0x000001, "Member 'WBP_AchievementEntry_C_SetFocusedState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_SetFocusedState, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_AchievementEntry_C_SetFocusedState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_SetFocusedState, Temp_bool_Variable) == 0x000003, "Member 'WBP_AchievementEntry_C_SetFocusedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_SetFocusedState, K2Node_Select_Default) == 0x000004, "Member 'WBP_AchievementEntry_C_SetFocusedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_SetFocusedState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_AchievementEntry_C_SetFocusedState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_AchievementEntry.WBP_AchievementEntry_C.SetupLockedAchievement
// 0x0020 (0x0020 - 0x0000)
struct WBP_AchievementEntry_C_SetupLockedAchievement final
{
public:
	class FText                                   CallFunc_SelectText_ReturnValue;                   // 0x0000(0x0010)()
	class FText                                   CallFunc_SelectText_ReturnValue_1;                 // 0x0010(0x0010)()
};
static_assert(alignof(WBP_AchievementEntry_C_SetupLockedAchievement) == 0x000008, "Wrong alignment on WBP_AchievementEntry_C_SetupLockedAchievement");
static_assert(sizeof(WBP_AchievementEntry_C_SetupLockedAchievement) == 0x000020, "Wrong size on WBP_AchievementEntry_C_SetupLockedAchievement");
static_assert(offsetof(WBP_AchievementEntry_C_SetupLockedAchievement, CallFunc_SelectText_ReturnValue) == 0x000000, "Member 'WBP_AchievementEntry_C_SetupLockedAchievement::CallFunc_SelectText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AchievementEntry_C_SetupLockedAchievement, CallFunc_SelectText_ReturnValue_1) == 0x000010, "Member 'WBP_AchievementEntry_C_SetupLockedAchievement::CallFunc_SelectText_ReturnValue_1' has a wrong offset!");

}

