#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BloomBox

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum BloomBox.EBloomBoxGenerationTiming
// NumValues: 0x0005
enum class EBloomBoxGenerationTiming : uint8
{
	None                                     = 0,
	OnConstruct                              = 1,
	OnAnyChildPaintInvalidation              = 2,
	OnPaint                                  = 3,
	EBloomBoxGenerationTiming_MAX            = 4,
};

// ScriptStruct BloomBox.BloomBoxRuntimeSettings
// 0x0018 (0x0018 - 0x0000)
struct FBloomBoxRuntimeSettings final
{
public:
	struct FLinearColor                           BloomColor;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValue;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteBloomTexture;                                // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteWidgetTexture;                               // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBloomBoxRuntimeSettings) == 0x000004, "Wrong alignment on FBloomBoxRuntimeSettings");
static_assert(sizeof(FBloomBoxRuntimeSettings) == 0x000018, "Wrong size on FBloomBoxRuntimeSettings");
static_assert(offsetof(FBloomBoxRuntimeSettings, BloomColor) == 0x000000, "Member 'FBloomBoxRuntimeSettings::BloomColor' has a wrong offset!");
static_assert(offsetof(FBloomBoxRuntimeSettings, EffectValue) == 0x000010, "Member 'FBloomBoxRuntimeSettings::EffectValue' has a wrong offset!");
static_assert(offsetof(FBloomBoxRuntimeSettings, bWriteBloomTexture) == 0x000014, "Member 'FBloomBoxRuntimeSettings::bWriteBloomTexture' has a wrong offset!");
static_assert(offsetof(FBloomBoxRuntimeSettings, bWriteWidgetTexture) == 0x000015, "Member 'FBloomBoxRuntimeSettings::bWriteWidgetTexture' has a wrong offset!");

// ScriptStruct BloomBox.BloomBoxGenerationSettings
// 0x0150 (0x0150 - 0x0000)
struct FBloomBoxGenerationSettings final
{
public:
	float                                         Spread;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SizeOffset;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMipLevel;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MipLevelOffset;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpSampleTargetMipLevel;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderScale;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeshSubDivision;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EffectMaterial;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      EffectScalarParameters;                            // 0x0038(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             EffectVectorParameters;                            // 0x0088(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture*>            EffectTextureParameters;                           // 0x00D8(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DownSampleMaterial;                                // 0x0128(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RenderMaterial;                                    // 0x0130(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     UpSampleMaterial;                                  // 0x0138(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePremultipliedAlpha;                            // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoGamma;                                          // 0x0141(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GammaOverride;                                     // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinearSpace;                                      // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrepassNeeded;                                  // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBloomBoxGenerationSettings) == 0x000008, "Wrong alignment on FBloomBoxGenerationSettings");
static_assert(sizeof(FBloomBoxGenerationSettings) == 0x000150, "Wrong size on FBloomBoxGenerationSettings");
static_assert(offsetof(FBloomBoxGenerationSettings, Spread) == 0x000000, "Member 'FBloomBoxGenerationSettings::Spread' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, Strength) == 0x000004, "Member 'FBloomBoxGenerationSettings::Strength' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, SizeOffset) == 0x000008, "Member 'FBloomBoxGenerationSettings::SizeOffset' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, MaxMipLevel) == 0x000018, "Member 'FBloomBoxGenerationSettings::MaxMipLevel' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, MipLevelOffset) == 0x00001C, "Member 'FBloomBoxGenerationSettings::MipLevelOffset' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, UpSampleTargetMipLevel) == 0x000020, "Member 'FBloomBoxGenerationSettings::UpSampleTargetMipLevel' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, RenderScale) == 0x000024, "Member 'FBloomBoxGenerationSettings::RenderScale' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, MeshSubDivision) == 0x000028, "Member 'FBloomBoxGenerationSettings::MeshSubDivision' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, EffectMaterial) == 0x000030, "Member 'FBloomBoxGenerationSettings::EffectMaterial' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, EffectScalarParameters) == 0x000038, "Member 'FBloomBoxGenerationSettings::EffectScalarParameters' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, EffectVectorParameters) == 0x000088, "Member 'FBloomBoxGenerationSettings::EffectVectorParameters' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, EffectTextureParameters) == 0x0000D8, "Member 'FBloomBoxGenerationSettings::EffectTextureParameters' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, DownSampleMaterial) == 0x000128, "Member 'FBloomBoxGenerationSettings::DownSampleMaterial' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, RenderMaterial) == 0x000130, "Member 'FBloomBoxGenerationSettings::RenderMaterial' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, UpSampleMaterial) == 0x000138, "Member 'FBloomBoxGenerationSettings::UpSampleMaterial' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, bUsePremultipliedAlpha) == 0x000140, "Member 'FBloomBoxGenerationSettings::bUsePremultipliedAlpha' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, bNoGamma) == 0x000141, "Member 'FBloomBoxGenerationSettings::bNoGamma' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, GammaOverride) == 0x000144, "Member 'FBloomBoxGenerationSettings::GammaOverride' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, bLinearSpace) == 0x000148, "Member 'FBloomBoxGenerationSettings::bLinearSpace' has a wrong offset!");
static_assert(offsetof(FBloomBoxGenerationSettings, bIsPrepassNeeded) == 0x000149, "Member 'FBloomBoxGenerationSettings::bIsPrepassNeeded' has a wrong offset!");

// ScriptStruct BloomBox.BloomBoxResources
// 0x0050 (0x0050 - 0x0000)
struct FBloomBoxResources final
{
public:
	class UTextureRenderTarget2D*                 WidgetRender;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 DownSampleChain;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTextureRenderTarget2D*>         UpSamples;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 BloomTexture;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DownSampleMID;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               RenderMipMID;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               UpSampleMID;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               EffectBloomMID;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               EffectWidgetMID;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBloomBoxResources) == 0x000008, "Wrong alignment on FBloomBoxResources");
static_assert(sizeof(FBloomBoxResources) == 0x000050, "Wrong size on FBloomBoxResources");
static_assert(offsetof(FBloomBoxResources, WidgetRender) == 0x000000, "Member 'FBloomBoxResources::WidgetRender' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, DownSampleChain) == 0x000008, "Member 'FBloomBoxResources::DownSampleChain' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, UpSamples) == 0x000010, "Member 'FBloomBoxResources::UpSamples' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, BloomTexture) == 0x000020, "Member 'FBloomBoxResources::BloomTexture' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, DownSampleMID) == 0x000028, "Member 'FBloomBoxResources::DownSampleMID' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, RenderMipMID) == 0x000030, "Member 'FBloomBoxResources::RenderMipMID' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, UpSampleMID) == 0x000038, "Member 'FBloomBoxResources::UpSampleMID' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, EffectBloomMID) == 0x000040, "Member 'FBloomBoxResources::EffectBloomMID' has a wrong offset!");
static_assert(offsetof(FBloomBoxResources, EffectWidgetMID) == 0x000048, "Member 'FBloomBoxResources::EffectWidgetMID' has a wrong offset!");

}

