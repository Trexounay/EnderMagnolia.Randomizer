#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpineMeshPlugin

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SpineMeshPlugin_structs.hpp"


namespace SDK
{

// Class SpineMeshPlugin.SpineMeshComponent
// 0x00B0 (0x0600 - 0x0550)
class USpineMeshComponent : public UMeshComponent
{
public:
	uint8                                         Pad_550[0x64];                                     // 0x0550(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeshUVDensity;                                     // 0x05B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B8[0x48];                                     // 0x05B8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAllMeshSections();
	void ClearMeshSection(int32 SectionIndex, bool bUpdateBounds);
	void SetMeshSectionVisible(int32 SectionIndex, bool bNewVisibility);

	int32 GetNumSections() const;
	bool IsMeshSectionVisible(int32 SectionIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineMeshComponent">();
	}
	static class USpineMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineMeshComponent>();
	}
};
static_assert(alignof(USpineMeshComponent) == 0x000010, "Wrong alignment on USpineMeshComponent");
static_assert(sizeof(USpineMeshComponent) == 0x000600, "Wrong size on USpineMeshComponent");
static_assert(offsetof(USpineMeshComponent, MeshUVDensity) == 0x0005B4, "Member 'USpineMeshComponent::MeshUVDensity' has a wrong offset!");

// Class SpineMeshPlugin.SpineMeshCopyComponent
// 0x0070 (0x05C0 - 0x0550)
#pragma pack(push, 0x1)
class alignas(0x10) USpineMeshCopyComponent : public UMeshComponent
{
public:
	uint8                                         Pad_550[0x18];                                     // 0x0550(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialOverride;                                  // 0x0568(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TextureParameterName;                              // 0x0570(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSpineMeshUpdateSettings               SectionUpdateSettings;                             // 0x0578(0x0003)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bAutoCopy;                                         // 0x057B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpineMeshComponent*                    CachedMaster;                                      // 0x0580(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x30];                                     // 0x0588(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Copy();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineMeshCopyComponent">();
	}
	static class USpineMeshCopyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineMeshCopyComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(USpineMeshCopyComponent) == 0x000010, "Wrong alignment on USpineMeshCopyComponent");
static_assert(sizeof(USpineMeshCopyComponent) == 0x0005C0, "Wrong size on USpineMeshCopyComponent");
static_assert(offsetof(USpineMeshCopyComponent, MaterialOverride) == 0x000568, "Member 'USpineMeshCopyComponent::MaterialOverride' has a wrong offset!");
static_assert(offsetof(USpineMeshCopyComponent, TextureParameterName) == 0x000570, "Member 'USpineMeshCopyComponent::TextureParameterName' has a wrong offset!");
static_assert(offsetof(USpineMeshCopyComponent, SectionUpdateSettings) == 0x000578, "Member 'USpineMeshCopyComponent::SectionUpdateSettings' has a wrong offset!");
static_assert(offsetof(USpineMeshCopyComponent, bAutoCopy) == 0x00057B, "Member 'USpineMeshCopyComponent::bAutoCopy' has a wrong offset!");
static_assert(offsetof(USpineMeshCopyComponent, CachedMaster) == 0x000580, "Member 'USpineMeshCopyComponent::CachedMaster' has a wrong offset!");

// Class SpineMeshPlugin.SpineMeshMaskComponent
// 0x0010 (0x05D0 - 0x05C0)
class USpineMeshMaskComponent final : public USpineMeshCopyComponent
{
public:
	class FName                                   ScaleOffsetParameterName;                          // 0x05B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScaleOffset;                                       // 0x05C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UseAlternatePivotComputationParameterName;         // 0x05C4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseAlternatePivotComputation;                     // 0x05CC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5CD[0x3];                                      // 0x05CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetScaleOffset(float InScaleOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineMeshMaskComponent">();
	}
	static class USpineMeshMaskComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineMeshMaskComponent>();
	}
};
static_assert(alignof(USpineMeshMaskComponent) == 0x000010, "Wrong alignment on USpineMeshMaskComponent");
static_assert(sizeof(USpineMeshMaskComponent) == 0x0005D0, "Wrong size on USpineMeshMaskComponent");
static_assert(offsetof(USpineMeshMaskComponent, ScaleOffsetParameterName) == 0x0005B8, "Member 'USpineMeshMaskComponent::ScaleOffsetParameterName' has a wrong offset!");
static_assert(offsetof(USpineMeshMaskComponent, ScaleOffset) == 0x0005C0, "Member 'USpineMeshMaskComponent::ScaleOffset' has a wrong offset!");
static_assert(offsetof(USpineMeshMaskComponent, UseAlternatePivotComputationParameterName) == 0x0005C4, "Member 'USpineMeshMaskComponent::UseAlternatePivotComputationParameterName' has a wrong offset!");
static_assert(offsetof(USpineMeshMaskComponent, bUseAlternatePivotComputation) == 0x0005CC, "Member 'USpineMeshMaskComponent::bUseAlternatePivotComputation' has a wrong offset!");

}

