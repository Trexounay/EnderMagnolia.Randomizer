#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Difficulty

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Zion_structs.hpp"
#include "Zion_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Difficulty.WBP_Difficulty_C
// 0x0120 (0x0580 - 0x0460)
class UWBP_Difficulty_C final : public UUserWidgetZion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hide;                                              // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BG_Base;                                           // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_Effect;                                         // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_LeftGradation;                                  // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_RightGradation;                                 // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         BossRush_Title;                                    // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Game_Title;                                        // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Line;                                              // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Line_1;                                            // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNiagaraSystemWidget*                   NiagaraSystemWidget_272;                           // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Difficulty_CurrencyBonus_C*        WBP_Difficulty_CurrencyBonus;                      // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Explanation_C*                     WBP_Explanation;                                   // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Footer_C*                          WBP_Footer;                                        // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Scrollbox_C*                       WBP_Scrollbox;                                     // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_SeparateLine2_C*                   WBP_SeparateLine2;                                 // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Choice_Text_C*      WBP_Settings_Entry_Choice_Text_Preset;             // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Choice_Toggle_C*    WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX;    // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Choice_Toggle_C*    WBP_Settings_Entry_Choice_Toggle_PlayerNoHeal;     // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Choice_Toggle_C*    WBP_Settings_Entry_Choice_Toggle_PlayerOneShot;    // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Slider_C*           WBP_Settings_Entry_Slider_EnemyAttackFactor;       // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Slider_C*           WBP_Settings_Entry_Slider_EnemyAttackFrequency;    // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Slider_C*           WBP_Settings_Entry_Slider_EnemyMaxHP;              // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Slider_C*           WBP_Settings_Entry_Slider_EnemyStaminaFactor;      // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Slider_C*           WBP_Settings_Entry_Slider_EnemyStaminaRecoverySpeedFactor; // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_Title;                              // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EDifficultyPreset                             DifficultyPreset;                                  // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultySettings                    DifficultySettings;                                // 0x0534(0x0018)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EDifficultyPreset SelectedPreset, const struct FDifficultySettings& SelectedSettings)> OnClosed; // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IgnoreValueChanges;                                // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x3];                                      // 0x0561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDifficultySettings                    LastCustomDifficultySettings;                      // 0x0564(0x0018)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay)

public:
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Text_Preset_K2Node_ComponentBoundEvent_0_OnRight__DelegateSignature();
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Text_Preset_K2Node_ComponentBoundEvent_1_OnLeft__DelegateSignature();
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_DeathPenalty_K2Node_ComponentBoundEvent_5_OnToggle__DelegateSignature(bool ToggleValue);
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX_K2Node_ComponentBoundEvent_8_OnToggle__DelegateSignature(bool ToggleValue);
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Choice_Toggle_PlayerOneShot_K2Node_ComponentBoundEvent_9_OnToggle__DelegateSignature(bool ToggleValue);
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFactor_K2Node_ComponentBoundEvent_4_OnSliderValueChanged__DelegateSignature(double Value);
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyAttackFrequency_K2Node_ComponentBoundEvent_2_OnSliderValueChanged__DelegateSignature(double Value);
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_EnemyMaxHP_K2Node_ComponentBoundEvent_3_OnSliderValueChanged__DelegateSignature(double Value);
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectDurationFactor_K2Node_ComponentBoundEvent_6_OnSliderValueChanged__DelegateSignature(double Value);
	void BndEvt__WBP_Difficulty_WBP_Settings_Entry_Slider_SatusEffectValueFactor_K2Node_ComponentBoundEvent_7_OnSliderValueChanged__DelegateSignature(double Value);
	void Close();
	void Construct();
	void ExecuteUbergraph_WBP_Difficulty(int32 EntryPoint);
	void GenerateDifficultySettings(struct FDifficultySettings* DifficultySettings_0);
	void OnFinish_936D21CE4F7BA729B034449DB9B0B3FD();
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnPressCancel(const struct FKeyEvent& KeyEvent);
	void PreConstruct(bool IsDesignTime);
	void RefreshPreset(const struct FDifficultySettings& DifficultySettings_0);
	void RefreshPresetDisplay();
	void RefreshSettingsDisplay();
	void UpdateDifficultySettings(bool RefreshPreset_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Difficulty_C">();
	}
	static class UWBP_Difficulty_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Difficulty_C>();
	}
};
static_assert(alignof(UWBP_Difficulty_C) == 0x000008, "Wrong alignment on UWBP_Difficulty_C");
static_assert(sizeof(UWBP_Difficulty_C) == 0x000580, "Wrong size on UWBP_Difficulty_C");
static_assert(offsetof(UWBP_Difficulty_C, UberGraphFrame) == 0x000460, "Member 'UWBP_Difficulty_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, Hide) == 0x000468, "Member 'UWBP_Difficulty_C::Hide' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, BG_Base) == 0x000470, "Member 'UWBP_Difficulty_C::BG_Base' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, BG_Effect) == 0x000478, "Member 'UWBP_Difficulty_C::BG_Effect' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, BG_LeftGradation) == 0x000480, "Member 'UWBP_Difficulty_C::BG_LeftGradation' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, BG_RightGradation) == 0x000488, "Member 'UWBP_Difficulty_C::BG_RightGradation' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, BossRush_Title) == 0x000490, "Member 'UWBP_Difficulty_C::BossRush_Title' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, Game_Title) == 0x000498, "Member 'UWBP_Difficulty_C::Game_Title' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, Line) == 0x0004A0, "Member 'UWBP_Difficulty_C::Line' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, Line_1) == 0x0004A8, "Member 'UWBP_Difficulty_C::Line_1' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, NiagaraSystemWidget_272) == 0x0004B0, "Member 'UWBP_Difficulty_C::NiagaraSystemWidget_272' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Difficulty_CurrencyBonus) == 0x0004B8, "Member 'UWBP_Difficulty_C::WBP_Difficulty_CurrencyBonus' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Explanation) == 0x0004C0, "Member 'UWBP_Difficulty_C::WBP_Explanation' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Footer) == 0x0004C8, "Member 'UWBP_Difficulty_C::WBP_Footer' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Scrollbox) == 0x0004D0, "Member 'UWBP_Difficulty_C::WBP_Scrollbox' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_SeparateLine2) == 0x0004D8, "Member 'UWBP_Difficulty_C::WBP_SeparateLine2' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Choice_Text_Preset) == 0x0004E0, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Choice_Text_Preset' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX) == 0x0004E8, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Choice_Toggle_EnemyNoLeadFX' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Choice_Toggle_PlayerNoHeal) == 0x0004F0, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Choice_Toggle_PlayerNoHeal' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Choice_Toggle_PlayerOneShot) == 0x0004F8, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Choice_Toggle_PlayerOneShot' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Slider_EnemyAttackFactor) == 0x000500, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Slider_EnemyAttackFactor' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Slider_EnemyAttackFrequency) == 0x000508, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Slider_EnemyAttackFrequency' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Slider_EnemyMaxHP) == 0x000510, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Slider_EnemyMaxHP' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Slider_EnemyStaminaFactor) == 0x000518, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Slider_EnemyStaminaFactor' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WBP_Settings_Entry_Slider_EnemyStaminaRecoverySpeedFactor) == 0x000520, "Member 'UWBP_Difficulty_C::WBP_Settings_Entry_Slider_EnemyStaminaRecoverySpeedFactor' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, WidgetSwitcher_Title) == 0x000528, "Member 'UWBP_Difficulty_C::WidgetSwitcher_Title' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, DifficultyPreset) == 0x000530, "Member 'UWBP_Difficulty_C::DifficultyPreset' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, DifficultySettings) == 0x000534, "Member 'UWBP_Difficulty_C::DifficultySettings' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, OnClosed) == 0x000550, "Member 'UWBP_Difficulty_C::OnClosed' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, IgnoreValueChanges) == 0x000560, "Member 'UWBP_Difficulty_C::IgnoreValueChanges' has a wrong offset!");
static_assert(offsetof(UWBP_Difficulty_C, LastCustomDifficultySettings) == 0x000564, "Member 'UWBP_Difficulty_C::LastCustomDifficultySettings' has a wrong offset!");

}

