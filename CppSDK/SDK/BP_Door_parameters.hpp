#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Door

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Door.BP_Door_C.Close
// 0x0004 (0x0004 - 0x0000)
struct BP_Door_C_Close final
{
public:
	bool                                          RequestInstant;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsOpen_IsOpen;                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_Close) == 0x000001, "Wrong alignment on BP_Door_C_Close");
static_assert(sizeof(BP_Door_C_Close) == 0x000004, "Wrong size on BP_Door_C_Close");
static_assert(offsetof(BP_Door_C_Close, RequestInstant) == 0x000000, "Member 'BP_Door_C_Close::RequestInstant' has a wrong offset!");
static_assert(offsetof(BP_Door_C_Close, Force) == 0x000001, "Member 'BP_Door_C_Close::Force' has a wrong offset!");
static_assert(offsetof(BP_Door_C_Close, CallFunc_GetIsOpen_IsOpen) == 0x000002, "Member 'BP_Door_C_Close::CallFunc_GetIsOpen_IsOpen' has a wrong offset!");
static_assert(offsetof(BP_Door_C_Close, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'BP_Door_C_Close::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Door.BP_Door_C.ExecuteUbergraph_BP_Door
// 0x0010 (0x0010 - 0x0000)
struct BP_Door_C_ExecuteUbergraph_BP_Door final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_RequestInstant;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsOpen_IsOpen;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_RequestInstant_1;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RetriggerableDelay_Duration_ImplicitCast; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_ExecuteUbergraph_BP_Door) == 0x000004, "Wrong alignment on BP_Door_C_ExecuteUbergraph_BP_Door");
static_assert(sizeof(BP_Door_C_ExecuteUbergraph_BP_Door) == 0x000010, "Wrong size on BP_Door_C_ExecuteUbergraph_BP_Door");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, EntryPoint) == 0x000000, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000005, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, K2Node_CustomEvent_RequestInstant) == 0x000006, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::K2Node_CustomEvent_RequestInstant' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, CallFunc_GetIsOpen_IsOpen) == 0x000007, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::CallFunc_GetIsOpen_IsOpen' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, K2Node_CustomEvent_RequestInstant_1) == 0x000008, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::K2Node_CustomEvent_RequestInstant_1' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, CallFunc_Not_PreBool_ReturnValue_1) == 0x000009, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Door_C_ExecuteUbergraph_BP_Door, CallFunc_RetriggerableDelay_Duration_ImplicitCast) == 0x00000C, "Member 'BP_Door_C_ExecuteUbergraph_BP_Door::CallFunc_RetriggerableDelay_Duration_ImplicitCast' has a wrong offset!");

// Function BP_Door.BP_Door_C.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct BP_Door_C_IsMoving final
{
public:
	bool                                          bMoving;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_IsMoving) == 0x000001, "Wrong alignment on BP_Door_C_IsMoving");
static_assert(sizeof(BP_Door_C_IsMoving) == 0x000001, "Wrong size on BP_Door_C_IsMoving");
static_assert(offsetof(BP_Door_C_IsMoving, bMoving) == 0x000000, "Member 'BP_Door_C_IsMoving::bMoving' has a wrong offset!");

// Function BP_Door.BP_Door_C.OnClose
// 0x0001 (0x0001 - 0x0000)
struct BP_Door_C_OnClose final
{
public:
	bool                                          RequestInstant;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_OnClose) == 0x000001, "Wrong alignment on BP_Door_C_OnClose");
static_assert(sizeof(BP_Door_C_OnClose) == 0x000001, "Wrong size on BP_Door_C_OnClose");
static_assert(offsetof(BP_Door_C_OnClose, RequestInstant) == 0x000000, "Member 'BP_Door_C_OnClose::RequestInstant' has a wrong offset!");

// Function BP_Door.BP_Door_C.OnOpen
// 0x0001 (0x0001 - 0x0000)
struct BP_Door_C_OnOpen final
{
public:
	bool                                          RequestInstant;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_OnOpen) == 0x000001, "Wrong alignment on BP_Door_C_OnOpen");
static_assert(sizeof(BP_Door_C_OnOpen) == 0x000001, "Wrong size on BP_Door_C_OnOpen");
static_assert(offsetof(BP_Door_C_OnOpen, RequestInstant) == 0x000000, "Member 'BP_Door_C_OnOpen::RequestInstant' has a wrong offset!");

// Function BP_Door.BP_Door_C.Open
// 0x0005 (0x0005 - 0x0000)
struct BP_Door_C_Open final
{
public:
	bool                                          RequestInstant;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsOpen_IsOpen;                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_Open) == 0x000001, "Wrong alignment on BP_Door_C_Open");
static_assert(sizeof(BP_Door_C_Open) == 0x000005, "Wrong size on BP_Door_C_Open");
static_assert(offsetof(BP_Door_C_Open, RequestInstant) == 0x000000, "Member 'BP_Door_C_Open::RequestInstant' has a wrong offset!");
static_assert(offsetof(BP_Door_C_Open, Force) == 0x000001, "Member 'BP_Door_C_Open::Force' has a wrong offset!");
static_assert(offsetof(BP_Door_C_Open, CallFunc_GetIsOpen_IsOpen) == 0x000002, "Member 'BP_Door_C_Open::CallFunc_GetIsOpen_IsOpen' has a wrong offset!");
static_assert(offsetof(BP_Door_C_Open, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_Door_C_Open::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Door_C_Open, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BP_Door_C_Open::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Door.BP_Door_C.SetColliderState
// 0x0005 (0x0005 - 0x0000)
struct BP_Door_C_SetColliderState final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_SetColliderState) == 0x000001, "Wrong alignment on BP_Door_C_SetColliderState");
static_assert(sizeof(BP_Door_C_SetColliderState) == 0x000005, "Wrong size on BP_Door_C_SetColliderState");
static_assert(offsetof(BP_Door_C_SetColliderState, bEnable) == 0x000000, "Member 'BP_Door_C_SetColliderState::bEnable' has a wrong offset!");
static_assert(offsetof(BP_Door_C_SetColliderState, Temp_bool_Variable) == 0x000001, "Member 'BP_Door_C_SetColliderState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Door_C_SetColliderState, Temp_byte_Variable) == 0x000002, "Member 'BP_Door_C_SetColliderState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Door_C_SetColliderState, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Door_C_SetColliderState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Door_C_SetColliderState, K2Node_Select_Default) == 0x000004, "Member 'BP_Door_C_SetColliderState::K2Node_Select_Default' has a wrong offset!");

// Function BP_Door.BP_Door_C.Toggle
// 0x0001 (0x0001 - 0x0000)
struct BP_Door_C_Toggle final
{
public:
	bool                                          CallFunc_GetIsOpen_IsOpen;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_Toggle) == 0x000001, "Wrong alignment on BP_Door_C_Toggle");
static_assert(sizeof(BP_Door_C_Toggle) == 0x000001, "Wrong size on BP_Door_C_Toggle");
static_assert(offsetof(BP_Door_C_Toggle, CallFunc_GetIsOpen_IsOpen) == 0x000000, "Member 'BP_Door_C_Toggle::CallFunc_GetIsOpen_IsOpen' has a wrong offset!");

// Function BP_Door.BP_Door_C.GetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct BP_Door_C_GetIsOpen final
{
public:
	bool                                          IsOpen_0;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Door_C_GetIsOpen) == 0x000001, "Wrong alignment on BP_Door_C_GetIsOpen");
static_assert(sizeof(BP_Door_C_GetIsOpen) == 0x000001, "Wrong size on BP_Door_C_GetIsOpen");
static_assert(offsetof(BP_Door_C_GetIsOpen, IsOpen_0) == 0x000000, "Member 'BP_Door_C_GetIsOpen::IsOpen_0' has a wrong offset!");

}

