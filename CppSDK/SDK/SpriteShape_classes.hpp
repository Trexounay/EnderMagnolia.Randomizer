#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpriteShape

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SpriteShape_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class SpriteShape.SpriteShapeActor
// 0x0018 (0x02A8 - 0x0290)
class ASpriteShapeActor final : public AActor
{
public:
	class USceneComponent*                        RootSceneComponent;                                // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpriteShapeRendererComponent*          RenderComponent;                                   // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpriteShapeSplineComponent*            SplineComponent;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void RegenerateSpriteShape() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpriteShapeActor">();
	}
	static class ASpriteShapeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpriteShapeActor>();
	}
};
static_assert(alignof(ASpriteShapeActor) == 0x000008, "Wrong alignment on ASpriteShapeActor");
static_assert(sizeof(ASpriteShapeActor) == 0x0002A8, "Wrong size on ASpriteShapeActor");
static_assert(offsetof(ASpriteShapeActor, RootSceneComponent) == 0x000290, "Member 'ASpriteShapeActor::RootSceneComponent' has a wrong offset!");
static_assert(offsetof(ASpriteShapeActor, RenderComponent) == 0x000298, "Member 'ASpriteShapeActor::RenderComponent' has a wrong offset!");
static_assert(offsetof(ASpriteShapeActor, SplineComponent) == 0x0002A0, "Member 'ASpriteShapeActor::SplineComponent' has a wrong offset!");

// Class SpriteShape.SpriteShapeProfile
// 0x0068 (0x0098 - 0x0030)
class USpriteShapeProfile final : public UDataAsset
{
public:
	TArray<struct FSpriteShapeRule>               Rules;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           InteriorFill;                                      // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESpriteShapeCornerMode                        CornerMode;                                        // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSlopeDiffForCorner;                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_OuterTopRight;                              // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_OuterTopLeft;                               // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_OuterBottomRight;                           // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_OuterBottomLeft;                            // 0x0068(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_InnerTopRight;                              // 0x0070(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_InnerTopLeft;                               // 0x0078(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_InnerBottomRight;                           // 0x0080(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperSprite*                           Corner_InnerBottomLeft;                            // 0x0088(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CornerDrawOrder;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpriteShapeProfile">();
	}
	static class USpriteShapeProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpriteShapeProfile>();
	}
};
static_assert(alignof(USpriteShapeProfile) == 0x000008, "Wrong alignment on USpriteShapeProfile");
static_assert(sizeof(USpriteShapeProfile) == 0x000098, "Wrong size on USpriteShapeProfile");
static_assert(offsetof(USpriteShapeProfile, Rules) == 0x000030, "Member 'USpriteShapeProfile::Rules' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, InteriorFill) == 0x000040, "Member 'USpriteShapeProfile::InteriorFill' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, CornerMode) == 0x000048, "Member 'USpriteShapeProfile::CornerMode' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, MinSlopeDiffForCorner) == 0x00004C, "Member 'USpriteShapeProfile::MinSlopeDiffForCorner' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_OuterTopRight) == 0x000050, "Member 'USpriteShapeProfile::Corner_OuterTopRight' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_OuterTopLeft) == 0x000058, "Member 'USpriteShapeProfile::Corner_OuterTopLeft' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_OuterBottomRight) == 0x000060, "Member 'USpriteShapeProfile::Corner_OuterBottomRight' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_OuterBottomLeft) == 0x000068, "Member 'USpriteShapeProfile::Corner_OuterBottomLeft' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_InnerTopRight) == 0x000070, "Member 'USpriteShapeProfile::Corner_InnerTopRight' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_InnerTopLeft) == 0x000078, "Member 'USpriteShapeProfile::Corner_InnerTopLeft' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_InnerBottomRight) == 0x000080, "Member 'USpriteShapeProfile::Corner_InnerBottomRight' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, Corner_InnerBottomLeft) == 0x000088, "Member 'USpriteShapeProfile::Corner_InnerBottomLeft' has a wrong offset!");
static_assert(offsetof(USpriteShapeProfile, CornerDrawOrder) == 0x000090, "Member 'USpriteShapeProfile::CornerDrawOrder' has a wrong offset!");

// Class SpriteShape.SpriteShapeRendererComponent
// 0x00B0 (0x05D0 - 0x0520)
class USpriteShapeRendererComponent final : public UPrimitiveComponent
{
public:
	class USpriteShapeProfile*                    SpriteShapeProfile;                                // 0x0518(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           TerrainColor;                                      // 0x0520(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bFilledSpline;                                     // 0x0530(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FillPolygonFlatEdgeDistance;                       // 0x0534(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SegmentOverlapAmount;                              // 0x0538(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpriteSubdivisionX;                                // 0x053C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpriteSubdivisionY;                                // 0x0540(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RandomSeed;                                        // 0x0544(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAllowBodyStretch;                                 // 0x0548(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCreateCollisions;                                 // 0x0549(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54A[0x2];                                      // 0x054A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionDepth;                                    // 0x054C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionHeight;                                   // 0x0550(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionHeightLocationOffset;                     // 0x0554(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESpriteShapeCollisionTraceFlag                CollisionTrace;                                    // 0x0558(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESpriteShapeCollisionGenerationType           CollisionGenerationType;                           // 0x0559(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55A[0x2];                                      // 0x055A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionMergeDistanceThreshold;                   // 0x055C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FillCollisionSimplificationThreshold;              // 0x0560(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpriteShapeSplineComponent*            AssociatedSpline;                                  // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBodySetup*                             CachedBodySetup;                                   // 0x0570(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_578[0x58];                                     // 0x0578(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpriteShapeRendererComponent">();
	}
	static class USpriteShapeRendererComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpriteShapeRendererComponent>();
	}
};
static_assert(alignof(USpriteShapeRendererComponent) == 0x000010, "Wrong alignment on USpriteShapeRendererComponent");
static_assert(sizeof(USpriteShapeRendererComponent) == 0x0005D0, "Wrong size on USpriteShapeRendererComponent");
static_assert(offsetof(USpriteShapeRendererComponent, SpriteShapeProfile) == 0x000518, "Member 'USpriteShapeRendererComponent::SpriteShapeProfile' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, TerrainColor) == 0x000520, "Member 'USpriteShapeRendererComponent::TerrainColor' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, bFilledSpline) == 0x000530, "Member 'USpriteShapeRendererComponent::bFilledSpline' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, FillPolygonFlatEdgeDistance) == 0x000534, "Member 'USpriteShapeRendererComponent::FillPolygonFlatEdgeDistance' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, SegmentOverlapAmount) == 0x000538, "Member 'USpriteShapeRendererComponent::SegmentOverlapAmount' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, SpriteSubdivisionX) == 0x00053C, "Member 'USpriteShapeRendererComponent::SpriteSubdivisionX' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, SpriteSubdivisionY) == 0x000540, "Member 'USpriteShapeRendererComponent::SpriteSubdivisionY' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, RandomSeed) == 0x000544, "Member 'USpriteShapeRendererComponent::RandomSeed' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, bAllowBodyStretch) == 0x000548, "Member 'USpriteShapeRendererComponent::bAllowBodyStretch' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, bCreateCollisions) == 0x000549, "Member 'USpriteShapeRendererComponent::bCreateCollisions' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, CollisionDepth) == 0x00054C, "Member 'USpriteShapeRendererComponent::CollisionDepth' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, CollisionHeight) == 0x000550, "Member 'USpriteShapeRendererComponent::CollisionHeight' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, CollisionHeightLocationOffset) == 0x000554, "Member 'USpriteShapeRendererComponent::CollisionHeightLocationOffset' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, CollisionTrace) == 0x000558, "Member 'USpriteShapeRendererComponent::CollisionTrace' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, CollisionGenerationType) == 0x000559, "Member 'USpriteShapeRendererComponent::CollisionGenerationType' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, CollisionMergeDistanceThreshold) == 0x00055C, "Member 'USpriteShapeRendererComponent::CollisionMergeDistanceThreshold' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, FillCollisionSimplificationThreshold) == 0x000560, "Member 'USpriteShapeRendererComponent::FillCollisionSimplificationThreshold' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, AssociatedSpline) == 0x000568, "Member 'USpriteShapeRendererComponent::AssociatedSpline' has a wrong offset!");
static_assert(offsetof(USpriteShapeRendererComponent, CachedBodySetup) == 0x000570, "Member 'USpriteShapeRendererComponent::CachedBodySetup' has a wrong offset!");

// Class SpriteShape.SpriteShapeSplineComponent
// 0x0010 (0x0630 - 0x0620)
class USpriteShapeSplineComponent final : public USplineComponent
{
public:
	uint8                                         Pad_620[0x10];                                     // 0x0620(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpriteShapeSplineComponent">();
	}
	static class USpriteShapeSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpriteShapeSplineComponent>();
	}
};
static_assert(alignof(USpriteShapeSplineComponent) == 0x000010, "Wrong alignment on USpriteShapeSplineComponent");
static_assert(sizeof(USpriteShapeSplineComponent) == 0x000630, "Wrong size on USpriteShapeSplineComponent");

}

