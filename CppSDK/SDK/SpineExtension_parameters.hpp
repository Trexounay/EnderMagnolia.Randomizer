#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpineExtension

#include "Basic.hpp"

#include "SpineExtension_structs.hpp"


namespace SDK::Params
{

// Function SpineExtension.SpineAnimNotify.Received_SpineNotify
// 0x0010 (0x0010 - 0x0000)
struct SpineAnimNotify_Received_SpineNotify final
{
public:
	class USpineSkeletonAnimationComponent*       SpineAnimationComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineAnimNotify_Received_SpineNotify) == 0x000008, "Wrong alignment on SpineAnimNotify_Received_SpineNotify");
static_assert(sizeof(SpineAnimNotify_Received_SpineNotify) == 0x000010, "Wrong size on SpineAnimNotify_Received_SpineNotify");
static_assert(offsetof(SpineAnimNotify_Received_SpineNotify, SpineAnimationComponent) == 0x000000, "Member 'SpineAnimNotify_Received_SpineNotify::SpineAnimationComponent' has a wrong offset!");
static_assert(offsetof(SpineAnimNotify_Received_SpineNotify, ReturnValue) == 0x000008, "Member 'SpineAnimNotify_Received_SpineNotify::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineAnimNotifyState.GetExecutionRatio
// 0x0004 (0x0004 - 0x0000)
struct SpineAnimNotifyState_GetExecutionRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineAnimNotifyState_GetExecutionRatio) == 0x000004, "Wrong alignment on SpineAnimNotifyState_GetExecutionRatio");
static_assert(sizeof(SpineAnimNotifyState_GetExecutionRatio) == 0x000004, "Wrong size on SpineAnimNotifyState_GetExecutionRatio");
static_assert(offsetof(SpineAnimNotifyState_GetExecutionRatio, ReturnValue) == 0x000000, "Member 'SpineAnimNotifyState_GetExecutionRatio::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineAnimNotifyState.GetExecutionTime
// 0x0004 (0x0004 - 0x0000)
struct SpineAnimNotifyState_GetExecutionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineAnimNotifyState_GetExecutionTime) == 0x000004, "Wrong alignment on SpineAnimNotifyState_GetExecutionTime");
static_assert(sizeof(SpineAnimNotifyState_GetExecutionTime) == 0x000004, "Wrong size on SpineAnimNotifyState_GetExecutionTime");
static_assert(offsetof(SpineAnimNotifyState_GetExecutionTime, ReturnValue) == 0x000000, "Member 'SpineAnimNotifyState_GetExecutionTime::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineAnimNotifyState.IsExecuting
// 0x0001 (0x0001 - 0x0000)
struct SpineAnimNotifyState_IsExecuting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineAnimNotifyState_IsExecuting) == 0x000001, "Wrong alignment on SpineAnimNotifyState_IsExecuting");
static_assert(sizeof(SpineAnimNotifyState_IsExecuting) == 0x000001, "Wrong size on SpineAnimNotifyState_IsExecuting");
static_assert(offsetof(SpineAnimNotifyState_IsExecuting, ReturnValue) == 0x000000, "Member 'SpineAnimNotifyState_IsExecuting::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineAnimNotifyState.Received_SpineNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct SpineAnimNotifyState_Received_SpineNotifyBegin final
{
public:
	class USpineSkeletonAnimationComponent*       SpineAnimationComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineAnimNotifyState_Received_SpineNotifyBegin) == 0x000008, "Wrong alignment on SpineAnimNotifyState_Received_SpineNotifyBegin");
static_assert(sizeof(SpineAnimNotifyState_Received_SpineNotifyBegin) == 0x000010, "Wrong size on SpineAnimNotifyState_Received_SpineNotifyBegin");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyBegin, SpineAnimationComponent) == 0x000000, "Member 'SpineAnimNotifyState_Received_SpineNotifyBegin::SpineAnimationComponent' has a wrong offset!");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyBegin, TotalDuration) == 0x000008, "Member 'SpineAnimNotifyState_Received_SpineNotifyBegin::TotalDuration' has a wrong offset!");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyBegin, ReturnValue) == 0x00000C, "Member 'SpineAnimNotifyState_Received_SpineNotifyBegin::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineAnimNotifyState.Received_SpineNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct SpineAnimNotifyState_Received_SpineNotifyEnd final
{
public:
	class USpineSkeletonAnimationComponent*       SpineAnimationComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineAnimNotifyState_Received_SpineNotifyEnd) == 0x000008, "Wrong alignment on SpineAnimNotifyState_Received_SpineNotifyEnd");
static_assert(sizeof(SpineAnimNotifyState_Received_SpineNotifyEnd) == 0x000010, "Wrong size on SpineAnimNotifyState_Received_SpineNotifyEnd");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyEnd, SpineAnimationComponent) == 0x000000, "Member 'SpineAnimNotifyState_Received_SpineNotifyEnd::SpineAnimationComponent' has a wrong offset!");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyEnd, ReturnValue) == 0x000008, "Member 'SpineAnimNotifyState_Received_SpineNotifyEnd::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineAnimNotifyState.Received_SpineNotifyTick
// 0x0010 (0x0010 - 0x0000)
struct SpineAnimNotifyState_Received_SpineNotifyTick final
{
public:
	class USpineSkeletonAnimationComponent*       SpineAnimationComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineAnimNotifyState_Received_SpineNotifyTick) == 0x000008, "Wrong alignment on SpineAnimNotifyState_Received_SpineNotifyTick");
static_assert(sizeof(SpineAnimNotifyState_Received_SpineNotifyTick) == 0x000010, "Wrong size on SpineAnimNotifyState_Received_SpineNotifyTick");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyTick, SpineAnimationComponent) == 0x000000, "Member 'SpineAnimNotifyState_Received_SpineNotifyTick::SpineAnimationComponent' has a wrong offset!");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyTick, DeltaTime) == 0x000008, "Member 'SpineAnimNotifyState_Received_SpineNotifyTick::DeltaTime' has a wrong offset!");
static_assert(offsetof(SpineAnimNotifyState_Received_SpineNotifyTick, ReturnValue) == 0x00000C, "Member 'SpineAnimNotifyState_Received_SpineNotifyTick::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineAnimNotifyState_TimedFX.CustomizeFX
// 0x0008 (0x0008 - 0x0000)
struct SpineAnimNotifyState_TimedFX_CustomizeFX final
{
public:
	class UNiagaraComponent*                      FX;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineAnimNotifyState_TimedFX_CustomizeFX) == 0x000008, "Wrong alignment on SpineAnimNotifyState_TimedFX_CustomizeFX");
static_assert(sizeof(SpineAnimNotifyState_TimedFX_CustomizeFX) == 0x000008, "Wrong size on SpineAnimNotifyState_TimedFX_CustomizeFX");
static_assert(offsetof(SpineAnimNotifyState_TimedFX_CustomizeFX, FX) == 0x000000, "Member 'SpineAnimNotifyState_TimedFX_CustomizeFX::FX' has a wrong offset!");

// Function SpineExtension.SpineAnimNotify_PlayFX.CustomizeFX
// 0x0008 (0x0008 - 0x0000)
struct SpineAnimNotify_PlayFX_CustomizeFX final
{
public:
	class UNiagaraComponent*                      FX;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineAnimNotify_PlayFX_CustomizeFX) == 0x000008, "Wrong alignment on SpineAnimNotify_PlayFX_CustomizeFX");
static_assert(sizeof(SpineAnimNotify_PlayFX_CustomizeFX) == 0x000008, "Wrong size on SpineAnimNotify_PlayFX_CustomizeFX");
static_assert(offsetof(SpineAnimNotify_PlayFX_CustomizeFX, FX) == 0x000000, "Member 'SpineAnimNotify_PlayFX_CustomizeFX::FX' has a wrong offset!");

// Function SpineExtension.SpineBPFLibrary.GenerateAnimationList
// 0x0020 (0x0020 - 0x0000)
struct SpineBPFLibrary_GenerateAnimationList final
{
public:
	class USpineSkeletonDataAsset*                SkeletonDataAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineAtlasAsset*                       AtlasAsset;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineBPFLibrary_GenerateAnimationList) == 0x000008, "Wrong alignment on SpineBPFLibrary_GenerateAnimationList");
static_assert(sizeof(SpineBPFLibrary_GenerateAnimationList) == 0x000020, "Wrong size on SpineBPFLibrary_GenerateAnimationList");
static_assert(offsetof(SpineBPFLibrary_GenerateAnimationList, SkeletonDataAsset) == 0x000000, "Member 'SpineBPFLibrary_GenerateAnimationList::SkeletonDataAsset' has a wrong offset!");
static_assert(offsetof(SpineBPFLibrary_GenerateAnimationList, AtlasAsset) == 0x000008, "Member 'SpineBPFLibrary_GenerateAnimationList::AtlasAsset' has a wrong offset!");
static_assert(offsetof(SpineBPFLibrary_GenerateAnimationList, ReturnValue) == 0x000010, "Member 'SpineBPFLibrary_GenerateAnimationList::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineBPFLibrary.GenerateSkinList
// 0x0020 (0x0020 - 0x0000)
struct SpineBPFLibrary_GenerateSkinList final
{
public:
	class USpineSkeletonDataAsset*                SkeletonDataAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineAtlasAsset*                       AtlasAsset;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineBPFLibrary_GenerateSkinList) == 0x000008, "Wrong alignment on SpineBPFLibrary_GenerateSkinList");
static_assert(sizeof(SpineBPFLibrary_GenerateSkinList) == 0x000020, "Wrong size on SpineBPFLibrary_GenerateSkinList");
static_assert(offsetof(SpineBPFLibrary_GenerateSkinList, SkeletonDataAsset) == 0x000000, "Member 'SpineBPFLibrary_GenerateSkinList::SkeletonDataAsset' has a wrong offset!");
static_assert(offsetof(SpineBPFLibrary_GenerateSkinList, AtlasAsset) == 0x000008, "Member 'SpineBPFLibrary_GenerateSkinList::AtlasAsset' has a wrong offset!");
static_assert(offsetof(SpineBPFLibrary_GenerateSkinList, ReturnValue) == 0x000010, "Member 'SpineBPFLibrary_GenerateSkinList::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineBPFLibrary.MarkFXAsGenerated
// 0x0008 (0x0008 - 0x0000)
struct SpineBPFLibrary_MarkFXAsGenerated final
{
public:
	class UNiagaraComponent*                      FXComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineBPFLibrary_MarkFXAsGenerated) == 0x000008, "Wrong alignment on SpineBPFLibrary_MarkFXAsGenerated");
static_assert(sizeof(SpineBPFLibrary_MarkFXAsGenerated) == 0x000008, "Wrong size on SpineBPFLibrary_MarkFXAsGenerated");
static_assert(offsetof(SpineBPFLibrary_MarkFXAsGenerated, FXComponent) == 0x000000, "Member 'SpineBPFLibrary_MarkFXAsGenerated::FXComponent' has a wrong offset!");

// Function SpineExtension.SpineBPFLibrary.SpawnFXData
// 0x0120 (0x0120 - 0x0000)
struct SpineBPFLibrary_SpawnFXData final
{
public:
	struct FSpineFXData                           FXData;                                            // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0100(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineBoneComponent*                    BoneComponent;                                     // 0x0108(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0110(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineBPFLibrary_SpawnFXData) == 0x000010, "Wrong alignment on SpineBPFLibrary_SpawnFXData");
static_assert(sizeof(SpineBPFLibrary_SpawnFXData) == 0x000120, "Wrong size on SpineBPFLibrary_SpawnFXData");
static_assert(offsetof(SpineBPFLibrary_SpawnFXData, FXData) == 0x000000, "Member 'SpineBPFLibrary_SpawnFXData::FXData' has a wrong offset!");
static_assert(offsetof(SpineBPFLibrary_SpawnFXData, Actor) == 0x000100, "Member 'SpineBPFLibrary_SpawnFXData::Actor' has a wrong offset!");
static_assert(offsetof(SpineBPFLibrary_SpawnFXData, BoneComponent) == 0x000108, "Member 'SpineBPFLibrary_SpawnFXData::BoneComponent' has a wrong offset!");
static_assert(offsetof(SpineBPFLibrary_SpawnFXData, ReturnValue) == 0x000110, "Member 'SpineBPFLibrary_SpawnFXData::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineFXComponent.OnFXSystemEnd
// 0x0008 (0x0008 - 0x0000)
struct SpineFXComponent_OnFXSystemEnd final
{
public:
	class UNiagaraComponent*                      FX;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineFXComponent_OnFXSystemEnd) == 0x000008, "Wrong alignment on SpineFXComponent_OnFXSystemEnd");
static_assert(sizeof(SpineFXComponent_OnFXSystemEnd) == 0x000008, "Wrong size on SpineFXComponent_OnFXSystemEnd");
static_assert(offsetof(SpineFXComponent_OnFXSystemEnd, FX) == 0x000000, "Member 'SpineFXComponent_OnFXSystemEnd::FX' has a wrong offset!");

// Function SpineExtension.SpineFXComponent.SpawnFX
// 0x0110 (0x0110 - 0x0000)
struct SpineFXComponent_SpawnFX final
{
public:
	struct FSpineFXData                           FXData;                                            // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0100(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineFXComponent_SpawnFX) == 0x000010, "Wrong alignment on SpineFXComponent_SpawnFX");
static_assert(sizeof(SpineFXComponent_SpawnFX) == 0x000110, "Wrong size on SpineFXComponent_SpawnFX");
static_assert(offsetof(SpineFXComponent_SpawnFX, FXData) == 0x000000, "Member 'SpineFXComponent_SpawnFX::FXData' has a wrong offset!");
static_assert(offsetof(SpineFXComponent_SpawnFX, ReturnValue) == 0x000100, "Member 'SpineFXComponent_SpawnFX::ReturnValue' has a wrong offset!");

// Function SpineExtension.SpineFXComponent.SpawnFXs
// 0x0020 (0x0020 - 0x0000)
struct SpineFXComponent_SpawnFXs final
{
public:
	TArray<struct FSpineFXData>                   FXDataList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              out_FXInstances;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineFXComponent_SpawnFXs) == 0x000008, "Wrong alignment on SpineFXComponent_SpawnFXs");
static_assert(sizeof(SpineFXComponent_SpawnFXs) == 0x000020, "Wrong size on SpineFXComponent_SpawnFXs");
static_assert(offsetof(SpineFXComponent_SpawnFXs, FXDataList) == 0x000000, "Member 'SpineFXComponent_SpawnFXs::FXDataList' has a wrong offset!");
static_assert(offsetof(SpineFXComponent_SpawnFXs, out_FXInstances) == 0x000010, "Member 'SpineFXComponent_SpawnFXs::out_FXInstances' has a wrong offset!");

// Function SpineExtension.SpineRootMotionComponent.OnAfterUpdateWorldTransform
// 0x0008 (0x0008 - 0x0000)
struct SpineRootMotionComponent_OnAfterUpdateWorldTransform final
{
public:
	class USpineSkeletonComponent*                Skeleton;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineRootMotionComponent_OnAfterUpdateWorldTransform) == 0x000008, "Wrong alignment on SpineRootMotionComponent_OnAfterUpdateWorldTransform");
static_assert(sizeof(SpineRootMotionComponent_OnAfterUpdateWorldTransform) == 0x000008, "Wrong size on SpineRootMotionComponent_OnAfterUpdateWorldTransform");
static_assert(offsetof(SpineRootMotionComponent_OnAfterUpdateWorldTransform, Skeleton) == 0x000000, "Member 'SpineRootMotionComponent_OnAfterUpdateWorldTransform::Skeleton' has a wrong offset!");

// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationComplete
// 0x0008 (0x0008 - 0x0000)
struct SpineRootMotionComponent_OnAnyAnimationComplete final
{
public:
	class UTrackEntry*                            TrackEntry;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineRootMotionComponent_OnAnyAnimationComplete) == 0x000008, "Wrong alignment on SpineRootMotionComponent_OnAnyAnimationComplete");
static_assert(sizeof(SpineRootMotionComponent_OnAnyAnimationComplete) == 0x000008, "Wrong size on SpineRootMotionComponent_OnAnyAnimationComplete");
static_assert(offsetof(SpineRootMotionComponent_OnAnyAnimationComplete, TrackEntry) == 0x000000, "Member 'SpineRootMotionComponent_OnAnyAnimationComplete::TrackEntry' has a wrong offset!");

// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationDispose
// 0x0008 (0x0008 - 0x0000)
struct SpineRootMotionComponent_OnAnyAnimationDispose final
{
public:
	class UTrackEntry*                            TrackEntry;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineRootMotionComponent_OnAnyAnimationDispose) == 0x000008, "Wrong alignment on SpineRootMotionComponent_OnAnyAnimationDispose");
static_assert(sizeof(SpineRootMotionComponent_OnAnyAnimationDispose) == 0x000008, "Wrong size on SpineRootMotionComponent_OnAnyAnimationDispose");
static_assert(offsetof(SpineRootMotionComponent_OnAnyAnimationDispose, TrackEntry) == 0x000000, "Member 'SpineRootMotionComponent_OnAnyAnimationDispose::TrackEntry' has a wrong offset!");

// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationInterrupt
// 0x0008 (0x0008 - 0x0000)
struct SpineRootMotionComponent_OnAnyAnimationInterrupt final
{
public:
	class UTrackEntry*                            TrackEntry;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineRootMotionComponent_OnAnyAnimationInterrupt) == 0x000008, "Wrong alignment on SpineRootMotionComponent_OnAnyAnimationInterrupt");
static_assert(sizeof(SpineRootMotionComponent_OnAnyAnimationInterrupt) == 0x000008, "Wrong size on SpineRootMotionComponent_OnAnyAnimationInterrupt");
static_assert(offsetof(SpineRootMotionComponent_OnAnyAnimationInterrupt, TrackEntry) == 0x000000, "Member 'SpineRootMotionComponent_OnAnyAnimationInterrupt::TrackEntry' has a wrong offset!");

// Function SpineExtension.SpineRootMotionComponent.OnAnyAnimationStart
// 0x0008 (0x0008 - 0x0000)
struct SpineRootMotionComponent_OnAnyAnimationStart final
{
public:
	class UTrackEntry*                            TrackEntry;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineRootMotionComponent_OnAnyAnimationStart) == 0x000008, "Wrong alignment on SpineRootMotionComponent_OnAnyAnimationStart");
static_assert(sizeof(SpineRootMotionComponent_OnAnyAnimationStart) == 0x000008, "Wrong size on SpineRootMotionComponent_OnAnyAnimationStart");
static_assert(offsetof(SpineRootMotionComponent_OnAnyAnimationStart, TrackEntry) == 0x000000, "Member 'SpineRootMotionComponent_OnAnyAnimationStart::TrackEntry' has a wrong offset!");

// Function SpineExtension.SpineSkeletonAnimationExComponent.OnAnimationStart
// 0x0008 (0x0008 - 0x0000)
struct SpineSkeletonAnimationExComponent_OnAnimationStart final
{
public:
	class UTrackEntry*                            Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationExComponent_OnAnimationStart) == 0x000008, "Wrong alignment on SpineSkeletonAnimationExComponent_OnAnimationStart");
static_assert(sizeof(SpineSkeletonAnimationExComponent_OnAnimationStart) == 0x000008, "Wrong size on SpineSkeletonAnimationExComponent_OnAnimationStart");
static_assert(offsetof(SpineSkeletonAnimationExComponent_OnAnimationStart, Entry) == 0x000000, "Member 'SpineSkeletonAnimationExComponent_OnAnimationStart::Entry' has a wrong offset!");

// Function SpineExtension.SpineSkeletonAnimationExComponent.ReplaceSpineData
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonAnimationExComponent_ReplaceSpineData final
{
public:
	class USpineAtlasAsset*                       NewAtlas;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                NewSkeletonData;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineNotifyAsset*                      NewNotifyAsset;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationExComponent_ReplaceSpineData) == 0x000008, "Wrong alignment on SpineSkeletonAnimationExComponent_ReplaceSpineData");
static_assert(sizeof(SpineSkeletonAnimationExComponent_ReplaceSpineData) == 0x000018, "Wrong size on SpineSkeletonAnimationExComponent_ReplaceSpineData");
static_assert(offsetof(SpineSkeletonAnimationExComponent_ReplaceSpineData, NewAtlas) == 0x000000, "Member 'SpineSkeletonAnimationExComponent_ReplaceSpineData::NewAtlas' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationExComponent_ReplaceSpineData, NewSkeletonData) == 0x000008, "Member 'SpineSkeletonAnimationExComponent_ReplaceSpineData::NewSkeletonData' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationExComponent_ReplaceSpineData, NewNotifyAsset) == 0x000010, "Member 'SpineSkeletonAnimationExComponent_ReplaceSpineData::NewNotifyAsset' has a wrong offset!");

// Function SpineExtension.SpineSkeletonAnimationExComponent.SetPlaybackTimeIgnoreTimescale
// 0x0008 (0x0008 - 0x0000)
struct SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale final
{
public:
	float                                         InPlaybackTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallDelegates;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale) == 0x000004, "Wrong alignment on SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale");
static_assert(sizeof(SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale) == 0x000008, "Wrong size on SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale");
static_assert(offsetof(SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale, InPlaybackTime) == 0x000000, "Member 'SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale::InPlaybackTime' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale, bCallDelegates) == 0x000004, "Member 'SpineSkeletonAnimationExComponent_SetPlaybackTimeIgnoreTimescale::bCallDelegates' has a wrong offset!");

}

