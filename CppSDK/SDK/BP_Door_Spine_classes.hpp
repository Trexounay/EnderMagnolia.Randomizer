#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Door_Spine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Door_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Door_Spine.BP_Door_Spine_C
// 0x0070 (0x0338 - 0x02C8)
class ABP_Door_Spine_C : public ABP_Door_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Door_Spine_C;                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box_WakeTriggerTarget;                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USleepTargetComponent*                  SleepTarget;                                       // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDebugDisplayComponent*                 DebugDisplay;                                      // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpineSkeletonAnimationExComponent*     SpineSkeletonAnimationEx;                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpineSkeletonRendererComponent*        SpineSkeletonRenderer;                             // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 AnimName_OpenToClose;                              // 0x02F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AnimName_InstantOpen;                              // 0x0308(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AnimName_CloseToOpen;                              // 0x0318(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AnimName_InstantClose;                             // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Door_Spine(int32 EntryPoint);
	void OnClose(bool RequestInstant);
	void OnOpen(bool RequestInstant);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Door_Spine_C">();
	}
	static class ABP_Door_Spine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Door_Spine_C>();
	}
};
static_assert(alignof(ABP_Door_Spine_C) == 0x000008, "Wrong alignment on ABP_Door_Spine_C");
static_assert(sizeof(ABP_Door_Spine_C) == 0x000338, "Wrong size on ABP_Door_Spine_C");
static_assert(offsetof(ABP_Door_Spine_C, UberGraphFrame_BP_Door_Spine_C) == 0x0002C8, "Member 'ABP_Door_Spine_C::UberGraphFrame_BP_Door_Spine_C' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, Box_WakeTriggerTarget) == 0x0002D0, "Member 'ABP_Door_Spine_C::Box_WakeTriggerTarget' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, SleepTarget) == 0x0002D8, "Member 'ABP_Door_Spine_C::SleepTarget' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, DebugDisplay) == 0x0002E0, "Member 'ABP_Door_Spine_C::DebugDisplay' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, SpineSkeletonAnimationEx) == 0x0002E8, "Member 'ABP_Door_Spine_C::SpineSkeletonAnimationEx' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, SpineSkeletonRenderer) == 0x0002F0, "Member 'ABP_Door_Spine_C::SpineSkeletonRenderer' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, AnimName_OpenToClose) == 0x0002F8, "Member 'ABP_Door_Spine_C::AnimName_OpenToClose' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, AnimName_InstantOpen) == 0x000308, "Member 'ABP_Door_Spine_C::AnimName_InstantOpen' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, AnimName_CloseToOpen) == 0x000318, "Member 'ABP_Door_Spine_C::AnimName_CloseToOpen' has a wrong offset!");
static_assert(offsetof(ABP_Door_Spine_C, AnimName_InstantClose) == 0x000328, "Member 'ABP_Door_Spine_C::AnimName_InstantClose' has a wrong offset!");

}

