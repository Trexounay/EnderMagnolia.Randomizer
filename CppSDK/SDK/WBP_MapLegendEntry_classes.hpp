#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapLegendEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Zion_structs.hpp"
#include "Zion_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MapLegendEntry.WBP_MapLegendEntry_C
// 0x0058 (0x04B8 - 0x0460)
class UWBP_MapLegendEntry_C final : public UUserWidgetZion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Icon;                                              // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             IconDescription;                                   // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UPaperSprite>            IconSprite;                                        // 0x0478(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash)
	class FText                                   IconText;                                          // 0x04A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	EMapIconType                                  MapIconType;                                       // 0x04B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PreConstruct(bool IsDesignTime);
	void ExecuteUbergraph_WBP_MapLegendEntry(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MapLegendEntry_C">();
	}
	static class UWBP_MapLegendEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MapLegendEntry_C>();
	}
};
static_assert(alignof(UWBP_MapLegendEntry_C) == 0x000008, "Wrong alignment on UWBP_MapLegendEntry_C");
static_assert(sizeof(UWBP_MapLegendEntry_C) == 0x0004B8, "Wrong size on UWBP_MapLegendEntry_C");
static_assert(offsetof(UWBP_MapLegendEntry_C, UberGraphFrame) == 0x000460, "Member 'UWBP_MapLegendEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MapLegendEntry_C, Icon) == 0x000468, "Member 'UWBP_MapLegendEntry_C::Icon' has a wrong offset!");
static_assert(offsetof(UWBP_MapLegendEntry_C, IconDescription) == 0x000470, "Member 'UWBP_MapLegendEntry_C::IconDescription' has a wrong offset!");
static_assert(offsetof(UWBP_MapLegendEntry_C, IconSprite) == 0x000478, "Member 'UWBP_MapLegendEntry_C::IconSprite' has a wrong offset!");
static_assert(offsetof(UWBP_MapLegendEntry_C, IconText) == 0x0004A0, "Member 'UWBP_MapLegendEntry_C::IconText' has a wrong offset!");
static_assert(offsetof(UWBP_MapLegendEntry_C, MapIconType) == 0x0004B0, "Member 'UWBP_MapLegendEntry_C::MapIconType' has a wrong offset!");

}

