#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Settings_Entry_Choice_AspectRatio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Zion_structs.hpp"
#include "Zion_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Settings_Entry_Choice_AspectRatio.WBP_Settings_Entry_Choice_AspectRatio_C
// 0x00A0 (0x0500 - 0x0460)
class UWBP_Settings_Entry_Choice_AspectRatio_C final : public UUserWidgetZion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_Settings_Entry_Choice_Text_C*      WBP_Settings_Entry_Choice_Text;                    // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         CurrentAspectRatioIndex;                           // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnChanged;                                         // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   LabelText;                                         // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<EConstraintCameraAspectRatio>          AspectRatios;                                      // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TMap<EConstraintCameraAspectRatio, class FText> AspectRatioTextMap;                              // 0x04A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          IsForUI;                                           // 0x04F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__WBP_Settings_Entry_Choice_Resolution_WBP_Settings_Entry_Choice_Text_K2Node_ComponentBoundEvent_2_OnLeft__DelegateSignature();
	void BndEvt__WBP_Settings_Entry_Choice_Resolution_WBP_Settings_Entry_Choice_Text_K2Node_ComponentBoundEvent_3_OnRight__DelegateSignature();
	void ComputeCurrentAspectRatioIndex();
	void Construct();
	void ExecuteUbergraph_WBP_Settings_Entry_Choice_AspectRatio(int32 EntryPoint);
	void GetConstraintAspectRatio(EConstraintCameraAspectRatio* ConstraintAspectRatio);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void PreConstruct(bool IsDesignTime);
	void RefreshAspectRatioChoices();
	void RefreshText();
	void SetAspectRatio(int32 ResolutionIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Settings_Entry_Choice_AspectRatio_C">();
	}
	static class UWBP_Settings_Entry_Choice_AspectRatio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Settings_Entry_Choice_AspectRatio_C>();
	}
};
static_assert(alignof(UWBP_Settings_Entry_Choice_AspectRatio_C) == 0x000008, "Wrong alignment on UWBP_Settings_Entry_Choice_AspectRatio_C");
static_assert(sizeof(UWBP_Settings_Entry_Choice_AspectRatio_C) == 0x000500, "Wrong size on UWBP_Settings_Entry_Choice_AspectRatio_C");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, UberGraphFrame) == 0x000460, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, WBP_Settings_Entry_Choice_Text) == 0x000468, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::WBP_Settings_Entry_Choice_Text' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, CurrentAspectRatioIndex) == 0x000470, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::CurrentAspectRatioIndex' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, OnChanged) == 0x000478, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::OnChanged' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, LabelText) == 0x000488, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::LabelText' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, AspectRatios) == 0x000498, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::AspectRatios' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, AspectRatioTextMap) == 0x0004A8, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::AspectRatioTextMap' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Choice_AspectRatio_C, IsForUI) == 0x0004F8, "Member 'UWBP_Settings_Entry_Choice_AspectRatio_C::IsForUI' has a wrong offset!");

}

