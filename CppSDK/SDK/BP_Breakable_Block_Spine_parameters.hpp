#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Breakable_Block_Spine

#include "Basic.hpp"

#include "Zion_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Breakable_Block_Spine.BP_Breakable_Block_Spine_C.PlayDamageAnimation
// 0x0068 (0x0068 - 0x0000)
struct BP_Breakable_Block_Spine_C_PlayDamageAnimation final
{
public:
	struct FDamageData                            DamageData;                                        // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Breakable_Block_Spine_C_PlayDamageAnimation) == 0x000008, "Wrong alignment on BP_Breakable_Block_Spine_C_PlayDamageAnimation");
static_assert(sizeof(BP_Breakable_Block_Spine_C_PlayDamageAnimation) == 0x000068, "Wrong size on BP_Breakable_Block_Spine_C_PlayDamageAnimation");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayDamageAnimation, DamageData) == 0x000000, "Member 'BP_Breakable_Block_Spine_C_PlayDamageAnimation::DamageData' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayDamageAnimation, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_Breakable_Block_Spine_C_PlayDamageAnimation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayDamageAnimation, CallFunc_Array_Length_ReturnValue_1) == 0x00005C, "Member 'BP_Breakable_Block_Spine_C_PlayDamageAnimation::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayDamageAnimation, CallFunc_RandomInteger_ReturnValue) == 0x000060, "Member 'BP_Breakable_Block_Spine_C_PlayDamageAnimation::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayDamageAnimation, CallFunc_Greater_IntInt_ReturnValue) == 0x000064, "Member 'BP_Breakable_Block_Spine_C_PlayDamageAnimation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Breakable_Block_Spine.BP_Breakable_Block_Spine_C.PlayAnimation
// 0x0020 (0x0020 - 0x0000)
struct BP_Breakable_Block_Spine_C_PlayAnimation final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UTrackEntry*                            CallFunc_SetAnimation_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTrackEntry*                            CallFunc_AddAnimation_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Breakable_Block_Spine_C_PlayAnimation) == 0x000008, "Wrong alignment on BP_Breakable_Block_Spine_C_PlayAnimation");
static_assert(sizeof(BP_Breakable_Block_Spine_C_PlayAnimation) == 0x000020, "Wrong size on BP_Breakable_Block_Spine_C_PlayAnimation");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayAnimation, AnimationName) == 0x000000, "Member 'BP_Breakable_Block_Spine_C_PlayAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayAnimation, CallFunc_SetAnimation_ReturnValue) == 0x000010, "Member 'BP_Breakable_Block_Spine_C_PlayAnimation::CallFunc_SetAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_PlayAnimation, CallFunc_AddAnimation_ReturnValue) == 0x000018, "Member 'BP_Breakable_Block_Spine_C_PlayAnimation::CallFunc_AddAnimation_ReturnValue' has a wrong offset!");

// Function BP_Breakable_Block_Spine.BP_Breakable_Block_Spine_C.ExecuteUbergraph_BP_Breakable_Block_Spine
// 0x0070 (0x0070 - 0x0000)
struct BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Source;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDamageData                            K2Node_ComponentBoundEvent_DamageData;             // 0x0010(0x0058)(ConstParm, NoDestructor)
	class UTrackEntry*                            CallFunc_SetAnimation_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine) == 0x000008, "Wrong alignment on BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine");
static_assert(sizeof(BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine) == 0x000070, "Wrong size on BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine");
static_assert(offsetof(BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine, EntryPoint) == 0x000000, "Member 'BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine, K2Node_ComponentBoundEvent_Source) == 0x000008, "Member 'BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine::K2Node_ComponentBoundEvent_Source' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine, K2Node_ComponentBoundEvent_DamageData) == 0x000010, "Member 'BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine::K2Node_ComponentBoundEvent_DamageData' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine, CallFunc_SetAnimation_ReturnValue) == 0x000068, "Member 'BP_Breakable_Block_Spine_C_ExecuteUbergraph_BP_Breakable_Block_Spine::CallFunc_SetAnimation_ReturnValue' has a wrong offset!");

// Function BP_Breakable_Block_Spine.BP_Breakable_Block_Spine_C.BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature
// 0x0060 (0x0060 - 0x0000)
struct BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDamageData                            DamageData;                                        // 0x0008(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature");
static_assert(sizeof(BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature) == 0x000060, "Wrong size on BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature");
static_assert(offsetof(BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature, Source) == 0x000000, "Member 'BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature::Source' has a wrong offset!");
static_assert(offsetof(BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature, DamageData) == 0x000008, "Member 'BP_Breakable_Block_Spine_C_BndEvt__BP_Breakable_Block_Spine_StatHPComponent_K2Node_ComponentBoundEvent_1_HPDamageDelegate__DelegateSignature::DamageData' has a wrong offset!");

// Function BP_Breakable_Block_Spine.BP_Breakable_Block_Spine_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct BP_Breakable_Block_Spine_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_GetUnscaledBoxExtent_ReturnValue;         // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Breakable_Block_Spine_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Breakable_Block_Spine_C_UserConstructionScript");
static_assert(sizeof(BP_Breakable_Block_Spine_C_UserConstructionScript) == 0x000018, "Wrong size on BP_Breakable_Block_Spine_C_UserConstructionScript");
static_assert(offsetof(BP_Breakable_Block_Spine_C_UserConstructionScript, CallFunc_GetUnscaledBoxExtent_ReturnValue) == 0x000000, "Member 'BP_Breakable_Block_Spine_C_UserConstructionScript::CallFunc_GetUnscaledBoxExtent_ReturnValue' has a wrong offset!");

}

