#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpinePlugin

#include "Basic.hpp"

#include "SpinePlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "SpineMeshPlugin_classes.hpp"


namespace SDK
{

// Class SpinePlugin.SpineAtlasAsset
// 0x0030 (0x0058 - 0x0028)
class USpineAtlasAsset final : public UObject
{
public:
	TArray<class UTexture2D*>                     atlasPages;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 rawData;                                           // 0x0040(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   atlasFileName;                                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAtlasAsset">();
	}
	static class USpineAtlasAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAtlasAsset>();
	}
};
static_assert(alignof(USpineAtlasAsset) == 0x000008, "Wrong alignment on USpineAtlasAsset");
static_assert(sizeof(USpineAtlasAsset) == 0x000058, "Wrong size on USpineAtlasAsset");
static_assert(offsetof(USpineAtlasAsset, atlasPages) == 0x000028, "Member 'USpineAtlasAsset::atlasPages' has a wrong offset!");
static_assert(offsetof(USpineAtlasAsset, rawData) == 0x000040, "Member 'USpineAtlasAsset::rawData' has a wrong offset!");
static_assert(offsetof(USpineAtlasAsset, atlasFileName) == 0x000050, "Member 'USpineAtlasAsset::atlasFileName' has a wrong offset!");

// Class SpinePlugin.SpineBoneDriverComponent
// 0x0030 (0x0260 - 0x0230)
class USpineBoneDriverComponent final : public USceneComponent
{
public:
	class FName                                   TargetBoneName;                                    // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComponentTransform;                             // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x023B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriverEnabled;                                    // 0x023C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneName;                                          // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDriverEnable(bool bNewDriverEnable);

	bool IsDriverEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneDriverComponent">();
	}
	static class USpineBoneDriverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneDriverComponent>();
	}
};
static_assert(alignof(USpineBoneDriverComponent) == 0x000010, "Wrong alignment on USpineBoneDriverComponent");
static_assert(sizeof(USpineBoneDriverComponent) == 0x000260, "Wrong size on USpineBoneDriverComponent");
static_assert(offsetof(USpineBoneDriverComponent, TargetBoneName) == 0x000230, "Member 'USpineBoneDriverComponent::TargetBoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseComponentTransform) == 0x000238, "Member 'USpineBoneDriverComponent::UseComponentTransform' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UsePosition) == 0x000239, "Member 'USpineBoneDriverComponent::UsePosition' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseRotation) == 0x00023A, "Member 'USpineBoneDriverComponent::UseRotation' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseScale) == 0x00023B, "Member 'USpineBoneDriverComponent::UseScale' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, bDriverEnabled) == 0x00023C, "Member 'USpineBoneDriverComponent::bDriverEnabled' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, BoneName) == 0x000240, "Member 'USpineBoneDriverComponent::BoneName' has a wrong offset!");

// Class SpinePlugin.SpineBoneFollowerComponent
// 0x0040 (0x0270 - 0x0230)
class USpineBoneFollowerComponent final : public USceneComponent
{
public:
	class FName                                   TargetBoneName;                                    // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowLowPerformanceMode;                          // 0x023B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TranslationEqualityTolerance;                      // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationEqualityTolerance;                         // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScaleEqualityTolerance;                            // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxTimeBeforeForceUpdate;                          // 0x0248(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneName;                                          // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpineSkeletonComponent*                SpineSkeletonComponent;                            // 0x0260(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneFollowerComponent">();
	}
	static class USpineBoneFollowerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneFollowerComponent>();
	}
};
static_assert(alignof(USpineBoneFollowerComponent) == 0x000010, "Wrong alignment on USpineBoneFollowerComponent");
static_assert(sizeof(USpineBoneFollowerComponent) == 0x000270, "Wrong size on USpineBoneFollowerComponent");
static_assert(offsetof(USpineBoneFollowerComponent, TargetBoneName) == 0x000230, "Member 'USpineBoneFollowerComponent::TargetBoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UsePosition) == 0x000238, "Member 'USpineBoneFollowerComponent::UsePosition' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseRotation) == 0x000239, "Member 'USpineBoneFollowerComponent::UseRotation' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseScale) == 0x00023A, "Member 'USpineBoneFollowerComponent::UseScale' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, bAllowLowPerformanceMode) == 0x00023B, "Member 'USpineBoneFollowerComponent::bAllowLowPerformanceMode' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, TranslationEqualityTolerance) == 0x00023C, "Member 'USpineBoneFollowerComponent::TranslationEqualityTolerance' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, RotationEqualityTolerance) == 0x000240, "Member 'USpineBoneFollowerComponent::RotationEqualityTolerance' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, ScaleEqualityTolerance) == 0x000244, "Member 'USpineBoneFollowerComponent::ScaleEqualityTolerance' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, MaxTimeBeforeForceUpdate) == 0x000248, "Member 'USpineBoneFollowerComponent::MaxTimeBeforeForceUpdate' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, BoneName) == 0x000250, "Member 'USpineBoneFollowerComponent::BoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, SpineSkeletonComponent) == 0x000260, "Member 'USpineBoneFollowerComponent::SpineSkeletonComponent' has a wrong offset!");

// Class SpinePlugin.TrackEntry
// 0x00A0 (0x00C8 - 0x0028)
class UTrackEntry final : public UObject
{
public:
	uint8                                         Pad_28[0xA0];                                      // 0x0028(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAlpha();
	float getAnimationDuration();
	float GetAnimationEnd();
	float GetAnimationLast();
	class FString getAnimationName();
	float getAnimationOriginalDuration();
	float GetAnimationStart();
	float getAnimationTime();
	bool GetApplyRootMotion();
	float GetAttachmentThreshold();
	float GetDelay();
	float GetDrawOrderThreshold();
	float GetEventThreshold();
	bool GetLoop();
	float GetMixDuration();
	float GetMixTime();
	float GetTimeScale();
	float GetTrackEnd();
	int32 GetTrackIndex();
	float GetTrackTime();
	bool isValidAnimation();
	void SetAlpha(float Alpha);
	void SetAnimationEnd(float animationEnd);
	void SetAnimationLast(float animationLast);
	void SetAnimationStart(float animationStart);
	void SetAttachmentThreshold(float attachmentThreshold);
	void SetDelay(float Delay);
	void SetDrawOrderThreshold(float drawOrderThreshold);
	void SetEventThreshold(float eventThreshold);
	void SetLoop(bool Loop);
	void SetMixDuration(float mixDuration);
	void SetMixTime(float mixTime);
	void SetRootMotionID(int32 RootMotionID);
	void SetTimeScale(float TimeScale);
	void SetTrackEnd(float trackEnd);
	void SetTrackTime(float trackTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrackEntry">();
	}
	static class UTrackEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrackEntry>();
	}
};
static_assert(alignof(UTrackEntry) == 0x000008, "Wrong alignment on UTrackEntry");
static_assert(sizeof(UTrackEntry) == 0x0000C8, "Wrong size on UTrackEntry");

// Class SpinePlugin.SpineSkeletonComponent
// 0x00E8 (0x0188 - 0x00A0)
class USpineSkeletonComponent : public UActorComponent
{
public:
	class USpineAtlasAsset*                       Atlas;                                             // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0xD0];                                      // 0x00B0(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	class USpineSkeletonRendererComponent*        RendererComponent;                                 // 0x0180(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	float getAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	struct FTransform GetBoneWorldTransform(const class FName& BoneName);
	float GetIKConstraintMix(const class FString& IKConstraintName);
	struct FVector2D GetRootMotionDelta(int32 RootMotionID);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* Skins);
	void GetSlots(TArray<class FString>* Slots);
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	bool SetAttachment(const class FString& SlotName, const class FString& attachmentName);
	void SetBonesToSetupPose();
	void SetBoneWorldPosition(const class FName& BoneName, const struct FVector& Position);
	void SetBoneWorldRotation(const class FName& BoneName, const struct FQuat& Rotation);
	void SetIKConstraintMix(const class FString& IKConstraintName, float Mix);
	void SetIKConstraintsMix(const class FString& IKConstraintBaseName, float Mix);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotColor(const class FString& SlotName, const struct FColor& Color);
	void SetSlotsToSetupPose();
	void SetToSetupPose();
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonComponent">();
	}
	static class USpineSkeletonComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonComponent>();
	}
};
static_assert(alignof(USpineSkeletonComponent) == 0x000008, "Wrong alignment on USpineSkeletonComponent");
static_assert(sizeof(USpineSkeletonComponent) == 0x000188, "Wrong size on USpineSkeletonComponent");
static_assert(offsetof(USpineSkeletonComponent, Atlas) == 0x0000A0, "Member 'USpineSkeletonComponent::Atlas' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, SkeletonData) == 0x0000A8, "Member 'USpineSkeletonComponent::SkeletonData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, RendererComponent) == 0x000180, "Member 'USpineSkeletonComponent::RendererComponent' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonAnimationComponent
// 0x0190 (0x0318 - 0x0188)
class USpineSkeletonAnimationComponent : public USpineSkeletonComponent
{
public:
	uint8                                         Pad_188[0x90];                                     // 0x0188(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewAnimation;                                  // 0x0218(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewSkin;                                       // 0x0228(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      trackEntries;                                      // 0x0240(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_291[0x87];                                     // 0x0291(0x0087)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float mixDuration, float Delay);
	void AddTimeScaleFactor(float TimeScale, class FName Tag);
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetTimeScale();
	void RemoveTimeScaleFactor(class FName Tag);
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	void SetAutoPlay(bool bInAutoPlays);
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float mixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetTimeScale(float TimeScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonAnimationComponent">();
	}
	static class USpineSkeletonAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonAnimationComponent>();
	}
};
static_assert(alignof(USpineSkeletonAnimationComponent) == 0x000008, "Wrong alignment on USpineSkeletonAnimationComponent");
static_assert(sizeof(USpineSkeletonAnimationComponent) == 0x000318, "Wrong size on USpineSkeletonAnimationComponent");
static_assert(offsetof(USpineSkeletonAnimationComponent, PreviewAnimation) == 0x000218, "Member 'USpineSkeletonAnimationComponent::PreviewAnimation' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, PreviewSkin) == 0x000228, "Member 'USpineSkeletonAnimationComponent::PreviewSkin' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, trackEntries) == 0x000240, "Member 'USpineSkeletonAnimationComponent::trackEntries' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, bAutoPlaying) == 0x000290, "Member 'USpineSkeletonAnimationComponent::bAutoPlaying' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonDataAsset
// 0x0108 (0x0130 - 0x0028)
class USpineSkeletonDataAsset final : public UObject
{
public:
	struct FSpineMeshSectionUpdateSettings        MeshUpdateSettings;                                // 0x0028(0x0002)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleFactor;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMix;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpineAnimationStateMixData>    MixData;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultSkins;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BreakSkins;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         FootIKAnimations;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         Bones;                                             // 0x0078(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Slots;                                             // 0x0088(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Skins;                                             // 0x0098(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Animations;                                        // 0x00A8(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Events;                                            // 0x00B8(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<uint8>                                 rawData;                                           // 0x00C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   skeletonDataFileName;                              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x50];                                      // 0x00E0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonDataAsset">();
	}
	static class USpineSkeletonDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonDataAsset>();
	}
};
static_assert(alignof(USpineSkeletonDataAsset) == 0x000008, "Wrong alignment on USpineSkeletonDataAsset");
static_assert(sizeof(USpineSkeletonDataAsset) == 0x000130, "Wrong size on USpineSkeletonDataAsset");
static_assert(offsetof(USpineSkeletonDataAsset, MeshUpdateSettings) == 0x000028, "Member 'USpineSkeletonDataAsset::MeshUpdateSettings' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, ScaleFactor) == 0x00002C, "Member 'USpineSkeletonDataAsset::ScaleFactor' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, DefaultMix) == 0x000030, "Member 'USpineSkeletonDataAsset::DefaultMix' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, MixData) == 0x000038, "Member 'USpineSkeletonDataAsset::MixData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, DefaultSkins) == 0x000048, "Member 'USpineSkeletonDataAsset::DefaultSkins' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, BreakSkins) == 0x000058, "Member 'USpineSkeletonDataAsset::BreakSkins' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, FootIKAnimations) == 0x000068, "Member 'USpineSkeletonDataAsset::FootIKAnimations' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Bones) == 0x000078, "Member 'USpineSkeletonDataAsset::Bones' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Slots) == 0x000088, "Member 'USpineSkeletonDataAsset::Slots' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Skins) == 0x000098, "Member 'USpineSkeletonDataAsset::Skins' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Animations) == 0x0000A8, "Member 'USpineSkeletonDataAsset::Animations' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Events) == 0x0000B8, "Member 'USpineSkeletonDataAsset::Events' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, rawData) == 0x0000C8, "Member 'USpineSkeletonDataAsset::rawData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, skeletonDataFileName) == 0x0000D8, "Member 'USpineSkeletonDataAsset::skeletonDataFileName' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonRendererComponent
// 0x0290 (0x0890 - 0x0600)
class USpineSkeletonRendererComponent final : public USpineMeshComponent
{
public:
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasNormalBlendMaterials;                         // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasAdditiveBlendMaterials;                       // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasMultiplyBlendMaterials;                       // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasScreenBlendMaterials;                         // 0x0650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertDepthOffsetWithRotation;                    // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_665[0x3];                                      // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefaultForwardForDepthOffset;                      // 0x0668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      MaterialParamScalars;                              // 0x0698(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FLinearColor>        MaterialParamVectors;                              // 0x06E8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UTexture*>            MaterialParamTextures;                             // 0x0738(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_788[0x8];                                      // 0x0788(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FSkinCustomMaterialData> SkinsCustomMaterials;                        // 0x0790(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7E0[0x10];                                     // 0x07E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UMaterialInterface*>        MaterialForSections;                               // 0x07F0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class USpineSkeletonComponent*                SpineSkeletonComponent;                            // 0x0840(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_848[0x48];                                     // 0x0848(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCustomMaterialToSkins(TArray<class FString>* SkinNames, class UMaterialInterface* CustomMaterial);
	void RemoveCustomMaterialToSkins(TArray<class FString>* SkinNames);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetSkinsCustomMaterialScalarParameterValue(const TArray<class FString>& SkinNames, class FName ParameterName, float Value);
	void SetSkinsCustomMaterialTextureParameterValue(const TArray<class FString>& SkinNames, class FName ParameterName, class UTexture* Value);
	void SetSkinsCustomMaterialVectorParameterValue(const TArray<class FString>& SkinNames, class FName ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(class FName ParameterName, class UTexture* Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonRendererComponent">();
	}
	static class USpineSkeletonRendererComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonRendererComponent>();
	}
};
static_assert(alignof(USpineSkeletonRendererComponent) == 0x000010, "Wrong alignment on USpineSkeletonRendererComponent");
static_assert(sizeof(USpineSkeletonRendererComponent) == 0x000890, "Wrong size on USpineSkeletonRendererComponent");
static_assert(offsetof(USpineSkeletonRendererComponent, NormalBlendMaterial) == 0x000600, "Member 'USpineSkeletonRendererComponent::NormalBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, AdditiveBlendMaterial) == 0x000608, "Member 'USpineSkeletonRendererComponent::AdditiveBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, MultiplyBlendMaterial) == 0x000610, "Member 'USpineSkeletonRendererComponent::MultiplyBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, ScreenBlendMaterial) == 0x000618, "Member 'USpineSkeletonRendererComponent::ScreenBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasNormalBlendMaterials) == 0x000620, "Member 'USpineSkeletonRendererComponent::atlasNormalBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasAdditiveBlendMaterials) == 0x000630, "Member 'USpineSkeletonRendererComponent::atlasAdditiveBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasMultiplyBlendMaterials) == 0x000640, "Member 'USpineSkeletonRendererComponent::atlasMultiplyBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasScreenBlendMaterials) == 0x000650, "Member 'USpineSkeletonRendererComponent::atlasScreenBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, DepthOffset) == 0x000660, "Member 'USpineSkeletonRendererComponent::DepthOffset' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, bInvertDepthOffsetWithRotation) == 0x000664, "Member 'USpineSkeletonRendererComponent::bInvertDepthOffsetWithRotation' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, DefaultForwardForDepthOffset) == 0x000668, "Member 'USpineSkeletonRendererComponent::DefaultForwardForDepthOffset' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, TextureParameterName) == 0x000680, "Member 'USpineSkeletonRendererComponent::TextureParameterName' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Color) == 0x000688, "Member 'USpineSkeletonRendererComponent::Color' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, MaterialParamScalars) == 0x000698, "Member 'USpineSkeletonRendererComponent::MaterialParamScalars' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, MaterialParamVectors) == 0x0006E8, "Member 'USpineSkeletonRendererComponent::MaterialParamVectors' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, MaterialParamTextures) == 0x000738, "Member 'USpineSkeletonRendererComponent::MaterialParamTextures' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, SkinsCustomMaterials) == 0x000790, "Member 'USpineSkeletonRendererComponent::SkinsCustomMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, MaterialForSections) == 0x0007F0, "Member 'USpineSkeletonRendererComponent::MaterialForSections' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, SpineSkeletonComponent) == 0x000840, "Member 'USpineSkeletonRendererComponent::SpineSkeletonComponent' has a wrong offset!");

// Class SpinePlugin.SpineWidget
// 0x0648 (0x07C0 - 0x0178)
class USpineWidget final : public UWidget
{
public:
	class FString                                 InitialSkin;                                       // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineAtlasAsset*                       Atlas;                                             // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x01C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0xC];                                      // 0x01D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x01E0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ESpineWidgetRenderMode                        RenderMode;                                        // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USpineWidget* Skeleton)> BeforeUpdateWorldTransform;         // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineWidget* Skeleton)> AfterUpdateWorldTransform;          // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0xD0];                                     // 0x02D8(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasNormalBlendMaterials;                         // 0x03A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B8[0x50];                                     // 0x03B8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasAdditiveBlendMaterials;                       // 0x0408(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_418[0x50];                                     // 0x0418(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasMultiplyBlendMaterials;                       // 0x0468(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_478[0x50];                                     // 0x0478(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasScreenBlendMaterials;                         // 0x04C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D8[0x240];                                    // 0x04D8(0x0240)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      trackEntries;                                      // 0x0718(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_769[0x7];                                      // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class UTexture2D>, bool>  FullyLoadTextureFlags;                             // 0x0770(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float mixDuration, float Delay);
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	void ForceFullyLoadAtlasTextures();
	float getAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	struct FTransform GetBoneTransform(const class FString& BoneName);
	struct FVector GetBoundsMin();
	struct FVector GetBoundsSize();
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* Skins);
	void GetSlots(TArray<class FString>* Slots);
	float GetTimeScale();
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	void ReplaceSpineData(class USpineAtlasAsset* NewAtlas, class USpineSkeletonDataAsset* NewSkeletonData);
	void RevertFullyLoadAtlasTextures();
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	bool SetAttachment(const class FString& SlotName, const class FString& attachmentName);
	void SetAutoPlay(bool bInAutoPlays);
	void SetBonesToSetupPose();
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float mixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotsToSetupPose();
	void SetTimeScale(float TimeScale);
	void SetToSetupPose();
	void Tick(float DeltaTime, bool CallDelegates);
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineWidget">();
	}
	static class USpineWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineWidget>();
	}
};
static_assert(alignof(USpineWidget) == 0x000010, "Wrong alignment on USpineWidget");
static_assert(sizeof(USpineWidget) == 0x0007C0, "Wrong size on USpineWidget");
static_assert(offsetof(USpineWidget, InitialSkin) == 0x000178, "Member 'USpineWidget::InitialSkin' has a wrong offset!");
static_assert(offsetof(USpineWidget, Atlas) == 0x000188, "Member 'USpineWidget::Atlas' has a wrong offset!");
static_assert(offsetof(USpineWidget, SkeletonData) == 0x000190, "Member 'USpineWidget::SkeletonData' has a wrong offset!");
static_assert(offsetof(USpineWidget, NormalBlendMaterial) == 0x000198, "Member 'USpineWidget::NormalBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, AdditiveBlendMaterial) == 0x0001A0, "Member 'USpineWidget::AdditiveBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, MultiplyBlendMaterial) == 0x0001A8, "Member 'USpineWidget::MultiplyBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, ScreenBlendMaterial) == 0x0001B0, "Member 'USpineWidget::ScreenBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, TextureParameterName) == 0x0001B8, "Member 'USpineWidget::TextureParameterName' has a wrong offset!");
static_assert(offsetof(USpineWidget, DepthOffset) == 0x0001C0, "Member 'USpineWidget::DepthOffset' has a wrong offset!");
static_assert(offsetof(USpineWidget, Color) == 0x0001C4, "Member 'USpineWidget::Color' has a wrong offset!");
static_assert(offsetof(USpineWidget, Brush) == 0x0001E0, "Member 'USpineWidget::Brush' has a wrong offset!");
static_assert(offsetof(USpineWidget, RenderMode) == 0x0002B0, "Member 'USpineWidget::RenderMode' has a wrong offset!");
static_assert(offsetof(USpineWidget, BeforeUpdateWorldTransform) == 0x0002B8, "Member 'USpineWidget::BeforeUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineWidget, AfterUpdateWorldTransform) == 0x0002C8, "Member 'USpineWidget::AfterUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasNormalBlendMaterials) == 0x0003A8, "Member 'USpineWidget::atlasNormalBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasAdditiveBlendMaterials) == 0x000408, "Member 'USpineWidget::atlasAdditiveBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasMultiplyBlendMaterials) == 0x000468, "Member 'USpineWidget::atlasMultiplyBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasScreenBlendMaterials) == 0x0004C8, "Member 'USpineWidget::atlasScreenBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, trackEntries) == 0x000718, "Member 'USpineWidget::trackEntries' has a wrong offset!");
static_assert(offsetof(USpineWidget, bAutoPlaying) == 0x000768, "Member 'USpineWidget::bAutoPlaying' has a wrong offset!");
static_assert(offsetof(USpineWidget, FullyLoadTextureFlags) == 0x000770, "Member 'USpineWidget::FullyLoadTextureFlags' has a wrong offset!");

}

