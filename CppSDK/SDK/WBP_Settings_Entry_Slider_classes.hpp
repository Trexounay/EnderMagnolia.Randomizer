#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Settings_Entry_Slider

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Zion_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Settings_Entry_Slider.WBP_Settings_Entry_Slider_C
// 0x0138 (0x0598 - 0x0460)
class UWBP_Settings_Entry_Slider_C final : public UUserWidgetZion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             DisabledText;                                      // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Slider;                              // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_UnlimitedText;                       // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_TextContainer;                             // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_ValueText;                                 // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ValueText;                                         // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_Entry_Label_C*            WBP_Settings_Entry_Label;                          // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Slider_C*                          WBP_Slider;                                        // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher;                                    // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Label;                                             // 0x04B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	class UPaperSprite*                           LabelImage;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        SliderMinValue;                                    // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SliderMaxValue;                                    // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SliderStepSize;                                    // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double Value)>  OnSliderValueChanged;                              // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         SliderStepFastFactor;                              // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SliderFastFactorTime;                              // 0x04F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMouseUseStep;                                     // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisplayValue;                                      // 0x0501(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_502[0x6];                                      // 0x0502(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ValueFormat;                                       // 0x0508(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	float                                         ValueWidth;                                        // 0x0518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeTextWhenDisabled;                            // 0x051C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisabledValueText;                                 // 0x0520(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          ColorValue;                                        // 0x0530(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReferenceColorValue;                               // 0x0538(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            ColorSuperior;                                     // 0x0540(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                            ColorEqual;                                        // 0x0554(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                            ColorInferior;                                     // 0x0568(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LastPressedTime;                                   // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bPlaySoundEffectOnRelease;                         // 0x0588(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             SE_KeyReleased;                                    // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__WBP_Settings_Entry_Slider_WBP_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature(double Value);
	void ExecuteUbergraph_WBP_Settings_Entry_Slider(int32 EntryPoint);
	int32 Get_Slider_Step_Factor();
	void GetSliderValue(float* SliderValue);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnDownLeft(const struct FKeyEvent& KeyEvent);
	struct FEventReply OnDownRight(const struct FKeyEvent& KeyEvent);
	void OnKeyReleased();
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnPressLeft(const struct FKeyEvent& KeyEvent);
	struct FEventReply OnPressRight(const struct FKeyEvent& KeyEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnSetIsEnabled(bool bInIsEnabled);
	void PreConstruct(bool IsDesignTime);
	void SetLabel(const class FText& InText);
	void SetLabelImage(class UPaperSprite* LabelImage_0);
	void SetSliderValue(double InValue);
	void StepSlider();
	void UpdateValueColor();
	void UpdateValueText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Settings_Entry_Slider_C">();
	}
	static class UWBP_Settings_Entry_Slider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Settings_Entry_Slider_C>();
	}
};
static_assert(alignof(UWBP_Settings_Entry_Slider_C) == 0x000008, "Wrong alignment on UWBP_Settings_Entry_Slider_C");
static_assert(sizeof(UWBP_Settings_Entry_Slider_C) == 0x000598, "Wrong size on UWBP_Settings_Entry_Slider_C");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, UberGraphFrame) == 0x000460, "Member 'UWBP_Settings_Entry_Slider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, DisabledText) == 0x000468, "Member 'UWBP_Settings_Entry_Slider_C::DisabledText' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, HorizontalBox_Slider) == 0x000470, "Member 'UWBP_Settings_Entry_Slider_C::HorizontalBox_Slider' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, HorizontalBox_UnlimitedText) == 0x000478, "Member 'UWBP_Settings_Entry_Slider_C::HorizontalBox_UnlimitedText' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, Overlay_TextContainer) == 0x000480, "Member 'UWBP_Settings_Entry_Slider_C::Overlay_TextContainer' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, SizeBox_ValueText) == 0x000488, "Member 'UWBP_Settings_Entry_Slider_C::SizeBox_ValueText' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ValueText) == 0x000490, "Member 'UWBP_Settings_Entry_Slider_C::ValueText' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, WBP_Settings_Entry_Label) == 0x000498, "Member 'UWBP_Settings_Entry_Slider_C::WBP_Settings_Entry_Label' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, WBP_Slider) == 0x0004A0, "Member 'UWBP_Settings_Entry_Slider_C::WBP_Slider' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, WidgetSwitcher) == 0x0004A8, "Member 'UWBP_Settings_Entry_Slider_C::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, Label) == 0x0004B0, "Member 'UWBP_Settings_Entry_Slider_C::Label' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, LabelImage) == 0x0004C0, "Member 'UWBP_Settings_Entry_Slider_C::LabelImage' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, SliderMinValue) == 0x0004C8, "Member 'UWBP_Settings_Entry_Slider_C::SliderMinValue' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, SliderMaxValue) == 0x0004D0, "Member 'UWBP_Settings_Entry_Slider_C::SliderMaxValue' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, SliderStepSize) == 0x0004D8, "Member 'UWBP_Settings_Entry_Slider_C::SliderStepSize' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, OnSliderValueChanged) == 0x0004E0, "Member 'UWBP_Settings_Entry_Slider_C::OnSliderValueChanged' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, SliderStepFastFactor) == 0x0004F0, "Member 'UWBP_Settings_Entry_Slider_C::SliderStepFastFactor' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, SliderFastFactorTime) == 0x0004F8, "Member 'UWBP_Settings_Entry_Slider_C::SliderFastFactorTime' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, bMouseUseStep) == 0x000500, "Member 'UWBP_Settings_Entry_Slider_C::bMouseUseStep' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, DisplayValue) == 0x000501, "Member 'UWBP_Settings_Entry_Slider_C::DisplayValue' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ValueFormat) == 0x000508, "Member 'UWBP_Settings_Entry_Slider_C::ValueFormat' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ValueWidth) == 0x000518, "Member 'UWBP_Settings_Entry_Slider_C::ValueWidth' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ChangeTextWhenDisabled) == 0x00051C, "Member 'UWBP_Settings_Entry_Slider_C::ChangeTextWhenDisabled' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, DisabledValueText) == 0x000520, "Member 'UWBP_Settings_Entry_Slider_C::DisabledValueText' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ColorValue) == 0x000530, "Member 'UWBP_Settings_Entry_Slider_C::ColorValue' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ReferenceColorValue) == 0x000538, "Member 'UWBP_Settings_Entry_Slider_C::ReferenceColorValue' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ColorSuperior) == 0x000540, "Member 'UWBP_Settings_Entry_Slider_C::ColorSuperior' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ColorEqual) == 0x000554, "Member 'UWBP_Settings_Entry_Slider_C::ColorEqual' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, ColorInferior) == 0x000568, "Member 'UWBP_Settings_Entry_Slider_C::ColorInferior' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, LastPressedTime) == 0x000580, "Member 'UWBP_Settings_Entry_Slider_C::LastPressedTime' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, bPlaySoundEffectOnRelease) == 0x000588, "Member 'UWBP_Settings_Entry_Slider_C::bPlaySoundEffectOnRelease' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_Entry_Slider_C, SE_KeyReleased) == 0x000590, "Member 'UWBP_Settings_Entry_Slider_C::SE_KeyReleased' has a wrong offset!");

}

