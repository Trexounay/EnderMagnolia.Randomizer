#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Item_Header

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Zion_structs.hpp"


namespace SDK::Params
{

// Function WBP_Item_Header.WBP_Item_Header_C.ClearVideoTextures
// 0x0048 (0x0048 - 0x0000)
struct WBP_Item_Header_C_ClearVideoTextures final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBinkMediaTexture*                      K2Node_DynamicCast_AsBink_Media_Texture;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Item_Header_C_ClearVideoTextures) == 0x000008, "Wrong alignment on WBP_Item_Header_C_ClearVideoTextures");
static_assert(sizeof(WBP_Item_Header_C_ClearVideoTextures) == 0x000048, "Wrong size on WBP_Item_Header_C_ClearVideoTextures");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_Item_Header_C_ClearVideoTextures::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_Item_Header_C_ClearVideoTextures::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Item_Header_C_ClearVideoTextures::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_Item_Header_C_ClearVideoTextures::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WBP_Item_Header_C_ClearVideoTextures::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, CallFunc_Array_Get_Item) == 0x000028, "Member 'WBP_Item_Header_C_ClearVideoTextures::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WBP_Item_Header_C_ClearVideoTextures::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, K2Node_DynamicCast_AsBink_Media_Texture) == 0x000038, "Member 'WBP_Item_Header_C_ClearVideoTextures::K2Node_DynamicCast_AsBink_Media_Texture' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_ClearVideoTextures, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WBP_Item_Header_C_ClearVideoTextures::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.CloseVideo
// 0x0030 (0x0030 - 0x0000)
struct WBP_Item_Header_C_CloseVideo final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UImage*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Item_Header_C_CloseVideo) == 0x000008, "Wrong alignment on WBP_Item_Header_C_CloseVideo");
static_assert(sizeof(WBP_Item_Header_C_CloseVideo) == 0x000030, "Wrong size on WBP_Item_Header_C_CloseVideo");
static_assert(offsetof(WBP_Item_Header_C_CloseVideo, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_Item_Header_C_CloseVideo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_CloseVideo, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_Item_Header_C_CloseVideo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_CloseVideo, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Item_Header_C_CloseVideo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_CloseVideo, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_Item_Header_C_CloseVideo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_CloseVideo, CallFunc_Array_Get_Item) == 0x000020, "Member 'WBP_Item_Header_C_CloseVideo::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_CloseVideo, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WBP_Item_Header_C_CloseVideo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_CloseVideo, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'WBP_Item_Header_C_CloseVideo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.ExecuteUbergraph_WBP_Item_Header
// 0x0004 (0x0004 - 0x0000)
struct WBP_Item_Header_C_ExecuteUbergraph_WBP_Item_Header final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Item_Header_C_ExecuteUbergraph_WBP_Item_Header) == 0x000004, "Wrong alignment on WBP_Item_Header_C_ExecuteUbergraph_WBP_Item_Header");
static_assert(sizeof(WBP_Item_Header_C_ExecuteUbergraph_WBP_Item_Header) == 0x000004, "Wrong size on WBP_Item_Header_C_ExecuteUbergraph_WBP_Item_Header");
static_assert(offsetof(WBP_Item_Header_C_ExecuteUbergraph_WBP_Item_Header, EntryPoint) == 0x000000, "Member 'WBP_Item_Header_C_ExecuteUbergraph_WBP_Item_Header::EntryPoint' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.OpenSkillVideo
// 0x0008 (0x0008 - 0x0000)
struct WBP_Item_Header_C_OpenSkillVideo final
{
public:
	const class UPlatformMediaSource*             PlatformMediaSource;                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Item_Header_C_OpenSkillVideo) == 0x000008, "Wrong alignment on WBP_Item_Header_C_OpenSkillVideo");
static_assert(sizeof(WBP_Item_Header_C_OpenSkillVideo) == 0x000008, "Wrong size on WBP_Item_Header_C_OpenSkillVideo");
static_assert(offsetof(WBP_Item_Header_C_OpenSkillVideo, PlatformMediaSource) == 0x000000, "Member 'WBP_Item_Header_C_OpenSkillVideo::PlatformMediaSource' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.OpenVideo
// 0x0048 (0x0048 - 0x0000)
struct WBP_Item_Header_C_OpenVideo final
{
public:
	const class UPlatformMediaSource*             PlatformMediaSource;                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UPlatformMediaSource*             FallbackVideo;                                     // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 VideoBuffer;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UPlatformMediaSource*             K2Node_Select_Default;                             // 0x0020(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetBinkURLFromPlatformMediaSource_ReturnValue; // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetLooping_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OpenUrl_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Item_Header_C_OpenVideo) == 0x000008, "Wrong alignment on WBP_Item_Header_C_OpenVideo");
static_assert(sizeof(WBP_Item_Header_C_OpenVideo) == 0x000048, "Wrong size on WBP_Item_Header_C_OpenVideo");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, PlatformMediaSource) == 0x000000, "Member 'WBP_Item_Header_C_OpenVideo::PlatformMediaSource' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, FallbackVideo) == 0x000008, "Member 'WBP_Item_Header_C_OpenVideo::FallbackVideo' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, VideoBuffer) == 0x000010, "Member 'WBP_Item_Header_C_OpenVideo::VideoBuffer' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, CallFunc_IsPlaying_ReturnValue) == 0x000018, "Member 'WBP_Item_Header_C_OpenVideo::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'WBP_Item_Header_C_OpenVideo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, Temp_bool_Variable) == 0x00001A, "Member 'WBP_Item_Header_C_OpenVideo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, K2Node_Select_Default) == 0x000020, "Member 'WBP_Item_Header_C_OpenVideo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, CallFunc_Play_ReturnValue) == 0x000028, "Member 'WBP_Item_Header_C_OpenVideo::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, CallFunc_GetBinkURLFromPlatformMediaSource_ReturnValue) == 0x000030, "Member 'WBP_Item_Header_C_OpenVideo::CallFunc_GetBinkURLFromPlatformMediaSource_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, CallFunc_SetLooping_ReturnValue) == 0x000040, "Member 'WBP_Item_Header_C_OpenVideo::CallFunc_SetLooping_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_OpenVideo, CallFunc_OpenUrl_ReturnValue) == 0x000041, "Member 'WBP_Item_Header_C_OpenVideo::CallFunc_OpenUrl_ReturnValue' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.Setup
// 0x0168 (0x0168 - 0x0000)
struct WBP_Item_Header_C_Setup final
{
public:
	struct FInventoryItemData                     ItemData;                                          // 0x0000(0x0168)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Item_Header_C_Setup) == 0x000008, "Wrong alignment on WBP_Item_Header_C_Setup");
static_assert(sizeof(WBP_Item_Header_C_Setup) == 0x000168, "Wrong size on WBP_Item_Header_C_Setup");
static_assert(offsetof(WBP_Item_Header_C_Setup, ItemData) == 0x000000, "Member 'WBP_Item_Header_C_Setup::ItemData' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupGenericItem
// 0x02D8 (0x02D8 - 0x0000)
struct WBP_Item_Header_C_SetupGenericItem final
{
public:
	struct FInventoryItemData                     InventoryItemData;                                 // 0x0000(0x0168)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EInventoryItemType                            Temp_byte_Variable;                                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0170(0x0010)()
	class FText                                   Temp_text_Variable_1;                              // 0x0180(0x0010)()
	class FText                                   Temp_text_Variable_2;                              // 0x0190(0x0010)()
	class FText                                   Temp_text_Variable_3;                              // 0x01A0(0x0010)()
	class FText                                   Temp_text_Variable_4;                              // 0x01B0(0x0010)()
	class FText                                   Temp_text_Variable_5;                              // 0x01C0(0x0010)()
	class FText                                   Temp_text_Variable_6;                              // 0x01D0(0x0010)()
	class FText                                   Temp_text_Variable_7;                              // 0x01E0(0x0010)()
	class FText                                   Temp_text_Variable_8;                              // 0x01F0(0x0010)()
	class FText                                   Temp_text_Variable_9;                              // 0x0200(0x0010)()
	class FText                                   Temp_text_Variable_10;                             // 0x0210(0x0010)()
	class FText                                   Temp_text_Variable_11;                             // 0x0220(0x0010)()
	class FText                                   Temp_text_Variable_12;                             // 0x0230(0x0010)()
	class FText                                   Temp_text_Variable_13;                             // 0x0240(0x0010)()
	class FText                                   Temp_text_Variable_14;                             // 0x0250(0x0010)()
	class FText                                   Temp_text_Variable_15;                             // 0x0260(0x0010)()
	class FText                                   Temp_text_Variable_16;                             // 0x0270(0x0010)()
	class FText                                   Temp_text_Variable_17;                             // 0x0280(0x0010)()
	class FText                                   Temp_text_Variable_18;                             // 0x0290(0x0010)()
	class FText                                   Temp_text_Variable_19;                             // 0x02A0(0x0010)()
	EEquipmentType                                Temp_byte_Variable_1;                              // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x02B8(0x0010)()
	class FText                                   K2Node_Select_Default_1;                           // 0x02C8(0x0010)()
};
static_assert(alignof(WBP_Item_Header_C_SetupGenericItem) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupGenericItem");
static_assert(sizeof(WBP_Item_Header_C_SetupGenericItem) == 0x0002D8, "Wrong size on WBP_Item_Header_C_SetupGenericItem");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, InventoryItemData) == 0x000000, "Member 'WBP_Item_Header_C_SetupGenericItem::InventoryItemData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_byte_Variable) == 0x000168, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable) == 0x000170, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_1) == 0x000180, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_2) == 0x000190, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_3) == 0x0001A0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_4) == 0x0001B0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_5) == 0x0001C0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_6) == 0x0001D0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_7) == 0x0001E0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_8) == 0x0001F0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_9) == 0x000200, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_10) == 0x000210, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_11) == 0x000220, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_12) == 0x000230, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_13) == 0x000240, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_14) == 0x000250, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_15) == 0x000260, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_16) == 0x000270, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_17) == 0x000280, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_18) == 0x000290, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_text_Variable_19) == 0x0002A0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, Temp_byte_Variable_1) == 0x0002B0, "Member 'WBP_Item_Header_C_SetupGenericItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, K2Node_Select_Default) == 0x0002B8, "Member 'WBP_Item_Header_C_SetupGenericItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupGenericItem, K2Node_Select_Default_1) == 0x0002C8, "Member 'WBP_Item_Header_C_SetupGenericItem::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupSkill
// 0x0380 (0x0380 - 0x0000)
struct WBP_Item_Header_C_SetupSkill final
{
public:
	struct FInventoryItemSkillData                ItemSkillData;                                     // 0x0000(0x0288)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Level;                                             // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpecialSkill;                                     // 0x028C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillLevelData                        CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData; // 0x0290(0x00E8)()
	bool                                          CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue; // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Item_Header_C_SetupSkill) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupSkill");
static_assert(sizeof(WBP_Item_Header_C_SetupSkill) == 0x000380, "Wrong size on WBP_Item_Header_C_SetupSkill");
static_assert(offsetof(WBP_Item_Header_C_SetupSkill, ItemSkillData) == 0x000000, "Member 'WBP_Item_Header_C_SetupSkill::ItemSkillData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkill, Level) == 0x000288, "Member 'WBP_Item_Header_C_SetupSkill::Level' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkill, bSpecialSkill) == 0x00028C, "Member 'WBP_Item_Header_C_SetupSkill::bSpecialSkill' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkill, CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData) == 0x000290, "Member 'WBP_Item_Header_C_SetupSkill::CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkill, CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue) == 0x000378, "Member 'WBP_Item_Header_C_SetupSkill::CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupSkillItem
// 0x03E0 (0x03E0 - 0x0000)
struct WBP_Item_Header_C_SetupSkillItem final
{
public:
	struct FSkillLevelData                        SkillLevelData;                                    // 0x0000(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FInventoryItemSkillData                InventoryItemData;                                 // 0x00E8(0x0288)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bSpecialSkill;                                     // 0x0370(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0372(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_373[0x5];                                      // 0x0373(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillData                             K2Node_Select_Default;                             // 0x0378(0x0058)(ConstParm)
	class FText                                   K2Node_Select_Default_1;                           // 0x03D0(0x0010)()
};
static_assert(alignof(WBP_Item_Header_C_SetupSkillItem) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupSkillItem");
static_assert(sizeof(WBP_Item_Header_C_SetupSkillItem) == 0x0003E0, "Wrong size on WBP_Item_Header_C_SetupSkillItem");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillItem, SkillLevelData) == 0x000000, "Member 'WBP_Item_Header_C_SetupSkillItem::SkillLevelData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillItem, InventoryItemData) == 0x0000E8, "Member 'WBP_Item_Header_C_SetupSkillItem::InventoryItemData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillItem, bSpecialSkill) == 0x000370, "Member 'WBP_Item_Header_C_SetupSkillItem::bSpecialSkill' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillItem, Temp_bool_Variable) == 0x000371, "Member 'WBP_Item_Header_C_SetupSkillItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillItem, Temp_bool_Variable_1) == 0x000372, "Member 'WBP_Item_Header_C_SetupSkillItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillItem, K2Node_Select_Default) == 0x000378, "Member 'WBP_Item_Header_C_SetupSkillItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillItem, K2Node_Select_Default_1) == 0x0003D0, "Member 'WBP_Item_Header_C_SetupSkillItem::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupSkillUpgrade
// 0x0540 (0x0540 - 0x0000)
struct WBP_Item_Header_C_SetupSkillUpgrade final
{
public:
	struct FInventoryItemSkillData                ItemSkillData;                                     // 0x0000(0x0288)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Level;                                             // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpgradeLevel;                                      // 0x028C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpecialSkill;                                     // 0x0290(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillLevelData                        CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData; // 0x0298(0x00E8)()
	bool                                          CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue; // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillLevelData                        CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData_1; // 0x0388(0x00E8)()
	bool                                          CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue_1; // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillData                             K2Node_Select_Default;                             // 0x0478(0x0058)(ConstParm)
	bool                                          Temp_bool_Variable_1;                              // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x04D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D2[0x6];                                      // 0x04D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x04D8(0x0010)()
	struct FSkillData                             K2Node_Select_Default_2;                           // 0x04E8(0x0058)(ConstParm)
};
static_assert(alignof(WBP_Item_Header_C_SetupSkillUpgrade) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupSkillUpgrade");
static_assert(sizeof(WBP_Item_Header_C_SetupSkillUpgrade) == 0x000540, "Wrong size on WBP_Item_Header_C_SetupSkillUpgrade");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, ItemSkillData) == 0x000000, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::ItemSkillData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, Level) == 0x000288, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::Level' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, UpgradeLevel) == 0x00028C, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::UpgradeLevel' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, bSpecialSkill) == 0x000290, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::bSpecialSkill' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData) == 0x000298, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue) == 0x000380, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData_1) == 0x000388, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::CallFunc_GetSkillLevelDataFromItemSkillData_out_SkillData_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue_1) == 0x000470, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::CallFunc_GetSkillLevelDataFromItemSkillData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, Temp_bool_Variable) == 0x000471, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, K2Node_Select_Default) == 0x000478, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, Temp_bool_Variable_1) == 0x0004D0, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, Temp_bool_Variable_2) == 0x0004D1, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, K2Node_Select_Default_1) == 0x0004D8, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSkillUpgrade, K2Node_Select_Default_2) == 0x0004E8, "Member 'WBP_Item_Header_C_SetupSkillUpgrade::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupSpecialToggle
// 0x0030 (0x0030 - 0x0000)
struct WBP_Item_Header_C_SetupSpecialToggle final
{
public:
	bool                                          InputPin;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerZion*                  CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAptitude_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_2;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Item_Header_C_SetupSpecialToggle) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupSpecialToggle");
static_assert(sizeof(WBP_Item_Header_C_SetupSpecialToggle) == 0x000030, "Wrong size on WBP_Item_Header_C_SetupSpecialToggle");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, InputPin) == 0x000000, "Member 'WBP_Item_Header_C_SetupSpecialToggle::InputPin' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, Temp_byte_Variable) == 0x000001, "Member 'WBP_Item_Header_C_SetupSpecialToggle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Item_Header_C_SetupSpecialToggle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, CallFunc_MakeLiteralByte_ReturnValue) == 0x000003, "Member 'WBP_Item_Header_C_SetupSpecialToggle::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, Temp_bool_Variable) == 0x000004, "Member 'WBP_Item_Header_C_SetupSpecialToggle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_Item_Header_C_SetupSpecialToggle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, Temp_bool_Variable_2) == 0x000006, "Member 'WBP_Item_Header_C_SetupSpecialToggle::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, CallFunc_Get_ReturnValue) == 0x000008, "Member 'WBP_Item_Header_C_SetupSpecialToggle::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, CallFunc_HasAptitude_ReturnValue) == 0x000010, "Member 'WBP_Item_Header_C_SetupSpecialToggle::CallFunc_HasAptitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, K2Node_Select_Default) == 0x000018, "Member 'WBP_Item_Header_C_SetupSpecialToggle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, K2Node_Select_Default_1) == 0x000020, "Member 'WBP_Item_Header_C_SetupSpecialToggle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupSpecialToggle, K2Node_Select_Default_2) == 0x000028, "Member 'WBP_Item_Header_C_SetupSpecialToggle::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupTip
// 0x0168 (0x0168 - 0x0000)
struct WBP_Item_Header_C_SetupTip final
{
public:
	struct FInventoryItemData                     ItemData;                                          // 0x0000(0x0168)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Item_Header_C_SetupTip) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupTip");
static_assert(sizeof(WBP_Item_Header_C_SetupTip) == 0x000168, "Wrong size on WBP_Item_Header_C_SetupTip");
static_assert(offsetof(WBP_Item_Header_C_SetupTip, ItemData) == 0x000000, "Member 'WBP_Item_Header_C_SetupTip::ItemData' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupTutorial
// 0x0190 (0x0190 - 0x0000)
struct WBP_Item_Header_C_SetupTutorial final
{
public:
	struct FInventoryItemTutorialData             ItemTutorialData;                                  // 0x0000(0x0190)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Item_Header_C_SetupTutorial) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupTutorial");
static_assert(sizeof(WBP_Item_Header_C_SetupTutorial) == 0x000190, "Wrong size on WBP_Item_Header_C_SetupTutorial");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorial, ItemTutorialData) == 0x000000, "Member 'WBP_Item_Header_C_SetupTutorial::ItemTutorialData' has a wrong offset!");

// Function WBP_Item_Header.WBP_Item_Header_C.SetupTutorialItem
// 0x0310 (0x0310 - 0x0000)
struct WBP_Item_Header_C_SetupTutorialItem final
{
public:
	struct FInventoryItemTutorialData             ItemTutorialData;                                  // 0x0000(0x0190)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Temp_text_Variable;                                // 0x0190(0x0010)()
	class FText                                   Temp_text_Variable_1;                              // 0x01A0(0x0010)()
	class FText                                   Temp_text_Variable_2;                              // 0x01B0(0x0010)()
	class FText                                   Temp_text_Variable_3;                              // 0x01C0(0x0010)()
	class FText                                   Temp_text_Variable_4;                              // 0x01D0(0x0010)()
	class FText                                   Temp_text_Variable_5;                              // 0x01E0(0x0010)()
	class FText                                   Temp_text_Variable_6;                              // 0x01F0(0x0010)()
	class FText                                   Temp_text_Variable_7;                              // 0x0200(0x0010)()
	class FText                                   Temp_text_Variable_8;                              // 0x0210(0x0010)()
	class FText                                   Temp_text_Variable_9;                              // 0x0220(0x0010)()
	class FText                                   Temp_text_Variable_10;                             // 0x0230(0x0010)()
	class FText                                   Temp_text_Variable_11;                             // 0x0240(0x0010)()
	class FText                                   Temp_text_Variable_12;                             // 0x0250(0x0010)()
	class FText                                   Temp_text_Variable_13;                             // 0x0260(0x0010)()
	class FText                                   Temp_text_Variable_14;                             // 0x0270(0x0010)()
	class FText                                   Temp_text_Variable_15;                             // 0x0280(0x0010)()
	EEquipmentType                                Temp_byte_Variable;                                // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_16;                             // 0x0298(0x0010)()
	class FText                                   Temp_text_Variable_17;                             // 0x02A8(0x0010)()
	class FText                                   Temp_text_Variable_18;                             // 0x02B8(0x0010)()
	class APlayerControllerZion*                  CallFunc_Get_ReturnValue;                          // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPlatformMediaSource*                   CallFunc_GetTutorialVideo_ReturnValue;             // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x02D8(0x0010)()
	class FText                                   Temp_text_Variable_19;                             // 0x02E8(0x0010)()
	EInventoryItemType                            Temp_byte_Variable_1;                              // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x0300(0x0010)()
};
static_assert(alignof(WBP_Item_Header_C_SetupTutorialItem) == 0x000008, "Wrong alignment on WBP_Item_Header_C_SetupTutorialItem");
static_assert(sizeof(WBP_Item_Header_C_SetupTutorialItem) == 0x000310, "Wrong size on WBP_Item_Header_C_SetupTutorialItem");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, ItemTutorialData) == 0x000000, "Member 'WBP_Item_Header_C_SetupTutorialItem::ItemTutorialData' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable) == 0x000190, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_1) == 0x0001A0, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_2) == 0x0001B0, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_3) == 0x0001C0, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_4) == 0x0001D0, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_5) == 0x0001E0, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_6) == 0x0001F0, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_7) == 0x000200, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_8) == 0x000210, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_9) == 0x000220, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_10) == 0x000230, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_11) == 0x000240, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_12) == 0x000250, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_13) == 0x000260, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_14) == 0x000270, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_15) == 0x000280, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_byte_Variable) == 0x000290, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_16) == 0x000298, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_17) == 0x0002A8, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_18) == 0x0002B8, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, CallFunc_Get_ReturnValue) == 0x0002C8, "Member 'WBP_Item_Header_C_SetupTutorialItem::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, CallFunc_GetTutorialVideo_ReturnValue) == 0x0002D0, "Member 'WBP_Item_Header_C_SetupTutorialItem::CallFunc_GetTutorialVideo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, K2Node_Select_Default) == 0x0002D8, "Member 'WBP_Item_Header_C_SetupTutorialItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_text_Variable_19) == 0x0002E8, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, Temp_byte_Variable_1) == 0x0002F8, "Member 'WBP_Item_Header_C_SetupTutorialItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Item_Header_C_SetupTutorialItem, K2Node_Select_Default_1) == 0x000300, "Member 'WBP_Item_Header_C_SetupTutorialItem::K2Node_Select_Default_1' has a wrong offset!");

}

