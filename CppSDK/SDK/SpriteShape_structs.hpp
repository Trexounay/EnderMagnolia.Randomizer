#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpriteShape

#include "Basic.hpp"


namespace SDK
{

// Enum SpriteShape.ESpriteShapeCornerMode
// NumValues: 0x0004
enum class ESpriteShapeCornerMode : uint8
{
	Off                                      = 0,
	On                                       = 1,
	ReplaceCap                               = 2,
	ESpriteShapeCornerMode_MAX               = 3,
};

// Enum SpriteShape.ESpriteShapeCornerType
// NumValues: 0x000A
enum class ESpriteShapeCornerType : uint8
{
	None                                     = 0,
	OuterTopLeft                             = 1,
	OuterTopRight                            = 2,
	OuterBottomLeft                          = 3,
	OuterBottomRight                         = 4,
	InnerTopLeft                             = 5,
	InnerTopRight                            = 6,
	InnerBottomLeft                          = 7,
	InnerBottomRight                         = 8,
	ESpriteShapeCornerType_MAX               = 9,
};

// Enum SpriteShape.ESpriteShapeCollisionGenerationType
// NumValues: 0x0005
enum class ESpriteShapeCollisionGenerationType : uint8
{
	PolygonBatching                          = 0,
	Box                                      = 1,
	Custom                                   = 2,
	Polygon                                  = 3,
	ESpriteShapeCollisionGenerationType_MAX  = 4,
};

// Enum SpriteShape.ESpriteShapeCollisionTraceFlag
// NumValues: 0x0004
enum class ESpriteShapeCollisionTraceFlag : uint8
{
	Default                                  = 0,
	SimpleAsComplex                          = 1,
	ComplexAsSimple                          = 2,
	ESpriteShapeCollisionTraceFlag_MAX       = 3,
};

// ScriptStruct SpriteShape.SpriteShapeCondition
// 0x0008 (0x0008 - 0x0000)
struct FSpriteShapeCondition final
{
public:
	float                                         MinimumAngle;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumAngle;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpriteShapeCondition) == 0x000004, "Wrong alignment on FSpriteShapeCondition");
static_assert(sizeof(FSpriteShapeCondition) == 0x000008, "Wrong size on FSpriteShapeCondition");
static_assert(offsetof(FSpriteShapeCondition, MinimumAngle) == 0x000000, "Member 'FSpriteShapeCondition::MinimumAngle' has a wrong offset!");
static_assert(offsetof(FSpriteShapeCondition, MaximumAngle) == 0x000004, "Member 'FSpriteShapeCondition::MaximumAngle' has a wrong offset!");

// ScriptStruct SpriteShape.SpriteShapeRule
// 0x0038 (0x0038 - 0x0000)
struct FSpriteShapeRule final
{
public:
	class UPaperSprite*                           StartCap;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPaperSprite*>                   Body;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UPaperSprite*                           EndCap;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpriteShapeCondition>          Conditions;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DrawOrder;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpriteShapeRule) == 0x000008, "Wrong alignment on FSpriteShapeRule");
static_assert(sizeof(FSpriteShapeRule) == 0x000038, "Wrong size on FSpriteShapeRule");
static_assert(offsetof(FSpriteShapeRule, StartCap) == 0x000000, "Member 'FSpriteShapeRule::StartCap' has a wrong offset!");
static_assert(offsetof(FSpriteShapeRule, Body) == 0x000008, "Member 'FSpriteShapeRule::Body' has a wrong offset!");
static_assert(offsetof(FSpriteShapeRule, EndCap) == 0x000018, "Member 'FSpriteShapeRule::EndCap' has a wrong offset!");
static_assert(offsetof(FSpriteShapeRule, Conditions) == 0x000020, "Member 'FSpriteShapeRule::Conditions' has a wrong offset!");
static_assert(offsetof(FSpriteShapeRule, DrawOrder) == 0x000030, "Member 'FSpriteShapeRule::DrawOrder' has a wrong offset!");

}

