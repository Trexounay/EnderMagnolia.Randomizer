#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Currency

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Zion_structs.hpp"


namespace SDK::Params
{

// Function WBP_Currency.WBP_Currency_C.ExecuteUbergraph_WBP_Currency
// 0x0078 (0x0078 - 0x0000)
struct WBP_Currency_C_ExecuteUbergraph_WBP_Currency final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECurrencyType                                 Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0010)()
	class FText                                   Temp_text_Variable_1;                              // 0x0018(0x0010)()
	class FText                                   Temp_text_Variable_2;                              // 0x0028(0x0010)()
	ECurrencyType                                 Temp_byte_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_2;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_1;                           // 0x0068(0x0010)()
};
static_assert(alignof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency) == 0x000008, "Wrong alignment on WBP_Currency_C_ExecuteUbergraph_WBP_Currency");
static_assert(sizeof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency) == 0x000078, "Wrong size on WBP_Currency_C_ExecuteUbergraph_WBP_Currency");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, EntryPoint) == 0x000000, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_byte_Variable) == 0x000004, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_text_Variable) == 0x000008, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_text_Variable_1) == 0x000018, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_text_Variable_2) == 0x000028, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_byte_Variable_1) == 0x000038, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_object_Variable) == 0x000040, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_object_Variable_1) == 0x000048, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, Temp_object_Variable_2) == 0x000050, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, K2Node_Event_IsDesignTime) == 0x000058, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, K2Node_Select_Default) == 0x000060, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_ExecuteUbergraph_WBP_Currency, K2Node_Select_Default_1) == 0x000068, "Member 'WBP_Currency_C_ExecuteUbergraph_WBP_Currency::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_Currency.WBP_Currency_C.GetCurrencyValue
// 0x0018 (0x0018 - 0x0000)
struct WBP_Currency_C_GetCurrencyValue final
{
public:
	int32                                         Currency;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerZion*                  CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrency_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Currency_C_GetCurrencyValue) == 0x000008, "Wrong alignment on WBP_Currency_C_GetCurrencyValue");
static_assert(sizeof(WBP_Currency_C_GetCurrencyValue) == 0x000018, "Wrong size on WBP_Currency_C_GetCurrencyValue");
static_assert(offsetof(WBP_Currency_C_GetCurrencyValue, Currency) == 0x000000, "Member 'WBP_Currency_C_GetCurrencyValue::Currency' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_GetCurrencyValue, CallFunc_Get_ReturnValue) == 0x000008, "Member 'WBP_Currency_C_GetCurrencyValue::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_GetCurrencyValue, CallFunc_GetCurrency_ReturnValue) == 0x000010, "Member 'WBP_Currency_C_GetCurrencyValue::CallFunc_GetCurrency_ReturnValue' has a wrong offset!");

// Function WBP_Currency.WBP_Currency_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Currency_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Currency_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Currency_C_PreConstruct");
static_assert(sizeof(WBP_Currency_C_PreConstruct) == 0x000001, "Wrong size on WBP_Currency_C_PreConstruct");
static_assert(offsetof(WBP_Currency_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Currency_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Currency.WBP_Currency_C.RefreshCurrencyAfterText
// 0x0028 (0x0028 - 0x0000)
struct WBP_Currency_C_RefreshCurrencyAfterText final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowCurrencyAfter;                                // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrencyValue_Currency;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0010)()
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Currency_C_RefreshCurrencyAfterText) == 0x000008, "Wrong alignment on WBP_Currency_C_RefreshCurrencyAfterText");
static_assert(sizeof(WBP_Currency_C_RefreshCurrencyAfterText) == 0x000028, "Wrong size on WBP_Currency_C_RefreshCurrencyAfterText");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, Cost) == 0x000000, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::Cost' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, bShowCurrencyAfter) == 0x000004, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::bShowCurrencyAfter' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, Temp_byte_Variable) == 0x000005, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, Temp_bool_Variable) == 0x000007, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, CallFunc_GetCurrencyValue_Currency) == 0x000008, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::CallFunc_GetCurrencyValue_Currency' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyAfterText, K2Node_Select_Default) == 0x000022, "Member 'WBP_Currency_C_RefreshCurrencyAfterText::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Currency.WBP_Currency_C.RefreshCurrencyText
// 0x0018 (0x0018 - 0x0000)
struct WBP_Currency_C_RefreshCurrencyText final
{
public:
	int32                                         CallFunc_GetCurrencyValue_Currency;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0010)()
};
static_assert(alignof(WBP_Currency_C_RefreshCurrencyText) == 0x000008, "Wrong alignment on WBP_Currency_C_RefreshCurrencyText");
static_assert(sizeof(WBP_Currency_C_RefreshCurrencyText) == 0x000018, "Wrong size on WBP_Currency_C_RefreshCurrencyText");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyText, CallFunc_GetCurrencyValue_Currency) == 0x000000, "Member 'WBP_Currency_C_RefreshCurrencyText::CallFunc_GetCurrencyValue_Currency' has a wrong offset!");
static_assert(offsetof(WBP_Currency_C_RefreshCurrencyText, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_Currency_C_RefreshCurrencyText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

}

